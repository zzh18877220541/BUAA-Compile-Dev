CONSTTK const
INTTK int
IDENFR a
ASSIGN =
INTCON 10
COMMA ,
IDENFR ty
ASSIGN =
INTCON 90
SEMICN ;
CONSTTK const
INTTK int
IDENFR b
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
RBRACE }
SEMICN ;
INTTK int
IDENFR x
ASSIGN =
INTCON 5
COMMA ,
IDENFR z
ASSIGN =
INTCON 114514
SEMICN ;
INTTK int
IDENFR y
LBRACK [
INTCON 3
RBRACK ]
SEMICN ;
INTTK int
IDENFR global_var
ASSIGN =
INTCON 0
SEMICN ;
CHARTK char
IDENFR buaa
ASSIGN =
CHRCON '\0'
SEMICN ;
CONSTTK const
CHARTK char
IDENFR aa
LBRACK [
INTCON 5
RBRACK ]
ASSIGN =
STRCON "abc\0"
SEMICN ;
CHARTK char
IDENFR aaa
LBRACK [
INTCON 6
RBRACK ]
ASSIGN =
STRCON "xyz"
SEMICN ;
INTTK int
IDENFR g
LPARENT (
INTTK int
IDENFR arr
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
RETURNTK return
IDENFR arr
LBRACK [
INTCON 0
RBRACK ]
PLUS +
IDENFR arr
LBRACK [
IDENFR arr
LBRACK [
INTCON 1
RBRACK ]
PLUS +
MINU -
IDENFR arr
LBRACK [
INTCON 0
RBRACK ]
RBRACK ]
SEMICN ;
RBRACE }
CHARTK char
IDENFR foo
LPARENT (
INTTK int
IDENFR aa
COMMA ,
INTTK int
IDENFR bb
RPARENT )
LBRACE {
RETURNTK return
CHRCON 'o'
SEMICN ;
RBRACE }
VOIDTK void
IDENFR fooo
LPARENT (
INTTK int
IDENFR aa
COMMA ,
INTTK int
IDENFR bb
RPARENT )
LBRACE {
RETURNTK return
SEMICN ;
RBRACE }
INTTK int
IDENFR func
LPARENT (
RPARENT )
LBRACE {
IDENFR global_var
ASSIGN =
IDENFR global_var
PLUS +
INTCON 1
SEMICN ;
RETURNTK return
INTCON 1
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "21374067\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
CHARTK char
IDENFR c
ASSIGN =
CHRCON 'a'
SEMICN ;
CONSTTK const
CHARTK char
IDENFR ch
ASSIGN =
CHRCON 'b'
SEMICN ;
INTTK int
IDENFR p
ASSIGN =
PLUS +
MINU -
INTCON 10
SEMICN ;
INTTK int
IDENFR q
ASSIGN =
LPARENT (
IDENFR p
PLUS +
INTCON 5
RPARENT )
MULT *
INTCON 2
DIV /
INTCON 1
PLUS +
INTCON 0
SEMICN ;
IFTK if
LPARENT (
IDENFR p
LSS <
INTCON 20
OR ||
NOT !
IDENFR func
LPARENT (
RPARENT )
RPARENT )
LBRACE {
IDENFR p
ASSIGN =
IDENFR p
MINU -
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
IFTK if
LPARENT (
IDENFR p
GRE >
INTCON 0
AND &&
IDENFR func
LPARENT (
RPARENT )
RPARENT )
LBRACE {
IDENFR p
ASSIGN =
IDENFR p
PLUS +
INTCON 1
SEMICN ;
SEMICN ;
LBRACE {
IDENFR p
PLUS +
INTCON 1
SEMICN ;
RBRACE }
LBRACE {
RBRACE }
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR p
RPARENT )
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
INTCON 6
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "i: %d\n"
COMMA ,
IDENFR i
RPARENT )
SEMICN ;
CONTINUETK continue
SEMICN ;
RBRACE }
INTTK int
IDENFR array
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
RBRACE }
SEMICN ;
INTTK int
IDENFR res
ASSIGN =
IDENFR func
LPARENT (
RPARENT )
SEMICN ;
INTTK int
IDENFR gi
SEMICN ;
IDENFR gi
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR i
ASSIGN =
IDENFR g
LPARENT (
IDENFR array
RPARENT )
SEMICN ;
IDENFR c
ASSIGN =
GETCHARTK getchar
LPARENT (
RPARENT )
SEMICN ;
FORTK for
LPARENT (
IDENFR c
ASSIGN =
CHRCON 'a'
SEMICN ;
IDENFR c
LSS <
LPARENT (
INTCON 127
MOD %
INTCON 128
RPARENT )
OR ||
IDENFR i
NEQ !=
INTCON 0
SEMICN ;
IDENFR c
ASSIGN =
IDENFR c
PLUS +
INTCON 1
RPARENT )
LBRACE {
IDENFR c
ASSIGN =
IDENFR c
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR c
EQL ==
CHRCON 'x'
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
RBRACE }
FORTK for
LPARENT (
IDENFR c
ASSIGN =
CHRCON 'a'
SEMICN ;
SEMICN ;
IDENFR c
ASSIGN =
IDENFR c
PLUS +
INTCON 1
RPARENT )
LBRACE {
IDENFR c
ASSIGN =
IDENFR c
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR c
EQL ==
CHRCON 'x'
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "%c\n"
COMMA ,
IDENFR c
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR c
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR c
GRE >
INTCON 0
AND &&
IDENFR c
LSS <
INTCON 0
AND &&
IDENFR c
LEQ <=
INTCON 0
AND &&
IDENFR c
GEQ >=
INTCON 0
AND &&
IDENFR c
NEQ !=
INTCON 0
AND &&
IDENFR c
EQL ==
INTCON 0
RPARENT )
LBRACE {
FORTK for
LPARENT (
SEMICN ;
NOT !
IDENFR c
SEMICN ;
IDENFR c
ASSIGN =
IDENFR c
PLUS +
INTCON 1
RPARENT )
LBRACE {
IDENFR c
ASSIGN =
IDENFR c
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR c
EQL ==
CHRCON 'x'
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
RBRACE }
FORTK for
LPARENT (
SEMICN ;
SEMICN ;
RPARENT )
IDENFR c
ASSIGN =
CHRCON 'a'
SEMICN ;
FORTK for
LPARENT (
IDENFR c
ASSIGN =
IDENFR c
SEMICN ;
SEMICN ;
RPARENT )
IDENFR c
ASSIGN =
CHRCON 'b'
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
SEMICN ;
IDENFR c
ASSIGN =
IDENFR c
RPARENT )
IDENFR c
ASSIGN =
CHRCON 'c'
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
IDENFR c
NEQ !=
IDENFR c
SEMICN ;
RPARENT )
IDENFR c
ASSIGN =
CHRCON 'd'
SEMICN ;
FORTK for
LPARENT (
IDENFR c
ASSIGN =
IDENFR c
SEMICN ;
IDENFR c
NEQ !=
IDENFR c
SEMICN ;
RPARENT )
IDENFR c
ASSIGN =
CHRCON 'e'
SEMICN ;
FORTK for
LPARENT (
IDENFR c
ASSIGN =
IDENFR c
SEMICN ;
SEMICN ;
IDENFR c
ASSIGN =
IDENFR c
RPARENT )
IDENFR c
ASSIGN =
CHRCON 'f'
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
IDENFR c
NEQ !=
IDENFR c
SEMICN ;
IDENFR c
ASSIGN =
IDENFR c
RPARENT )
IDENFR c
ASSIGN =
CHRCON 'g'
SEMICN ;
RBRACE }
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }