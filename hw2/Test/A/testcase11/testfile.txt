
// 存在 Decl
// ConstDecl
// Btype int
// 花括号内重复 0 次
const int const_int_a = 0;
// 花括号内重复多次
// 包含普通变量
// 包含一维数组
// 常量表达式初值
// 一维数组初值
const int const_int_b1 = 1, const_int_b2[5] = {0, 1, 2, 3, 4};
const char str[10] = "hello!";

// VarDecl
// Btype char
// 花括号内重复 0 次
char char_a = 'a';
// 花括号内重复多次
// 包含普通变量
// 包含一维数组
// 表达式初值
// 一维数组初值
char char_b1 = 'b', char_b2[5] = {'a', 'b', 'c', 'd', 'e'}, char_b3[10] = "world!";
int int_b2[5];
// 存在 FuncDef
// void 类型函数
// 花括号内重复多次
// 一维数组变量
// 普通变量
void print_int_arr(int arr[], int n) {
    int i = 0;
    for (i = 0; i < n; i = i + 1) {
        printf("%d ", arr[i]);
    }
    printf("\n");
    return;
}

void test_stmt_1_3() {
    char_a = 'A';;
    1 + 1; {
    }
    return;
}

void test_stmt_if_else() {
    if (1 < 2) {
        ;
    }
    // 有 else
    if (1 > 2) {
        ;
    } else {
        ;
    }
    return;
}

void test_stmt_for_break_continue() {
    int i = 0, n = 1;
    for (i = 0; i < n; i = i + 1) {
        i = i + 1;
    }
    i = 0;
    for (; i < n; i = i + 1) {
        continue;
        i = i + 1;
    }
    for (i = 0;; i = i + 1) {
        break;
    }
    for (i = 0; i < n;) {
        i = i + 1;
    }
    for (;; i = i + 1) {
        break;
    }
    i = 0;
    for (; i < n;) {
        break;
    }
    for (i = 0;;) {
        break;
    }
    for (;;) {
        break;
    }
    return;
}

void test_stmt_return_null() {
    return;
}

int test_stmt_return_exp() {
    return 1;
}

void test_stmt_getint_getchar_printf() {
    int a = 1;
    char ch = 'a';
    a = getint();
    ch = getchar();
    printf("test_stmt_getint_getchar_printf");
    printf("%c%c%c%c%c%c%c\n", 's', 'u', 'c', 'c', 'e', 's', 's');
    return;
}

// 花括号内重复 0 次
void test_block() {
    // 花括号内重复 0 次
    {
    }
    // 花括号内重复多次
    {
    }
    return;
}

// int 类型函数
int add_int(int a, int b) {
    return a + b;
}

// char 类型函数
char read_char(char ch) {
    ;
    return ch;
}

void test_Lval_exp() {
    const_int_a;
    char_a;
    char_b2[0];
    printf("test_Lval_exp success!\n");
    return;
}

void test_primary_exp() {
    (1);
    char_a;
    1;
    'a';
    printf("test_primary_exp success!\n");
    return;
}

void test_func_int(int a) {
    return;
}

void test_func_int_arr(int a[]) {
    return;
}

void test_func_mul_int(int a, int b) {
    return;
}

void test_unary_exp() {
    0;
    test_func_int(0);
    test_func_int(int_b2[0]);
    test_func_int_arr(int_b2);
    test_func_mul_int(0, 1);
    +1;
    -1;
    if (!1);
    printf("test_unary_exp success!\n");
    return;
}

void test_mul_exp() {
    1;
    1 * 1;
    1 / 1;
    1 % 1;
    printf("test_mul_exp success!\n");
    return;
}

void test_add_exp() {
    1;
    1 + 1;
    1 - 1;
    printf("test_add_exp_success!\n");
    return;
}

void test_rel_exp() {
    1;
    if (1 < 2);
    if (1 > 2);
    if (1 <= 2);
    if (1 >= 2);
    printf("test_rel_exp success!\n");
    return;
}

void test_Eqexp() {
    1;
    if (1 == 1);
    if (1 != 1);
    printf("test_Eqexp success!\n");
    return;
}

void test_Lexp() {
    1;
    if (1 && 1);
    if (1 || 1);
    printf("test_Lexp success!\n");
    return;
}

void test() {
    test_stmt_1_3();
    test_stmt_for_break_continue();
    test_stmt_getint_getchar_printf();
    test_stmt_if_else();
    test_stmt_return_exp();
    test_stmt_return_null();
    test_Eqexp();
    test_Lval_exp();
    test_add_exp();
    test_mul_exp();
    test_primary_exp();
    test_rel_exp();
    test_unary_exp();
}

int main() {
    printf("22371236\n");
    test();
    return 0;
}