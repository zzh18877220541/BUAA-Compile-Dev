CONSTTK const
INTTK int
IDENFR const_int_a
ASSIGN =
INTCON 0
SEMICN ;
CONSTTK const
INTTK int
IDENFR const_int_b1
ASSIGN =
INTCON 1
COMMA ,
IDENFR const_int_b2
LBRACK [
INTCON 5
RBRACK ]
ASSIGN =
LBRACE {
INTCON 0
COMMA ,
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
COMMA ,
INTCON 4
RBRACE }
SEMICN ;
CONSTTK const
CHARTK char
IDENFR str
LBRACK [
INTCON 10
RBRACK ]
ASSIGN =
STRCON "hello!"
SEMICN ;
CHARTK char
IDENFR char_a
ASSIGN =
CHRCON 'a'
SEMICN ;
CHARTK char
IDENFR char_b1
ASSIGN =
CHRCON 'b'
COMMA ,
IDENFR char_b2
LBRACK [
INTCON 5
RBRACK ]
ASSIGN =
LBRACE {
CHRCON 'a'
COMMA ,
CHRCON 'b'
COMMA ,
CHRCON 'c'
COMMA ,
CHRCON 'd'
COMMA ,
CHRCON 'e'
RBRACE }
COMMA ,
IDENFR char_b3
LBRACK [
INTCON 10
RBRACK ]
ASSIGN =
STRCON "world!"
SEMICN ;
INTTK int
IDENFR int_b2
LBRACK [
INTCON 5
RBRACK ]
SEMICN ;
VOIDTK void
IDENFR print_int_arr
LPARENT (
INTTK int
IDENFR arr
LBRACK [
RBRACK ]
COMMA ,
INTTK int
IDENFR n
RPARENT )
LBRACE {
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
IDENFR n
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "%d "
COMMA ,
IDENFR arr
LBRACK [
IDENFR i
RBRACK ]
RPARENT )
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "\n"
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_stmt_1_3
LPARENT (
RPARENT )
LBRACE {
IDENFR char_a
ASSIGN =
CHRCON 'A'
SEMICN ;
SEMICN ;
INTCON 1
PLUS +
INTCON 1
SEMICN ;
LBRACE {
RBRACE }
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_stmt_if_else
LPARENT (
RPARENT )
LBRACE {
IFTK if
LPARENT (
INTCON 1
LSS <
INTCON 2
RPARENT )
LBRACE {
SEMICN ;
RBRACE }
IFTK if
LPARENT (
INTCON 1
GRE >
INTCON 2
RPARENT )
LBRACE {
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
SEMICN ;
RBRACE }
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_stmt_for_break_continue
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR i
ASSIGN =
INTCON 0
COMMA ,
IDENFR n
ASSIGN =
INTCON 1
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
IDENFR n
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
IDENFR i
LSS <
IDENFR n
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
CONTINUETK continue
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
IDENFR n
SEMICN ;
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
IDENFR i
LSS <
IDENFR n
SEMICN ;
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
SEMICN ;
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
SEMICN ;
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_stmt_return_null
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
SEMICN ;
RBRACE }
INTTK int
IDENFR test_stmt_return_exp
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
INTCON 1
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_stmt_getint_getchar_printf
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
CHARTK char
IDENFR ch
ASSIGN =
CHRCON 'a'
SEMICN ;
IDENFR a
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR ch
ASSIGN =
GETCHARTK getchar
LPARENT (
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "test_stmt_getint_getchar_printf"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%c%c%c%c%c%c%c\n"
COMMA ,
CHRCON 's'
COMMA ,
CHRCON 'u'
COMMA ,
CHRCON 'c'
COMMA ,
CHRCON 'c'
COMMA ,
CHRCON 'e'
COMMA ,
CHRCON 's'
COMMA ,
CHRCON 's'
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_block
LPARENT (
RPARENT )
LBRACE {
LBRACE {
RBRACE }
LBRACE {
RBRACE }
RETURNTK return
SEMICN ;
RBRACE }
INTTK int
IDENFR add_int
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
RPARENT )
LBRACE {
RETURNTK return
IDENFR a
PLUS +
IDENFR b
SEMICN ;
RBRACE }
CHARTK char
IDENFR read_char
LPARENT (
CHARTK char
IDENFR ch
RPARENT )
LBRACE {
SEMICN ;
RETURNTK return
IDENFR ch
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_Lval_exp
LPARENT (
RPARENT )
LBRACE {
IDENFR const_int_a
SEMICN ;
IDENFR char_a
SEMICN ;
IDENFR char_b2
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "test_Lval_exp success!\n"
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_primary_exp
LPARENT (
RPARENT )
LBRACE {
LPARENT (
INTCON 1
RPARENT )
SEMICN ;
IDENFR char_a
SEMICN ;
INTCON 1
SEMICN ;
CHRCON 'a'
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "test_primary_exp success!\n"
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_func_int
LPARENT (
INTTK int
IDENFR a
RPARENT )
LBRACE {
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_func_int_arr
LPARENT (
INTTK int
IDENFR a
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_func_mul_int
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
RPARENT )
LBRACE {
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_unary_exp
LPARENT (
RPARENT )
LBRACE {
INTCON 0
SEMICN ;
IDENFR test_func_int
LPARENT (
INTCON 0
RPARENT )
SEMICN ;
IDENFR test_func_int
LPARENT (
IDENFR int_b2
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR test_func_int_arr
LPARENT (
IDENFR int_b2
RPARENT )
SEMICN ;
IDENFR test_func_mul_int
LPARENT (
INTCON 0
COMMA ,
INTCON 1
RPARENT )
SEMICN ;
PLUS +
INTCON 1
SEMICN ;
MINU -
INTCON 1
SEMICN ;
IFTK if
LPARENT (
NOT !
INTCON 1
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "test_unary_exp success!\n"
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_mul_exp
LPARENT (
RPARENT )
LBRACE {
INTCON 1
SEMICN ;
INTCON 1
MULT *
INTCON 1
SEMICN ;
INTCON 1
DIV /
INTCON 1
SEMICN ;
INTCON 1
MOD %
INTCON 1
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "test_mul_exp success!\n"
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_add_exp
LPARENT (
RPARENT )
LBRACE {
INTCON 1
SEMICN ;
INTCON 1
PLUS +
INTCON 1
SEMICN ;
INTCON 1
MINU -
INTCON 1
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "test_add_exp_success!\n"
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_rel_exp
LPARENT (
RPARENT )
LBRACE {
INTCON 1
SEMICN ;
IFTK if
LPARENT (
INTCON 1
LSS <
INTCON 2
RPARENT )
SEMICN ;
IFTK if
LPARENT (
INTCON 1
GRE >
INTCON 2
RPARENT )
SEMICN ;
IFTK if
LPARENT (
INTCON 1
LEQ <=
INTCON 2
RPARENT )
SEMICN ;
IFTK if
LPARENT (
INTCON 1
GEQ >=
INTCON 2
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "test_rel_exp success!\n"
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_Eqexp
LPARENT (
RPARENT )
LBRACE {
INTCON 1
SEMICN ;
IFTK if
LPARENT (
INTCON 1
EQL ==
INTCON 1
RPARENT )
SEMICN ;
IFTK if
LPARENT (
INTCON 1
NEQ !=
INTCON 1
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "test_Eqexp success!\n"
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_Lexp
LPARENT (
RPARENT )
LBRACE {
INTCON 1
SEMICN ;
IFTK if
LPARENT (
INTCON 1
AND &&
INTCON 1
RPARENT )
SEMICN ;
IFTK if
LPARENT (
INTCON 1
OR ||
INTCON 1
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "test_Lexp success!\n"
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test
LPARENT (
RPARENT )
LBRACE {
IDENFR test_stmt_1_3
LPARENT (
RPARENT )
SEMICN ;
IDENFR test_stmt_for_break_continue
LPARENT (
RPARENT )
SEMICN ;
IDENFR test_stmt_getint_getchar_printf
LPARENT (
RPARENT )
SEMICN ;
IDENFR test_stmt_if_else
LPARENT (
RPARENT )
SEMICN ;
IDENFR test_stmt_return_exp
LPARENT (
RPARENT )
SEMICN ;
IDENFR test_stmt_return_null
LPARENT (
RPARENT )
SEMICN ;
IDENFR test_Eqexp
LPARENT (
RPARENT )
SEMICN ;
IDENFR test_Lval_exp
LPARENT (
RPARENT )
SEMICN ;
IDENFR test_add_exp
LPARENT (
RPARENT )
SEMICN ;
IDENFR test_mul_exp
LPARENT (
RPARENT )
SEMICN ;
IDENFR test_primary_exp
LPARENT (
RPARENT )
SEMICN ;
IDENFR test_rel_exp
LPARENT (
RPARENT )
SEMICN ;
IDENFR test_unary_exp
LPARENT (
RPARENT )
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "22371236\n"
RPARENT )
SEMICN ;
IDENFR test
LPARENT (
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }