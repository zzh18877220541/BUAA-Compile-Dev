CONSTTK const
INTTK int
IDENFR num1
ASSIGN =
LPARENT (
INTCON 1
RPARENT )
SEMICN ;
CONSTTK const
INTTK int
IDENFR num2
ASSIGN =
PLUS +
INTCON 2
COMMA ,
IDENFR num3
ASSIGN =
MINU -
INTCON 3
SEMICN ;
CONSTTK const
CHARTK char
IDENFR a
ASSIGN =
CHRCON 'a'
SEMICN ;
CONSTTK const
CHARTK char
IDENFR b
ASSIGN =
CHRCON 'b'
COMMA ,
IDENFR c
ASSIGN =
CHRCON 'c'
SEMICN ;
INTTK int
IDENFR num4
SEMICN ;
INTTK int
IDENFR num5
COMMA ,
IDENFR num6
SEMICN ;
INTTK int
IDENFR num7
ASSIGN =
INTCON 7
SEMICN ;
INTTK int
IDENFR num8
ASSIGN =
INTCON 8
COMMA ,
IDENFR num9
ASSIGN =
INTCON 9
SEMICN ;
CHARTK char
IDENFR d
SEMICN ;
CHARTK char
IDENFR e
COMMA ,
IDENFR f
SEMICN ;
CHARTK char
IDENFR g
ASSIGN =
CHRCON 'g'
SEMICN ;
CHARTK char
IDENFR h
ASSIGN =
CHRCON 'h'
COMMA ,
IDENFR i
ASSIGN =
CHRCON 'i'
SEMICN ;
VOIDTK void
IDENFR nothing
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR nothing
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR add
LPARENT (
INTTK int
IDENFR num1
COMMA ,
INTTK int
IDENFR num2
RPARENT )
LBRACE {
INTTK int
IDENFR x
ASSIGN =
IDENFR num1
PLUS +
IDENFR num2
SEMICN ;
RETURNTK return
IDENFR x
SEMICN ;
RBRACE }
INTTK int
IDENFR minus
LPARENT (
INTTK int
IDENFR num1
COMMA ,
INTTK int
IDENFR num2
RPARENT )
LBRACE {
INTTK int
IDENFR x
ASSIGN =
IDENFR num1
MINU -
IDENFR num2
SEMICN ;
RETURNTK return
IDENFR x
SEMICN ;
RBRACE }
INTTK int
IDENFR multi
LPARENT (
INTTK int
IDENFR num1
COMMA ,
INTTK int
IDENFR num2
RPARENT )
LBRACE {
INTTK int
IDENFR x
ASSIGN =
IDENFR num1
MULT *
IDENFR num2
SEMICN ;
RETURNTK return
IDENFR x
SEMICN ;
RBRACE }
INTTK int
IDENFR divide
LPARENT (
INTTK int
IDENFR num1
COMMA ,
INTTK int
IDENFR num2
RPARENT )
LBRACE {
INTTK int
IDENFR x
ASSIGN =
IDENFR num1
DIV /
IDENFR num2
SEMICN ;
RETURNTK return
IDENFR x
SEMICN ;
RBRACE }
INTTK int
IDENFR mod
LPARENT (
INTTK int
IDENFR num1
COMMA ,
INTTK int
IDENFR num2
RPARENT )
LBRACE {
INTTK int
IDENFR x
ASSIGN =
IDENFR num1
MOD %
IDENFR num2
SEMICN ;
RETURNTK return
IDENFR x
SEMICN ;
RBRACE }
VOIDTK void
IDENFR compare
LPARENT (
INTTK int
IDENFR num1
COMMA ,
INTTK int
IDENFR num2
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR num1
GEQ >=
IDENFR num2
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR num1
GRE >
IDENFR num2
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "num1 is greater than num2.\n"
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR num1
EQL ==
IDENFR num2
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "num1 is equal to num2.\n"
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
RBRACE }
IFTK if
LPARENT (
IDENFR num1
LEQ <=
IDENFR num2
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR num1
LSS <
IDENFR num2
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "num1 is less than num2.\n"
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR num1
EQL ==
IDENFR num2
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "num1 is equal to num2.\n"
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
RBRACE }
RETURNTK return
SEMICN ;
RBRACE }
CHARTK char
IDENFR printLetter
LPARENT (
CHARTK char
IDENFR ch
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "The letter is %c\n"
COMMA ,
IDENFR ch
RPARENT )
SEMICN ;
RETURNTK return
IDENFR ch
SEMICN ;
RBRACE }
VOIDTK void
IDENFR judgeFor
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR i
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
INTCON 5
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
CONTINUETK continue
SEMICN ;
INTTK int
IDENFR j
ASSIGN =
INTCON 0
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
IDENFR j
LSS <
INTCON 5
SEMICN ;
IDENFR j
ASSIGN =
IDENFR j
PLUS +
INTCON 1
RPARENT )
LBRACE {
RBRACE }
INTTK int
IDENFR k
SEMICN ;
FORTK for
LPARENT (
IDENFR k
ASSIGN =
INTCON 0
SEMICN ;
SEMICN ;
IDENFR k
ASSIGN =
IDENFR k
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR k
GEQ >=
INTCON 5
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
RBRACE }
INTTK int
IDENFR l
SEMICN ;
FORTK for
LPARENT (
IDENFR l
ASSIGN =
INTCON 0
SEMICN ;
IDENFR l
LSS <
INTCON 5
SEMICN ;
RPARENT )
LBRACE {
IDENFR l
ASSIGN =
IDENFR l
PLUS +
INTCON 1
SEMICN ;
RBRACE }
INTTK int
IDENFR m
ASSIGN =
INTCON 0
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
SEMICN ;
IDENFR m
ASSIGN =
IDENFR m
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR m
GEQ >=
INTCON 5
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
RBRACE }
INTTK int
IDENFR n
ASSIGN =
INTCON 0
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
IDENFR n
LSS <
INTCON 5
SEMICN ;
RPARENT )
LBRACE {
IDENFR n
ASSIGN =
IDENFR n
PLUS +
INTCON 1
SEMICN ;
RBRACE }
INTTK int
IDENFR o
SEMICN ;
FORTK for
LPARENT (
IDENFR o
ASSIGN =
INTCON 0
SEMICN ;
SEMICN ;
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR o
GEQ >=
INTCON 5
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
IDENFR o
ASSIGN =
IDENFR o
PLUS +
INTCON 1
SEMICN ;
RBRACE }
INTTK int
IDENFR p
ASSIGN =
INTCON 0
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
SEMICN ;
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR p
GEQ >=
INTCON 5
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
IDENFR p
ASSIGN =
IDENFR p
PLUS +
INTCON 1
SEMICN ;
RBRACE }
RBRACE }
INTTK int
IDENFR judgeEqual
LPARENT (
INTTK int
IDENFR num1
COMMA ,
INTTK int
IDENFR num2
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR num1
NEQ !=
IDENFR num2
RPARENT )
LBRACE {
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
RETURNTK return
INTCON 1
SEMICN ;
RBRACE }
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR judgeTrue
LPARENT (
INTTK int
IDENFR num
RPARENT )
LBRACE {
IFTK if
LPARENT (
NOT !
IDENFR num
RPARENT )
LBRACE {
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
RETURNTK return
INTCON 1
SEMICN ;
RBRACE }
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR x
SEMICN ;
IDENFR x
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
CHARTK char
IDENFR ch
SEMICN ;
IDENFR ch
ASSIGN =
GETCHARTK getchar
LPARENT (
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "22230605\n"
RPARENT )
SEMICN ;
IDENFR nothing
LPARENT (
RPARENT )
SEMICN ;
IDENFR add
LPARENT (
INTCON 4
COMMA ,
INTCON 2
RPARENT )
SEMICN ;
IDENFR minus
LPARENT (
INTCON 4
COMMA ,
INTCON 2
RPARENT )
SEMICN ;
IDENFR multi
LPARENT (
INTCON 4
COMMA ,
INTCON 2
RPARENT )
SEMICN ;
IDENFR divide
LPARENT (
INTCON 4
COMMA ,
INTCON 2
RPARENT )
SEMICN ;
IDENFR mod
LPARENT (
INTCON 4
COMMA ,
INTCON 2
RPARENT )
SEMICN ;
IDENFR compare
LPARENT (
INTCON 4
COMMA ,
INTCON 2
RPARENT )
SEMICN ;
IDENFR compare
LPARENT (
INTCON 2
COMMA ,
INTCON 4
RPARENT )
SEMICN ;
IDENFR compare
LPARENT (
INTCON 4
COMMA ,
INTCON 4
RPARENT )
SEMICN ;
IDENFR printLetter
LPARENT (
IDENFR ch
RPARENT )
SEMICN ;
IDENFR judgeFor
LPARENT (
RPARENT )
SEMICN ;
IDENFR judgeEqual
LPARENT (
INTCON 2
COMMA ,
INTCON 4
RPARENT )
SEMICN ;
IDENFR judgeEqual
LPARENT (
INTCON 4
COMMA ,
INTCON 4
RPARENT )
SEMICN ;
IDENFR judgeTrue
LPARENT (
INTCON 1
RPARENT )
SEMICN ;
IDENFR judgeTrue
LPARENT (
INTCON 0
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "end\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "end\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "end\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "end\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "end\n"
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }