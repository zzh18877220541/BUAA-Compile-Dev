CONSTTK const
INTTK int
IDENFR MAX_SIZE
ASSIGN =
INTCON 10
SEMICN ;
INTTK int
IDENFR global_var
SEMICN ;
CHARTK char
IDENFR str
LBRACK [
INTCON 10
RBRACK ]
ASSIGN =
LBRACE {
CHRCON '3'
COMMA ,
CHRCON '\''
RBRACE }
SEMICN ;
INTTK int
IDENFR add
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
RPARENT )
LBRACE {
RETURNTK return
IDENFR a
PLUS +
IDENFR b
SEMICN ;
RBRACE }
INTTK int
IDENFR calculate
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
INTTK int
IDENFR res
ASSIGN =
IDENFR add
LPARENT (
IDENFR a
COMMA ,
IDENFR b
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
MULT *
LPARENT (
IDENFR a
MINU -
IDENFR b
LBRACK [
INTCON 1
RBRACK ]
RPARENT )
DIV /
LPARENT (
IDENFR b
LBRACK [
INTCON 2
RBRACK ]
RPARENT )
MOD %
IDENFR a
MINU -
LPARENT (
MINU -
LPARENT (
MINU -
LPARENT (
MINU -
INTCON 3
RPARENT )
RPARENT )
RPARENT )
PLUS +
LPARENT (
PLUS +
MINU -
PLUS +
MINU -
INTCON 6
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR res
LEQ <=
INTCON 5
RPARENT )
LBRACE {
RETURNTK return
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
RBRACE }
VOIDTK void
IDENFR printName
LPARENT (
RPARENT )
LBRACE {
IDENFR global_var
ASSIGN =
IDENFR global_var
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR global_var
NEQ !=
INTCON 0
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "22373040\n"
RPARENT )
SEMICN ;
RBRACE }
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR print
LPARENT (
CHARTK char
IDENFR ch
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "%c\n"
COMMA ,
IDENFR ch
RPARENT )
SEMICN ;
RBRACE }
CHARTK char
IDENFR get_first
LPARENT (
CHARTK char
IDENFR str
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
RETURNTK return
IDENFR str
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
IDENFR printName
LPARENT (
RPARENT )
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
INTCON 0
COMMA ,
IDENFR ii
ASSIGN =
INTCON 8
SEMICN ;
CHARTK char
IDENFR c
SEMICN ;
IDENFR i
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR c
ASSIGN =
GETCHARTK getchar
LPARENT (
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "Input integer: %d\n"
COMMA ,
IDENFR i
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "Input character: %c\n"
COMMA ,
IDENFR c
RPARENT )
SEMICN ;
CONSTTK const
INTTK int
IDENFR local_const
ASSIGN =
INTCON 5
SEMICN ;
INTTK int
IDENFR arr
LBRACK [
INTCON 10
RBRACK ]
SEMICN ;
CHARTK char
IDENFR str
LBRACK [
INTCON 12
RBRACK ]
ASSIGN =
STRCON "qwertyuiop\n"
SEMICN ;
CONSTTK const
CHARTK char
IDENFR _str
LBRACK [
INTCON 10
RBRACK ]
ASSIGN =
STRCON "str"
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
IDENFR MAX_SIZE
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IDENFR arr
LBRACK [
IDENFR i
RBRACK ]
ASSIGN =
IDENFR i
SEMICN ;
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 4
AND &&
IDENFR i
LSS <
IDENFR c
OR ||
IDENFR i
GEQ >=
INTCON 9
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "i is 4 or 9!\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR j
SEMICN ;
FORTK for
LPARENT (
IDENFR j
ASSIGN =
INTCON 1
SEMICN ;
SEMICN ;
IDENFR j
ASSIGN =
IDENFR j
PLUS +
IDENFR j
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR j
GRE >
INTCON 100
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
ELSETK else
IFTK if
LPARENT (
IDENFR j
NEQ !=
INTCON 32
RPARENT )
LBRACE {
CONTINUETK continue
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "j is 32!\n"
RPARENT )
SEMICN ;
RBRACE }
RBRACE }
IFTK if
LPARENT (
IDENFR i
MOD %
INTCON 2
EQL ==
INTCON 0
RPARENT )
LBRACE {
FORTK for
LPARENT (
SEMICN ;
SEMICN ;
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
RBRACE }
ELSETK else
LBRACE {
RBRACE }
RBRACE }
LBRACE {
CONSTTK const
INTTK int
IDENFR arr
LBRACK [
INTCON 20
RBRACK ]
ASSIGN =
LBRACE {
INTCON 3
COMMA ,
INTCON 2
COMMA ,
INTCON 1
RBRACE }
SEMICN ;
INTTK int
IDENFR sum
ASSIGN =
INTCON 0
COMMA ,
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
LBRACE {
FORTK for
LPARENT (
SEMICN ;
IDENFR i
LSS <
IDENFR MAX_SIZE
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
LSS <
INTCON 3
RPARENT )
LBRACE {
IDENFR sum
ASSIGN =
IDENFR sum
PLUS +
IDENFR arr
LBRACK [
IDENFR i
RBRACK ]
SEMICN ;
RBRACE }
RBRACE }
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "Sum of array elements: %d\n"
COMMA ,
IDENFR sum
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
NOT !
IDENFR calculate
LPARENT (
IDENFR i
COMMA ,
IDENFR arr
RPARENT )
RPARENT )
LBRACE {
IDENFR print
LPARENT (
IDENFR get_first
LPARENT (
IDENFR str
RPARENT )
RPARENT )
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "Test finished!\n"
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }