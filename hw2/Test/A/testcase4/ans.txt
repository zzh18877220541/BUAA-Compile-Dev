CONSTTK const
INTTK int
IDENFR const_var1
ASSIGN =
INTCON 17
COMMA ,
IDENFR const_var2
ASSIGN =
LPARENT (
INTCON 7
PLUS +
INTCON 17
RPARENT )
DIV /
INTCON 8
SEMICN ;
CONSTTK const
INTTK int
IDENFR arr
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
RBRACE }
SEMICN ;
CONSTTK const
CHARTK char
IDENFR const_var3
ASSIGN =
CHRCON 'c'
SEMICN ;
CONSTTK const
CHARTK char
IDENFR s
LBRACK [
INTCON 5
RBRACK ]
ASSIGN =
STRCON "abcd"
SEMICN ;
CHARTK char
IDENFR str
LBRACK [
INTCON 5
RBRACK ]
ASSIGN =
STRCON "abcd"
SEMICN ;
CONSTTK const
INTTK int
IDENFR cot_var1
ASSIGN =
IDENFR const_var1
PLUS +
IDENFR const_var2
SEMICN ;
INTTK int
IDENFR var1
ASSIGN =
INTCON 5
SEMICN ;
INTTK int
IDENFR var2
ASSIGN =
INTCON 2
COMMA ,
IDENFR var3
ASSIGN =
INTCON 10
SEMICN ;
CHARTK char
IDENFR var4
ASSIGN =
INTCON 6
PLUS +
INTCON 1
COMMA ,
IDENFR var5
ASSIGN =
INTCON 8
SEMICN ;
INTTK int
IDENFR f3
LPARENT (
INTTK int
IDENFR arr1
LBRACK [
RBRACK ]
COMMA ,
INTTK int
IDENFR arr2
LBRACK [
RBRACK ]
COMMA ,
INTTK int
IDENFR para1
COMMA ,
INTTK int
IDENFR para2
RPARENT )
LBRACE {
INTTK int
IDENFR i
SEMICN ;
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
INTCON 1
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
IDENFR i
EQL ==
INTCON 0
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IDENFR para1
ASSIGN =
IDENFR para1
PLUS +
IDENFR para2
SEMICN ;
RBRACE }
RETURNTK return
IDENFR arr1
LBRACK [
IDENFR i
RBRACK ]
MULT *
LPARENT (
IDENFR arr2
LBRACK [
IDENFR i
RBRACK ]
PLUS +
IDENFR para1
RPARENT )
MINU -
IDENFR para2
SEMICN ;
RBRACE }
INTTK int
IDENFR f4
LPARENT (
INTTK int
IDENFR para1
COMMA ,
INTTK int
IDENFR para2
RPARENT )
LBRACE {
RETURNTK return
IDENFR para1
PLUS +
IDENFR para2
SEMICN ;
RBRACE }
CHARTK char
IDENFR f5
LPARENT (
CHARTK char
IDENFR para1
COMMA ,
CHARTK char
IDENFR para2
RPARENT )
LBRACE {
RETURNTK return
IDENFR para1
PLUS +
IDENFR para2
SEMICN ;
RBRACE }
INTTK int
IDENFR f7
LPARENT (
INTTK int
IDENFR para
RPARENT )
LBRACE {
RETURNTK return
IDENFR para
SEMICN ;
RBRACE }
CHARTK char
IDENFR f8
LPARENT (
CHARTK char
IDENFR para
RPARENT )
LBRACE {
RETURNTK return
IDENFR para
SEMICN ;
RBRACE }
INTTK int
IDENFR f6
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
VOIDTK void
IDENFR f2
LPARENT (
INTTK int
IDENFR para
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR para
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR f9
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "22371491\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR a
ASSIGN =
INTCON 0
SEMICN ;
IDENFR f9
LPARENT (
RPARENT )
SEMICN ;
INTTK int
IDENFR ff
ASSIGN =
INTCON 1
SEMICN ;
INTTK int
IDENFR arr
LBRACK [
INTCON 3
RBRACK ]
SEMICN ;
INTTK int
IDENFR arr1
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
RBRACE }
SEMICN ;
INTTK int
IDENFR arr2
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
INTCON 4
COMMA ,
INTCON 5
COMMA ,
INTCON 6
RBRACE }
SEMICN ;
INTTK int
IDENFR o
ASSIGN =
IDENFR f3
LPARENT (
IDENFR arr1
COMMA ,
IDENFR arr2
COMMA ,
IDENFR a
COMMA ,
IDENFR ff
RPARENT )
SEMICN ;
CONSTTK const
INTTK int
IDENFR b
ASSIGN =
INTCON 1
SEMICN ;
CHARTK char
IDENFR e
ASSIGN =
CHRCON 'c'
SEMICN ;
IDENFR e
ASSIGN =
IDENFR f8
LPARENT (
CHRCON 'c'
RPARENT )
SEMICN ;
IDENFR a
ASSIGN =
LPARENT (
IDENFR a
PLUS +
IDENFR b
RPARENT )
PLUS +
IDENFR b
PLUS +
INTCON 10
SEMICN ;
IDENFR a
ASSIGN =
MINU -
IDENFR a
SEMICN ;
MINU -
IDENFR a
SEMICN ;
IDENFR a
SEMICN ;
IDENFR a
ASSIGN =
IDENFR a
DIV /
INTCON 2
SEMICN ;
IDENFR a
ASSIGN =
IDENFR a
MOD %
INTCON 2
SEMICN ;
IFTK if
LPARENT (
NOT !
IDENFR a
RPARENT )
LBRACE {
RBRACE }
IDENFR e
ASSIGN =
IDENFR f5
LPARENT (
CHRCON 'g'
COMMA ,
CHRCON 'f'
RPARENT )
SEMICN ;
INTTK int
IDENFR h
ASSIGN =
IDENFR a
PLUS +
INTCON 1
SEMICN ;
IDENFR h
ASSIGN =
IDENFR a
SEMICN ;
IDENFR e
ASSIGN =
GETCHARTK getchar
LPARENT (
RPARENT )
SEMICN ;
INTTK int
IDENFR d
ASSIGN =
INTCON 4
COMMA ,
IDENFR c
ASSIGN =
INTCON 1
SEMICN ;
INTTK int
IDENFR i
SEMICN ;
IDENFR i
ASSIGN =
IDENFR f7
LPARENT (
INTCON 0
RPARENT )
SEMICN ;
IDENFR c
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR c
ASSIGN =
IDENFR f4
LPARENT (
IDENFR a
COMMA ,
IDENFR d
RPARENT )
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
IDENFR d
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IDENFR c
ASSIGN =
IDENFR a
MULT *
MINU -
INTCON 1
PLUS +
LPARENT (
IDENFR d
DIV /
LPARENT (
IDENFR i
PLUS +
INTCON 1
RPARENT )
RPARENT )
MOD %
INTCON 2
PLUS +
LPARENT (
IDENFR b
DIV /
MINU -
PLUS +
MINU -
INTCON 3
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR c
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR c
GRE >
INTCON 0
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "pass\n"
RPARENT )
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "failed\n"
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR i
GEQ >=
INTCON 0
RPARENT )
LBRACE {
CONTINUETK continue
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
RBRACE }
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
IDENFR i
LSS <
IDENFR d
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
IDENFR d
SEMICN ;
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
IDENFR i
LSS <
IDENFR d
SEMICN ;
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
SEMICN ;
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
SEMICN ;
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
IFTK if
LPARENT (
NOT !
INTCON 0
RPARENT )
LBRACE {
RBRACE }
ELSETK else
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR d
GEQ >=
IDENFR a
RPARENT )
LBRACE {
RBRACE }
SEMICN ;
IFTK if
LPARENT (
IDENFR d
LEQ <=
IDENFR a
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR d
EQL ==
IDENFR a
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR d
GRE >
IDENFR a
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR d
LSS <
IDENFR a
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR d
NEQ !=
IDENFR a
RPARENT )
SEMICN ;
LBRACE {
RBRACE }
SEMICN ;
INTCON 123
SEMICN ;
CHRCON 'c'
SEMICN ;
IDENFR f6
LPARENT (
RPARENT )
SEMICN ;
IFTK if
LPARENT (
NOT !
INTCON 0
RPARENT )
LBRACE {
IDENFR f2
LPARENT (
INTCON 1
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
INTCON 0
AND &&
IDENFR d
NEQ !=
IDENFR a
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
INTCON 1
OR ||
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
NOT !
IDENFR d
EQL ==
IDENFR a
OR ||
IDENFR a
GRE >
INTCON 0
AND &&
INTCON 1
EQL ==
INTCON 1
AND &&
LPARENT (
IDENFR d
PLUS +
INTCON 1
RPARENT )
MOD %
INTCON 2
DIV /
INTCON 2
RPARENT )
LBRACE {
RBRACE }
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }