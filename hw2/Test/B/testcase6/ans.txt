CONSTTK const
INTTK int
IDENFR constA
ASSIGN =
INTCON 1
SEMICN ;
CONSTTK const
INTTK int
IDENFR constB
ASSIGN =
INTCON 2
COMMA ,
IDENFR constC
ASSIGN =
INTCON 1
PLUS +
INTCON 2
SEMICN ;
CONSTTK const
INTTK int
IDENFR constD
LBRACK [
INTCON 5
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
COMMA ,
INTCON 4
COMMA ,
INTCON 5
RBRACE }
SEMICN ;
CHARTK char
IDENFR a1
ASSIGN =
CHRCON 'a'
SEMICN ;
CHARTK char
IDENFR a2
ASSIGN =
CHRCON 'b'
COMMA ,
IDENFR a3
ASSIGN =
CHRCON 'c'
SEMICN ;
CHARTK char
IDENFR a4
LBRACK [
INTCON 6
RBRACK ]
ASSIGN =
STRCON "abcde"
SEMICN ;
VOIDTK void
IDENFR funcA
LPARENT (
RPARENT )
LBRACE {
RBRACE }
INTTK int
IDENFR funcB
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR tmp
ASSIGN =
INTCON 0
COMMA ,
IDENFR a
ASSIGN =
INTCON 0
SEMICN ;
FORTK for
LPARENT (
IDENFR a
ASSIGN =
INTCON 0
SEMICN ;
IDENFR a
LSS <
INTCON 5
SEMICN ;
IDENFR a
ASSIGN =
IDENFR a
PLUS +
INTCON 1
RPARENT )
IDENFR tmp
ASSIGN =
IDENFR tmp
PLUS +
IDENFR a
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR tmp
RPARENT )
SEMICN ;
IDENFR a
ASSIGN =
INTCON 0
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
IDENFR a
LSS <
INTCON 5
SEMICN ;
IDENFR a
ASSIGN =
IDENFR a
PLUS +
INTCON 1
RPARENT )
IDENFR tmp
ASSIGN =
IDENFR tmp
PLUS +
IDENFR a
SEMICN ;
FORTK for
LPARENT (
IDENFR a
ASSIGN =
INTCON 0
SEMICN ;
SEMICN ;
IDENFR a
ASSIGN =
IDENFR a
PLUS +
INTCON 1
RPARENT )
LBRACE {
IDENFR tmp
ASSIGN =
IDENFR tmp
PLUS +
IDENFR a
SEMICN ;
IFTK if
LPARENT (
IDENFR tmp
GRE >
INTCON 25
RPARENT )
BREAKTK break
SEMICN ;
ELSETK else
CONTINUETK continue
SEMICN ;
RBRACE }
FORTK for
LPARENT (
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
IDENFR a
LSS <
INTCON 5
SEMICN ;
RPARENT )
LBRACE {
IDENFR tmp
ASSIGN =
IDENFR tmp
PLUS +
IDENFR a
SEMICN ;
IFTK if
LPARENT (
IDENFR tmp
GRE >
INTCON 30
RPARENT )
BREAKTK break
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR tmp
RPARENT )
SEMICN ;
IDENFR a
ASSIGN =
INTCON 0
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
SEMICN ;
IDENFR a
ASSIGN =
IDENFR a
PLUS +
INTCON 1
RPARENT )
LBRACE {
IDENFR tmp
ASSIGN =
IDENFR tmp
PLUS +
IDENFR a
SEMICN ;
IFTK if
LPARENT (
IDENFR tmp
GRE >
INTCON 35
RPARENT )
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
IDENFR a
LSS <
INTCON 5
SEMICN ;
RPARENT )
LBRACE {
IDENFR tmp
ASSIGN =
IDENFR tmp
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR tmp
GRE >
INTCON 40
RPARENT )
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
SEMICN ;
RPARENT )
LBRACE {
IDENFR tmp
ASSIGN =
IDENFR tmp
PLUS +
IDENFR a
SEMICN ;
IFTK if
LPARENT (
IDENFR tmp
GRE >
INTCON 45
RPARENT )
BREAKTK break
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR tmp
RPARENT )
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
SEMICN ;
RPARENT )
LBRACE {
IDENFR tmp
ASSIGN =
IDENFR tmp
PLUS +
INTCON 2
SEMICN ;
IFTK if
LPARENT (
IDENFR tmp
GRE >
INTCON 50
RPARENT )
BREAKTK break
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR tmp
RPARENT )
SEMICN ;
RETURNTK return
IDENFR tmp
SEMICN ;
RBRACE }
CHARTK char
IDENFR funcC
LPARENT (
RPARENT )
LBRACE {
CHARTK char
IDENFR a
ASSIGN =
CHRCON '\0'
SEMICN ;
SEMICN ;
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR constB
GEQ >=
IDENFR constA
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR constC
GEQ >=
IDENFR constB
PLUS +
INTCON 1
RPARENT )
IDENFR a
ASSIGN =
IDENFR a1
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR a
ASSIGN =
IDENFR a2
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR constC
NEQ !=
INTCON 3
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR constB
LSS <
INTCON 3
RPARENT )
IDENFR a
ASSIGN =
IDENFR a3
SEMICN ;
RBRACE }
RETURNTK return
IDENFR a
SEMICN ;
RBRACE }
VOIDTK void
IDENFR funcD
LPARENT (
CHARTK char
IDENFR s
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "%c\n"
COMMA ,
IDENFR s
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR funcE
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR a
EQL ==
IDENFR b
RPARENT )
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR a
PLUS +
IDENFR b
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
RPARENT )
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR a
MULT *
IDENFR b
RPARENT )
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "22372468\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR a
ASSIGN =
INTCON 0
SEMICN ;
CHARTK char
IDENFR b
ASSIGN =
CHRCON '\0'
SEMICN ;
IDENFR a
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR b
ASSIGN =
GETCHARTK getchar
LPARENT (
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d %c\n"
COMMA ,
IDENFR a
COMMA ,
IDENFR b
RPARENT )
SEMICN ;
IDENFR funcA
LPARENT (
RPARENT )
SEMICN ;
INTTK int
IDENFR c
ASSIGN =
LPARENT (
IDENFR a
MULT *
INTCON 10
PLUS +
IDENFR funcB
LPARENT (
RPARENT )
DIV /
INTCON 2
MINU -
INTCON 1
RPARENT )
MOD %
INTCON 7
SEMICN ;
CHARTK char
IDENFR d
ASSIGN =
IDENFR funcC
LPARENT (
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d %c\n"
COMMA ,
IDENFR c
COMMA ,
IDENFR d
RPARENT )
SEMICN ;
IDENFR a4
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
CHRCON 'z'
SEMICN ;
IDENFR funcD
LPARENT (
IDENFR a4
RPARENT )
SEMICN ;
IDENFR funcE
LPARENT (
IDENFR constA
COMMA ,
IDENFR constB
RPARENT )
SEMICN ;
IDENFR funcE
LPARENT (
IDENFR constA
COMMA ,
IDENFR constB
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }