INTTK int
IDENFR ig1
SEMICN ;
INTTK int
IDENFR fuc1
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
INTCON 1
SEMICN ;
RBRACE }
CHARTK char
IDENFR fuc2
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
CHRCON 'a'
SEMICN ;
RBRACE }
VOIDTK void
IDENFR fuc3
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
SEMICN ;
RBRACE }
INTTK int
IDENFR fuc4
LPARENT (
INTTK int
IDENFR a
RPARENT )
LBRACE {
RETURNTK return
INTCON 1
SEMICN ;
RBRACE }
INTTK int
IDENFR fuc5
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
RPARENT )
LBRACE {
RETURNTK return
INTCON 1
SEMICN ;
RBRACE }
INTTK int
IDENFR fuc6
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
RETURNTK return
INTCON 1
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
CONSTTK const
INTTK int
IDENFR i1
ASSIGN =
INTCON 1
SEMICN ;
CONSTTK const
INTTK int
IDENFR i2
ASSIGN =
INTCON 1
COMMA ,
IDENFR i3
ASSIGN =
INTCON 1
SEMICN ;
CONSTTK const
INTTK int
IDENFR ia1
LBRACK [
INTCON 5
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
COMMA ,
INTCON 4
COMMA ,
INTCON 5
RBRACE }
SEMICN ;
CONSTTK const
INTTK int
IDENFR ia2
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
RBRACE }
COMMA ,
IDENFR i4
ASSIGN =
INTCON 2
SEMICN ;
CONSTTK const
CHARTK char
IDENFR c1
ASSIGN =
CHRCON 'a'
SEMICN ;
CONSTTK const
CHARTK char
IDENFR c2
ASSIGN =
CHRCON 'a'
COMMA ,
IDENFR c3
ASSIGN =
CHRCON 'b'
SEMICN ;
CONSTTK const
CHARTK char
IDENFR ca2
LBRACK [
INTCON 5
RBRACK ]
ASSIGN =
STRCON "abcd"
SEMICN ;
CONSTTK const
CHARTK char
IDENFR ca3
LBRACK [
INTCON 5
RBRACK ]
ASSIGN =
STRCON "abcd"
COMMA ,
IDENFR c4
ASSIGN =
CHRCON 'a'
SEMICN ;
INTTK int
IDENFR i5
SEMICN ;
INTTK int
IDENFR i6
COMMA ,
IDENFR i7
SEMICN ;
INTTK int
IDENFR ia3
LBRACK [
INTCON 5
RBRACK ]
SEMICN ;
INTTK int
IDENFR i8
ASSIGN =
INTCON 1
SEMICN ;
INTTK int
IDENFR ia4
LBRACK [
INTCON 5
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
COMMA ,
INTCON 4
COMMA ,
INTCON 5
RBRACE }
SEMICN ;
CHARTK char
IDENFR c5
SEMICN ;
CHARTK char
IDENFR c6
ASSIGN =
CHRCON 'a'
SEMICN ;
CHARTK char
IDENFR c7
COMMA ,
IDENFR c8
ASSIGN =
CHRCON 'a'
SEMICN ;
CHARTK char
IDENFR ca4
LBRACK [
INTCON 5
RBRACK ]
SEMICN ;
CHARTK char
IDENFR ca5
LBRACK [
INTCON 5
RBRACK ]
ASSIGN =
STRCON "abcd"
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "22371144\n"
RPARENT )
SEMICN ;
LBRACE {
RBRACE }
INTTK int
IDENFR testio1
ASSIGN =
INTCON 0
SEMICN ;
CHARTK char
IDENFR testio2
ASSIGN =
INTCON 0
SEMICN ;
IDENFR testio1
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR testio2
ASSIGN =
GETCHARTK getchar
LPARENT (
RPARENT )
SEMICN ;
INTTK int
IDENFR tmp1
ASSIGN =
INTCON 1
PLUS +
INTCON 2
PLUS +
INTCON 3
SEMICN ;
INTTK int
IDENFR tmp2
ASSIGN =
INTCON 1
MULT *
INTCON 2
PLUS +
INTCON 2
MULT *
INTCON 1
SEMICN ;
INTTK int
IDENFR tmp3
ASSIGN =
INTCON 1
PLUS +
INTCON 1
MULT *
INTCON 2
PLUS +
INTCON 1
SEMICN ;
INTTK int
IDENFR tmp4
ASSIGN =
INTCON 3
MULT *
LPARENT (
INTCON 1
PLUS +
INTCON 2
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d %d %d %d\n"
COMMA ,
IDENFR tmp1
COMMA ,
IDENFR tmp2
COMMA ,
IDENFR tmp3
COMMA ,
IDENFR tmp4
RPARENT )
SEMICN ;
INTTK int
IDENFR t1
ASSIGN =
INTCON 1
COMMA ,
IDENFR t2
ASSIGN =
INTCON 1
COMMA ,
IDENFR t3
ASSIGN =
INTCON 1
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR t1
PLUS +
IDENFR t2
MINU -
IDENFR t3
SEMICN ;
IDENFR tmp2
ASSIGN =
IDENFR t1
MULT *
IDENFR t2
PLUS +
IDENFR t3
SEMICN ;
IDENFR tmp3
ASSIGN =
IDENFR t3
PLUS +
IDENFR t1
MULT *
IDENFR t2
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d %d %d %d\n"
COMMA ,
IDENFR tmp1
COMMA ,
IDENFR tmp2
COMMA ,
IDENFR tmp3
COMMA ,
IDENFR tmp4
RPARENT )
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR t1
MOD %
INTCON 4
PLUS +
INTCON 1
SEMICN ;
IDENFR tmp2
ASSIGN =
IDENFR t1
DIV /
INTCON 1
PLUS +
INTCON 0
SEMICN ;
IDENFR tmp3
ASSIGN =
IDENFR t1
MULT *
IDENFR t2
DIV /
IDENFR t3
SEMICN ;
IDENFR tmp4
ASSIGN =
IDENFR t1
MULT *
LPARENT (
IDENFR t2
PLUS +
IDENFR t3
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d %d %d %d\n"
COMMA ,
IDENFR tmp1
COMMA ,
IDENFR tmp2
COMMA ,
IDENFR tmp3
COMMA ,
IDENFR tmp4
RPARENT )
SEMICN ;
IDENFR tmp1
ASSIGN =
PLUS +
IDENFR tmp1
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR fuc4
LPARENT (
IDENFR tmp2
RPARENT )
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR fuc5
LPARENT (
IDENFR tmp1
COMMA ,
IDENFR tmp2
RPARENT )
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR fuc1
LPARENT (
RPARENT )
SEMICN ;
IDENFR tmp1
ASSIGN =
MINU -
IDENFR tmp1
SEMICN ;
IDENFR tmp1
ASSIGN =
MINU -
IDENFR tmp1
SEMICN ;
IDENFR ia4
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR t1
EQL ==
INTCON 1
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR t2
EQL ==
INTCON 0
RPARENT )
LBRACE {
RBRACE }
ELSETK else
LBRACE {
RBRACE }
FORTK for
LPARENT (
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
IDENFR tmp1
LSS <
INTCON 10
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR tmp1
PLUS +
INTCON 1
RPARENT )
LBRACE {
RBRACE }
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
IDENFR tmp1
LSS <
INTCON 10
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR tmp1
PLUS +
INTCON 1
RPARENT )
LBRACE {
RBRACE }
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
FORTK for
LPARENT (
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR tmp1
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR tmp1
EQL ==
INTCON 10
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
RBRACE }
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
IDENFR tmp1
LSS <
INTCON 10
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR tmp1
PLUS +
INTCON 1
RPARENT )
LBRACE {
RBRACE }
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
IDENFR tmp1
LSS <
INTCON 10
SEMICN ;
RPARENT )
LBRACE {
IDENFR tmp1
ASSIGN =
IDENFR tmp1
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
FORTK for
LPARENT (
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
SEMICN ;
RPARENT )
LBRACE {
IDENFR tmp1
ASSIGN =
IDENFR tmp1
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR tmp1
EQL ==
INTCON 10
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
CONTINUETK continue
SEMICN ;
RBRACE }
RBRACE }
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR tmp1
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR tmp1
EQL ==
INTCON 10
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
RBRACE }
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
SEMICN ;
RPARENT )
LBRACE {
IDENFR tmp1
ASSIGN =
IDENFR tmp1
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR tmp1
EQL ==
INTCON 10
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
RBRACE }
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
FORTK for
LPARENT (
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
IDENFR tmp1
LSS <
INTCON 10
SEMICN ;
RPARENT )
LBRACE {
IDENFR tmp1
ASSIGN =
IDENFR tmp1
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IDENFR tmp1
PLUS +
IDENFR tmp2
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }