CONSTTK const
INTTK int
IDENFR MAXINT
ASSIGN =
INTCON 2147483647
SEMICN ;
INTTK int
IDENFR MININT
ASSIGN =
MINU -
INTCON 2147483648
SEMICN ;
CONSTTK const
CHARTK char
IDENFR MAXCHAR
ASSIGN =
CHRCON '~'
SEMICN ;
CHARTK char
IDENFR MINCHAR
ASSIGN =
CHRCON ' '
SEMICN ;
CONSTTK const
INTTK int
IDENFR ZERO
ASSIGN =
INTCON 0
COMMA ,
IDENFR ONE
ASSIGN =
INTCON 1
COMMA ,
IDENFR TWO
ASSIGN =
INTCON 2
COMMA ,
IDENFR THREE
ASSIGN =
INTCON 3
COMMA ,
IDENFR FOUR
ASSIGN =
INTCON 4
SEMICN ;
CONSTTK const
INTTK int
IDENFR FIVE
ASSIGN =
INTCON 5
SEMICN ;
CONSTTK const
INTTK int
IDENFR SIX
ASSIGN =
INTCON 6
COMMA ,
IDENFR SEVEN
ASSIGN =
INTCON 7
COMMA ,
IDENFR EIGHT
ASSIGN =
INTCON 8
COMMA ,
IDENFR NINE
ASSIGN =
INTCON 8
PLUS +
INTCON 1
COMMA ,
IDENFR TEN
ASSIGN =
INTCON 10
SEMICN ;
CONSTTK const
INTTK int
IDENFR ZERO_TO_TEN
LBRACK [
INTCON 11
RBRACK ]
ASSIGN =
LBRACE {
INTCON 0
COMMA ,
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
COMMA ,
INTCON 4
COMMA ,
INTCON 5
COMMA ,
INTCON 6
COMMA ,
INTCON 7
COMMA ,
INTCON 8
COMMA ,
INTCON 9
COMMA ,
INTCON 10
RBRACE }
SEMICN ;
CONSTTK const
INTTK int
IDENFR NO_USE1
LBRACK [
INTCON 11
RBRACK ]
ASSIGN =
LBRACE {
RBRACE }
SEMICN ;
CONSTTK const
INTTK int
IDENFR NO_USE2
LBRACK [
INTCON 11
RBRACK ]
ASSIGN =
LBRACE {
INTCON 0
COMMA ,
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
RBRACE }
SEMICN ;
CONSTTK const
CHARTK char
IDENFR A
ASSIGN =
CHRCON 'A'
COMMA ,
IDENFR B
ASSIGN =
CHRCON 'B'
COMMA ,
IDENFR C
ASSIGN =
CHRCON 'C'
COMMA ,
IDENFR D
ASSIGN =
CHRCON 'D'
COMMA ,
IDENFR E
ASSIGN =
CHRCON 'E'
SEMICN ;
CONSTTK const
CHARTK char
IDENFR F
ASSIGN =
CHRCON 'F'
SEMICN ;
CONSTTK const
CHARTK char
IDENFR G
ASSIGN =
CHRCON 'G'
COMMA ,
IDENFR H
ASSIGN =
CHRCON 'H'
COMMA ,
IDENFR I
ASSIGN =
CHRCON 'I'
COMMA ,
IDENFR J
ASSIGN =
CHRCON 'J'
SEMICN ;
CONSTTK const
CHARTK char
IDENFR ABCDEFGHIJ
LBRACK [
INTCON 11
RBRACK ]
ASSIGN =
LBRACE {
CHRCON 'A'
COMMA ,
CHRCON 'B'
COMMA ,
CHRCON 'C'
COMMA ,
CHRCON 'D'
COMMA ,
CHRCON 'E'
COMMA ,
CHRCON 'F'
COMMA ,
CHRCON 'G'
COMMA ,
CHRCON 'H'
COMMA ,
CHRCON 'I'
COMMA ,
CHRCON 'J'
RBRACE }
SEMICN ;
CONSTTK const
CHARTK char
IDENFR NO_USE3
LBRACK [
INTCON 11
RBRACK ]
ASSIGN =
LBRACE {
RBRACE }
SEMICN ;
CONSTTK const
CHARTK char
IDENFR NO_USE4
LBRACK [
INTCON 11
RBRACK ]
ASSIGN =
STRCON "NO_USE4"
SEMICN ;
INTTK int
IDENFR fibonacci
LBRACK [
INTCON 15
RBRACK ]
SEMICN ;
VOIDTK void
IDENFR cal_fibonacci
LPARENT (
RPARENT )
LBRACE {
IDENFR fibonacci
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
INTCON 1
SEMICN ;
INTTK int
IDENFR i
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 2
SEMICN ;
IDENFR i
LSS <
INTCON 15
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IDENFR fibonacci
LBRACK [
IDENFR i
RBRACK ]
ASSIGN =
IDENFR fibonacci
LBRACK [
IDENFR i
MINU -
INTCON 1
RBRACK ]
PLUS +
IDENFR fibonacci
LBRACK [
IDENFR i
MINU -
INTCON 2
RBRACK ]
SEMICN ;
RBRACE }
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR print_fibonacci_n
LPARENT (
INTTK int
IDENFR n1
COMMA ,
INTTK int
IDENFR n2
COMMA ,
INTTK int
IDENFR n3
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "Fibonacci Array %d : %d  %d : %d  %d : %d\n"
COMMA ,
IDENFR n1
COMMA ,
IDENFR fibonacci
LBRACK [
IDENFR n1
RBRACK ]
COMMA ,
IDENFR n2
COMMA ,
IDENFR fibonacci
LBRACK [
IDENFR n2
RBRACK ]
COMMA ,
IDENFR n3
COMMA ,
IDENFR fibonacci
LBRACK [
IDENFR n3
RBRACK ]
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
LBRACE {
RBRACE }
LBRACE {
SEMICN ;
SEMICN ;
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "22371298\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR n1
SEMICN ;
IDENFR n1
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
INTTK int
IDENFR n2
SEMICN ;
IDENFR n2
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
INTTK int
IDENFR n3
SEMICN ;
IDENFR n3
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR cal_fibonacci
LPARENT (
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR n1
GRE >
INTCON 14
OR ||
IDENFR n2
GRE >
INTCON 14
OR ||
IDENFR n3
GRE >
INTCON 14
RPARENT )
LBRACE {
RBRACE }
ELSETK else
LBRACE {
IDENFR print_fibonacci_n
LPARENT (
IDENFR n1
COMMA ,
IDENFR n2
COMMA ,
IDENFR n3
RPARENT )
SEMICN ;
RBRACE }
INTTK int
IDENFR max
SEMICN ;
IDENFR max
ASSIGN =
IDENFR MAXINT
SEMICN ;
INTTK int
IDENFR ten
SEMICN ;
IDENFR ten
ASSIGN =
IDENFR ZERO_TO_TEN
LBRACK [
IDENFR TEN
RBRACK ]
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
IDENFR i
LSS <
INTCON 2
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR i
RPARENT )
SEMICN ;
RBRACE }
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 2
SEMICN ;
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 5
OR ||
IDENFR i
LEQ <=
INTCON 6
OR ||
IDENFR i
GEQ >=
INTCON 90
OR ||
IDENFR i
EQL ==
INTCON 100
OR ||
IDENFR i
NEQ !=
INTCON 80
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
RBRACE }
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 2
SEMICN ;
IDENFR i
LEQ <=
INTCON 5
SEMICN ;
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
NEQ !=
INTCON 90
RPARENT )
BREAKTK break
SEMICN ;
RBRACE }
IDENFR i
ASSIGN =
INTCON 100
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
GRE >
INTCON 10
RPARENT )
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
IDENFR i
GRE >
INTCON 50
SEMICN ;
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
GRE >
INTCON 80
AND &&
IDENFR i
LSS <
INTCON 120
OR ||
IDENFR i
EQL ==
INTCON 100
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
CONTINUETK continue
SEMICN ;
RBRACE }
RBRACE }
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 100
SEMICN ;
SEMICN ;
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 100
RPARENT )
BREAKTK break
SEMICN ;
ELSETK else
CONTINUETK continue
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
SEMICN ;
RPARENT )
LBRACE {
IFTK if
LPARENT (
INTCON 1
NEQ !=
INTCON 0
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
RBRACE }
CHARTK char
IDENFR read
SEMICN ;
IDENFR read
ASSIGN =
GETCHARTK getchar
LPARENT (
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "a\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "a\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "a\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "a\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "a\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "a\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "a\n"
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }