INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "21371295\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
INTCON 0
PLUS +
INTCON 1
SEMICN ;
SEMICN ;
IFTK if
LPARENT (
IDENFR i
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR a
ASSIGN =
INTCON 1
COMMA ,
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
NOT !
IDENFR a
RPARENT )
LBRACE {
RBRACE }
ELSETK else
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR b
LEQ <=
INTCON 0
RPARENT )
LBRACE {
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
EQL ==
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
AND &&
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
OR ||
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IDENFR a
ASSIGN =
IDENFR a
PLUS +
INTCON 1
MINU -
INTCON 3
MULT *
INTCON 4
DIV /
INTCON 3
MOD %
INTCON 2
SEMICN ;
IDENFR a
ASSIGN =
INTCON 1
PLUS +
INTCON 1
SEMICN ;
IDENFR a
ASSIGN =
PLUS +
MINU -
PLUS +
INTCON 1
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "21371295\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
INTCON 0
PLUS +
INTCON 1
SEMICN ;
SEMICN ;
IFTK if
LPARENT (
IDENFR i
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR a
ASSIGN =
INTCON 1
COMMA ,
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
NOT !
IDENFR a
RPARENT )
LBRACE {
RBRACE }
ELSETK else
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR b
LEQ <=
INTCON 0
RPARENT )
LBRACE {
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
EQL ==
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
AND &&
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
OR ||
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IDENFR a
ASSIGN =
IDENFR a
PLUS +
INTCON 1
MINU -
INTCON 3
MULT *
INTCON 4
DIV /
INTCON 3
MOD %
INTCON 2
SEMICN ;
IDENFR a
ASSIGN =
INTCON 1
PLUS +
INTCON 1
SEMICN ;
IDENFR a
ASSIGN =
PLUS +
MINU -
PLUS +
INTCON 1
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "21371295\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
INTCON 0
PLUS +
INTCON 1
SEMICN ;
SEMICN ;
IFTK if
LPARENT (
IDENFR i
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR a
ASSIGN =
INTCON 1
COMMA ,
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
NOT !
IDENFR a
RPARENT )
LBRACE {
RBRACE }
ELSETK else
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR b
LEQ <=
INTCON 0
RPARENT )
LBRACE {
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
EQL ==
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
AND &&
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
OR ||
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IDENFR a
ASSIGN =
IDENFR a
PLUS +
INTCON 1
MINU -
INTCON 3
MULT *
INTCON 4
DIV /
INTCON 3
MOD %
INTCON 2
SEMICN ;
IDENFR a
ASSIGN =
INTCON 1
PLUS +
INTCON 1
SEMICN ;
IDENFR a
ASSIGN =
PLUS +
MINU -
PLUS +
INTCON 1
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "21371295\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
INTCON 0
PLUS +
INTCON 1
SEMICN ;
SEMICN ;
IFTK if
LPARENT (
IDENFR i
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR a
ASSIGN =
INTCON 1
COMMA ,
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
NOT !
IDENFR a
RPARENT )
LBRACE {
RBRACE }
ELSETK else
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR b
LEQ <=
INTCON 0
RPARENT )
LBRACE {
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
EQL ==
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
AND &&
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
OR ||
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IDENFR a
ASSIGN =
IDENFR a
PLUS +
INTCON 1
MINU -
INTCON 3
MULT *
INTCON 4
DIV /
INTCON 3
MOD %
INTCON 2
SEMICN ;
IDENFR a
ASSIGN =
INTCON 1
PLUS +
INTCON 1
SEMICN ;
IDENFR a
ASSIGN =
PLUS +
MINU -
PLUS +
INTCON 1
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "21371295\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
INTCON 0
PLUS +
INTCON 1
SEMICN ;
SEMICN ;
IFTK if
LPARENT (
IDENFR i
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR a
ASSIGN =
INTCON 1
COMMA ,
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
NOT !
IDENFR a
RPARENT )
LBRACE {
RBRACE }
ELSETK else
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR b
LEQ <=
INTCON 0
RPARENT )
LBRACE {
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
EQL ==
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
AND &&
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
OR ||
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IDENFR a
ASSIGN =
IDENFR a
PLUS +
INTCON 1
MINU -
INTCON 3
MULT *
INTCON 4
DIV /
INTCON 3
MOD %
INTCON 2
SEMICN ;
IDENFR a
ASSIGN =
INTCON 1
PLUS +
INTCON 1
SEMICN ;
IDENFR a
ASSIGN =
PLUS +
MINU -
PLUS +
INTCON 1
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "21371295\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
INTCON 0
PLUS +
INTCON 1
SEMICN ;
SEMICN ;
IFTK if
LPARENT (
IDENFR i
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR a
ASSIGN =
INTCON 1
COMMA ,
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
NOT !
IDENFR a
RPARENT )
LBRACE {
RBRACE }
ELSETK else
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR b
LEQ <=
INTCON 0
RPARENT )
LBRACE {
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
EQL ==
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
AND &&
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
OR ||
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IDENFR a
ASSIGN =
IDENFR a
PLUS +
INTCON 1
MINU -
INTCON 3
MULT *
INTCON 4
DIV /
INTCON 3
MOD %
INTCON 2
SEMICN ;
IDENFR a
ASSIGN =
INTCON 1
PLUS +
INTCON 1
SEMICN ;
IDENFR a
ASSIGN =
PLUS +
MINU -
PLUS +
INTCON 1
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "21371295\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
INTCON 0
PLUS +
INTCON 1
SEMICN ;
SEMICN ;
IFTK if
LPARENT (
IDENFR i
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR a
ASSIGN =
INTCON 1
COMMA ,
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
NOT !
IDENFR a
RPARENT )
LBRACE {
RBRACE }
ELSETK else
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR b
LEQ <=
INTCON 0
RPARENT )
LBRACE {
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
EQL ==
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
AND &&
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
OR ||
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IDENFR a
ASSIGN =
IDENFR a
PLUS +
INTCON 1
MINU -
INTCON 3
MULT *
INTCON 4
DIV /
INTCON 3
MOD %
INTCON 2
SEMICN ;
IDENFR a
ASSIGN =
INTCON 1
PLUS +
INTCON 1
SEMICN ;
IDENFR a
ASSIGN =
PLUS +
MINU -
PLUS +
INTCON 1
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "21371295\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
INTCON 0
PLUS +
INTCON 1
SEMICN ;
SEMICN ;
IFTK if
LPARENT (
IDENFR i
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR a
ASSIGN =
INTCON 1
COMMA ,
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
NOT !
IDENFR a
RPARENT )
LBRACE {
RBRACE }
ELSETK else
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR b
LEQ <=
INTCON 0
RPARENT )
LBRACE {
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
EQL ==
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
AND &&
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
OR ||
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IDENFR a
ASSIGN =
IDENFR a
PLUS +
INTCON 1
MINU -
INTCON 3
MULT *
INTCON 4
DIV /
INTCON 3
MOD %
INTCON 2
SEMICN ;
IDENFR a
ASSIGN =
INTCON 1
PLUS +
INTCON 1
SEMICN ;
IDENFR a
ASSIGN =
PLUS +
MINU -
PLUS +
INTCON 1
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "21371295\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
INTCON 0
PLUS +
INTCON 1
SEMICN ;
SEMICN ;
IFTK if
LPARENT (
IDENFR i
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR a
ASSIGN =
INTCON 1
COMMA ,
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
NOT !
IDENFR a
RPARENT )
LBRACE {
RBRACE }
ELSETK else
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR b
LEQ <=
INTCON 0
RPARENT )
LBRACE {
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
EQL ==
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
AND &&
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
OR ||
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IDENFR a
ASSIGN =
IDENFR a
PLUS +
INTCON 1
MINU -
INTCON 3
MULT *
INTCON 4
DIV /
INTCON 3
MOD %
INTCON 2
SEMICN ;
IDENFR a
ASSIGN =
INTCON 1
PLUS +
INTCON 1
SEMICN ;
IDENFR a
ASSIGN =
PLUS +
MINU -
PLUS +
INTCON 1
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "21371295\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
INTCON 0
PLUS +
INTCON 1
SEMICN ;
SEMICN ;
IFTK if
LPARENT (
IDENFR i
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR a
ASSIGN =
INTCON 1
COMMA ,
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
NOT !
IDENFR a
RPARENT )
LBRACE {
RBRACE }
ELSETK else
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR b
LEQ <=
INTCON 0
RPARENT )
LBRACE {
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
EQL ==
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
AND &&
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
OR ||
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IDENFR a
ASSIGN =
IDENFR a
PLUS +
INTCON 1
MINU -
INTCON 3
MULT *
INTCON 4
DIV /
INTCON 3
MOD %
INTCON 2
SEMICN ;
IDENFR a
ASSIGN =
INTCON 1
PLUS +
INTCON 1
SEMICN ;
IDENFR a
ASSIGN =
PLUS +
MINU -
PLUS +
INTCON 1
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "21371295\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
INTCON 0
PLUS +
INTCON 1
SEMICN ;
SEMICN ;
IFTK if
LPARENT (
IDENFR i
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR a
ASSIGN =
INTCON 1
COMMA ,
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
NOT !
IDENFR a
RPARENT )
LBRACE {
RBRACE }
ELSETK else
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR b
LEQ <=
INTCON 0
RPARENT )
LBRACE {
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
EQL ==
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
AND &&
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
OR ||
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IDENFR a
ASSIGN =
IDENFR a
PLUS +
INTCON 1
MINU -
INTCON 3
MULT *
INTCON 4
DIV /
INTCON 3
MOD %
INTCON 2
SEMICN ;
IDENFR a
ASSIGN =
INTCON 1
PLUS +
INTCON 1
SEMICN ;
IDENFR a
ASSIGN =
PLUS +
MINU -
PLUS +
INTCON 1
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "21371295\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
INTCON 0
PLUS +
INTCON 1
SEMICN ;
SEMICN ;
IFTK if
LPARENT (
IDENFR i
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR a
ASSIGN =
INTCON 1
COMMA ,
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
NOT !
IDENFR a
RPARENT )
LBRACE {
RBRACE }
ELSETK else
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR b
LEQ <=
INTCON 0
RPARENT )
LBRACE {
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
EQL ==
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
AND &&
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
OR ||
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IDENFR a
ASSIGN =
IDENFR a
PLUS +
INTCON 1
MINU -
INTCON 3
MULT *
INTCON 4
DIV /
INTCON 3
MOD %
INTCON 2
SEMICN ;
IDENFR a
ASSIGN =
INTCON 1
PLUS +
INTCON 1
SEMICN ;
IDENFR a
ASSIGN =
PLUS +
MINU -
PLUS +
INTCON 1
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "21371295\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
INTCON 0
PLUS +
INTCON 1
SEMICN ;
SEMICN ;
IFTK if
LPARENT (
IDENFR i
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR a
ASSIGN =
INTCON 1
COMMA ,
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
NOT !
IDENFR a
RPARENT )
LBRACE {
RBRACE }
ELSETK else
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR b
LEQ <=
INTCON 0
RPARENT )
LBRACE {
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
EQL ==
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
AND &&
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
OR ||
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IDENFR a
ASSIGN =
IDENFR a
PLUS +
INTCON 1
MINU -
INTCON 3
MULT *
INTCON 4
DIV /
INTCON 3
MOD %
INTCON 2
SEMICN ;
IDENFR a
ASSIGN =
INTCON 1
PLUS +
INTCON 1
SEMICN ;
IDENFR a
ASSIGN =
PLUS +
MINU -
PLUS +
INTCON 1
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "21371295\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
INTCON 0
PLUS +
INTCON 1
SEMICN ;
SEMICN ;
IFTK if
LPARENT (
IDENFR i
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR a
ASSIGN =
INTCON 1
COMMA ,
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
NOT !
IDENFR a
RPARENT )
LBRACE {
RBRACE }
ELSETK else
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR b
LEQ <=
INTCON 0
RPARENT )
LBRACE {
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
EQL ==
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
AND &&
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
OR ||
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IDENFR a
ASSIGN =
IDENFR a
PLUS +
INTCON 1
MINU -
INTCON 3
MULT *
INTCON 4
DIV /
INTCON 3
MOD %
INTCON 2
SEMICN ;
IDENFR a
ASSIGN =
INTCON 1
PLUS +
INTCON 1
SEMICN ;
IDENFR a
ASSIGN =
PLUS +
MINU -
PLUS +
INTCON 1
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "21371295\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
INTCON 0
PLUS +
INTCON 1
SEMICN ;
SEMICN ;
IFTK if
LPARENT (
IDENFR i
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR a
ASSIGN =
INTCON 1
COMMA ,
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
NOT !
IDENFR a
RPARENT )
LBRACE {
RBRACE }
ELSETK else
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR b
LEQ <=
INTCON 0
RPARENT )
LBRACE {
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
EQL ==
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
AND &&
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
OR ||
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IDENFR a
ASSIGN =
IDENFR a
PLUS +
INTCON 1
MINU -
INTCON 3
MULT *
INTCON 4
DIV /
INTCON 3
MOD %
INTCON 2
SEMICN ;
IDENFR a
ASSIGN =
INTCON 1
PLUS +
INTCON 1
SEMICN ;
IDENFR a
ASSIGN =
PLUS +
MINU -
PLUS +
INTCON 1
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "21371295\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
INTCON 0
PLUS +
INTCON 1
SEMICN ;
SEMICN ;
IFTK if
LPARENT (
IDENFR i
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR a
ASSIGN =
INTCON 1
COMMA ,
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
NOT !
IDENFR a
RPARENT )
LBRACE {
RBRACE }
ELSETK else
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR b
LEQ <=
INTCON 0
RPARENT )
LBRACE {
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
EQL ==
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
AND &&
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
OR ||
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IDENFR a
ASSIGN =
IDENFR a
PLUS +
INTCON 1
MINU -
INTCON 3
MULT *
INTCON 4
DIV /
INTCON 3
MOD %
INTCON 2
SEMICN ;
IDENFR a
ASSIGN =
INTCON 1
PLUS +
INTCON 1
SEMICN ;
IDENFR a
ASSIGN =
PLUS +
MINU -
PLUS +
INTCON 1
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "21371295\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
INTCON 0
PLUS +
INTCON 1
SEMICN ;
SEMICN ;
IFTK if
LPARENT (
IDENFR i
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR a
ASSIGN =
INTCON 1
COMMA ,
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
NOT !
IDENFR a
RPARENT )
LBRACE {
RBRACE }
ELSETK else
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR b
LEQ <=
INTCON 0
RPARENT )
LBRACE {
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
EQL ==
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
AND &&
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
OR ||
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IDENFR a
ASSIGN =
IDENFR a
PLUS +
INTCON 1
MINU -
INTCON 3
MULT *
INTCON 4
DIV /
INTCON 3
MOD %
INTCON 2
SEMICN ;
IDENFR a
ASSIGN =
INTCON 1
PLUS +
INTCON 1
SEMICN ;
IDENFR a
ASSIGN =
PLUS +
MINU -
PLUS +
INTCON 1
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "21371295\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
INTCON 0
PLUS +
INTCON 1
SEMICN ;
SEMICN ;
IFTK if
LPARENT (
IDENFR i
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR a
ASSIGN =
INTCON 1
COMMA ,
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
NOT !
IDENFR a
RPARENT )
LBRACE {
RBRACE }
ELSETK else
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR b
LEQ <=
INTCON 0
RPARENT )
LBRACE {
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
EQL ==
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
AND &&
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
OR ||
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IDENFR a
ASSIGN =
IDENFR a
PLUS +
INTCON 1
MINU -
INTCON 3
MULT *
INTCON 4
DIV /
INTCON 3
MOD %
INTCON 2
SEMICN ;
IDENFR a
ASSIGN =
INTCON 1
PLUS +
INTCON 1
SEMICN ;
IDENFR a
ASSIGN =
PLUS +
MINU -
PLUS +
INTCON 1
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "21371295\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
INTCON 0
PLUS +
INTCON 1
SEMICN ;
SEMICN ;
IFTK if
LPARENT (
IDENFR i
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR a
ASSIGN =
INTCON 1
COMMA ,
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
NOT !
IDENFR a
RPARENT )
LBRACE {
RBRACE }
ELSETK else
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR b
LEQ <=
INTCON 0
RPARENT )
LBRACE {
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
EQL ==
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
AND &&
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
OR ||
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IDENFR a
ASSIGN =
IDENFR a
PLUS +
INTCON 1
MINU -
INTCON 3
MULT *
INTCON 4
DIV /
INTCON 3
MOD %
INTCON 2
SEMICN ;
IDENFR a
ASSIGN =
INTCON 1
PLUS +
INTCON 1
SEMICN ;
IDENFR a
ASSIGN =
PLUS +
MINU -
PLUS +
INTCON 1
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "21371295\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
INTCON 0
PLUS +
INTCON 1
SEMICN ;
SEMICN ;
IFTK if
LPARENT (
IDENFR i
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR a
ASSIGN =
INTCON 1
COMMA ,
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
NOT !
IDENFR a
RPARENT )
LBRACE {
RBRACE }
ELSETK else
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR b
LEQ <=
INTCON 0
RPARENT )
LBRACE {
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
EQL ==
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
AND &&
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
OR ||
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IDENFR a
ASSIGN =
IDENFR a
PLUS +
INTCON 1
MINU -
INTCON 3
MULT *
INTCON 4
DIV /
INTCON 3
MOD %
INTCON 2
SEMICN ;
IDENFR a
ASSIGN =
INTCON 1
PLUS +
INTCON 1
SEMICN ;
IDENFR a
ASSIGN =
PLUS +
MINU -
PLUS +
INTCON 1
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "21371295\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
INTCON 0
PLUS +
INTCON 1
SEMICN ;
SEMICN ;
IFTK if
LPARENT (
IDENFR i
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR a
ASSIGN =
INTCON 1
COMMA ,
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
NOT !
IDENFR a
RPARENT )
LBRACE {
RBRACE }
ELSETK else
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR b
LEQ <=
INTCON 0
RPARENT )
LBRACE {
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
EQL ==
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
AND &&
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
OR ||
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IDENFR a
ASSIGN =
IDENFR a
PLUS +
INTCON 1
MINU -
INTCON 3
MULT *
INTCON 4
DIV /
INTCON 3
MOD %
INTCON 2
SEMICN ;
IDENFR a
ASSIGN =
INTCON 1
PLUS +
INTCON 1
SEMICN ;
IDENFR a
ASSIGN =
PLUS +
MINU -
PLUS +
INTCON 1
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "21371295\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
INTCON 0
PLUS +
INTCON 1
SEMICN ;
SEMICN ;
IFTK if
LPARENT (
IDENFR i
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR a
ASSIGN =
INTCON 1
COMMA ,
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
NOT !
IDENFR a
RPARENT )
LBRACE {
RBRACE }
ELSETK else
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR b
LEQ <=
INTCON 0
RPARENT )
LBRACE {
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
EQL ==
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
AND &&
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
OR ||
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IDENFR a
ASSIGN =
IDENFR a
PLUS +
INTCON 1
MINU -
INTCON 3
MULT *
INTCON 4
DIV /
INTCON 3
MOD %
INTCON 2
SEMICN ;
IDENFR a
ASSIGN =
INTCON 1
PLUS +
INTCON 1
SEMICN ;
IDENFR a
ASSIGN =
PLUS +
MINU -
PLUS +
INTCON 1
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "21371295\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
INTCON 0
PLUS +
INTCON 1
SEMICN ;
SEMICN ;
IFTK if
LPARENT (
IDENFR i
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR a
ASSIGN =
INTCON 1
COMMA ,
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
NOT !
IDENFR a
RPARENT )
LBRACE {
RBRACE }
ELSETK else
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR b
LEQ <=
INTCON 0
RPARENT )
LBRACE {
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
EQL ==
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
AND &&
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
OR ||
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IDENFR a
ASSIGN =
IDENFR a
PLUS +
INTCON 1
MINU -
INTCON 3
MULT *
INTCON 4
DIV /
INTCON 3
MOD %
INTCON 2
SEMICN ;
IDENFR a
ASSIGN =
INTCON 1
PLUS +
INTCON 1
SEMICN ;
IDENFR a
ASSIGN =
PLUS +
MINU -
PLUS +
INTCON 1
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "21371295\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
INTCON 0
PLUS +
INTCON 1
SEMICN ;
SEMICN ;
IFTK if
LPARENT (
IDENFR i
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR a
ASSIGN =
INTCON 1
COMMA ,
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
NOT !
IDENFR a
RPARENT )
LBRACE {
RBRACE }
ELSETK else
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR b
LEQ <=
INTCON 0
RPARENT )
LBRACE {
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
EQL ==
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
AND &&
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
OR ||
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IDENFR a
ASSIGN =
IDENFR a
PLUS +
INTCON 1
MINU -
INTCON 3
MULT *
INTCON 4
DIV /
INTCON 3
MOD %
INTCON 2
SEMICN ;
IDENFR a
ASSIGN =
INTCON 1
PLUS +
INTCON 1
SEMICN ;
IDENFR a
ASSIGN =
PLUS +
MINU -
PLUS +
INTCON 1
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "21371295\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
INTCON 0
PLUS +
INTCON 1
SEMICN ;
SEMICN ;
IFTK if
LPARENT (
IDENFR i
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR a
ASSIGN =
INTCON 1
COMMA ,
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
NOT !
IDENFR a
RPARENT )
LBRACE {
RBRACE }
ELSETK else
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR b
LEQ <=
INTCON 0
RPARENT )
LBRACE {
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
EQL ==
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
AND &&
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
OR ||
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IDENFR a
ASSIGN =
IDENFR a
PLUS +
INTCON 1
MINU -
INTCON 3
MULT *
INTCON 4
DIV /
INTCON 3
MOD %
INTCON 2
SEMICN ;
IDENFR a
ASSIGN =
INTCON 1
PLUS +
INTCON 1
SEMICN ;
IDENFR a
ASSIGN =
PLUS +
MINU -
PLUS +
INTCON 1
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "21371295\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
INTCON 0
PLUS +
INTCON 1
SEMICN ;
SEMICN ;
IFTK if
LPARENT (
IDENFR i
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR a
ASSIGN =
INTCON 1
COMMA ,
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
NOT !
IDENFR a
RPARENT )
LBRACE {
RBRACE }
ELSETK else
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR b
LEQ <=
INTCON 0
RPARENT )
LBRACE {
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
EQL ==
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
AND &&
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
OR ||
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IDENFR a
ASSIGN =
IDENFR a
PLUS +
INTCON 1
MINU -
INTCON 3
MULT *
INTCON 4
DIV /
INTCON 3
MOD %
INTCON 2
SEMICN ;
IDENFR a
ASSIGN =
INTCON 1
PLUS +
INTCON 1
SEMICN ;
IDENFR a
ASSIGN =
PLUS +
MINU -
PLUS +
INTCON 1
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "21371295\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
INTCON 0
PLUS +
INTCON 1
SEMICN ;
SEMICN ;
IFTK if
LPARENT (
IDENFR i
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR a
ASSIGN =
INTCON 1
COMMA ,
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
NOT !
IDENFR a
RPARENT )
LBRACE {
RBRACE }
ELSETK else
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR b
LEQ <=
INTCON 0
RPARENT )
LBRACE {
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
EQL ==
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
AND &&
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
OR ||
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IDENFR a
ASSIGN =
IDENFR a
PLUS +
INTCON 1
MINU -
INTCON 3
MULT *
INTCON 4
DIV /
INTCON 3
MOD %
INTCON 2
SEMICN ;
IDENFR a
ASSIGN =
INTCON 1
PLUS +
INTCON 1
SEMICN ;
IDENFR a
ASSIGN =
PLUS +
MINU -
PLUS +
INTCON 1
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "21371295\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
INTCON 0
PLUS +
INTCON 1
SEMICN ;
SEMICN ;
IFTK if
LPARENT (
IDENFR i
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR a
ASSIGN =
INTCON 1
COMMA ,
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
NOT !
IDENFR a
RPARENT )
LBRACE {
RBRACE }
ELSETK else
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR b
LEQ <=
INTCON 0
RPARENT )
LBRACE {
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
EQL ==
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
AND &&
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
OR ||
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IDENFR a
ASSIGN =
IDENFR a
PLUS +
INTCON 1
MINU -
INTCON 3
MULT *
INTCON 4
DIV /
INTCON 3
MOD %
INTCON 2
SEMICN ;
IDENFR a
ASSIGN =
INTCON 1
PLUS +
INTCON 1
SEMICN ;
IDENFR a
ASSIGN =
PLUS +
MINU -
PLUS +
INTCON 1
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "21371295\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
INTCON 0
PLUS +
INTCON 1
SEMICN ;
SEMICN ;
IFTK if
LPARENT (
IDENFR i
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR a
ASSIGN =
INTCON 1
COMMA ,
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
NOT !
IDENFR a
RPARENT )
LBRACE {
RBRACE }
ELSETK else
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR b
LEQ <=
INTCON 0
RPARENT )
LBRACE {
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
EQL ==
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
AND &&
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
OR ||
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IDENFR a
ASSIGN =
IDENFR a
PLUS +
INTCON 1
MINU -
INTCON 3
MULT *
INTCON 4
DIV /
INTCON 3
MOD %
INTCON 2
SEMICN ;
IDENFR a
ASSIGN =
INTCON 1
PLUS +
INTCON 1
SEMICN ;
IDENFR a
ASSIGN =
PLUS +
MINU -
PLUS +
INTCON 1
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "21371295\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
INTCON 0
PLUS +
INTCON 1
SEMICN ;
SEMICN ;
IFTK if
LPARENT (
IDENFR i
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR a
ASSIGN =
INTCON 1
COMMA ,
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
NOT !
IDENFR a
RPARENT )
LBRACE {
RBRACE }
ELSETK else
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR b
LEQ <=
INTCON 0
RPARENT )
LBRACE {
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
EQL ==
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
AND &&
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
OR ||
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IDENFR a
ASSIGN =
IDENFR a
PLUS +
INTCON 1
MINU -
INTCON 3
MULT *
INTCON 4
DIV /
INTCON 3
MOD %
INTCON 2
SEMICN ;
IDENFR a
ASSIGN =
INTCON 1
PLUS +
INTCON 1
SEMICN ;
IDENFR a
ASSIGN =
PLUS +
MINU -
PLUS +
INTCON 1
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "21371295\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
INTCON 0
PLUS +
INTCON 1
SEMICN ;
SEMICN ;
IFTK if
LPARENT (
IDENFR i
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR a
ASSIGN =
INTCON 1
COMMA ,
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
NOT !
IDENFR a
RPARENT )
LBRACE {
RBRACE }
ELSETK else
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR b
LEQ <=
INTCON 0
RPARENT )
LBRACE {
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
EQL ==
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
AND &&
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
OR ||
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IDENFR a
ASSIGN =
IDENFR a
PLUS +
INTCON 1
MINU -
INTCON 3
MULT *
INTCON 4
DIV /
INTCON 3
MOD %
INTCON 2
SEMICN ;
IDENFR a
ASSIGN =
INTCON 1
PLUS +
INTCON 1
SEMICN ;
IDENFR a
ASSIGN =
PLUS +
MINU -
PLUS +
INTCON 1
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "21371295\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
INTCON 0
PLUS +
INTCON 1
SEMICN ;
SEMICN ;
IFTK if
LPARENT (
IDENFR i
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR a
ASSIGN =
INTCON 1
COMMA ,
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
NOT !
IDENFR a
RPARENT )
LBRACE {
RBRACE }
ELSETK else
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR b
LEQ <=
INTCON 0
RPARENT )
LBRACE {
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
EQL ==
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
AND &&
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
OR ||
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IDENFR a
ASSIGN =
IDENFR a
PLUS +
INTCON 1
MINU -
INTCON 3
MULT *
INTCON 4
DIV /
INTCON 3
MOD %
INTCON 2
SEMICN ;
IDENFR a
ASSIGN =
INTCON 1
PLUS +
INTCON 1
SEMICN ;
IDENFR a
ASSIGN =
PLUS +
MINU -
PLUS +
INTCON 1
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "21371295\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
INTCON 0
PLUS +
INTCON 1
SEMICN ;
SEMICN ;
IFTK if
LPARENT (
IDENFR i
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR a
ASSIGN =
INTCON 1
COMMA ,
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
NOT !
IDENFR a
RPARENT )
LBRACE {
RBRACE }
ELSETK else
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR b
LEQ <=
INTCON 0
RPARENT )
LBRACE {
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
EQL ==
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
AND &&
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
OR ||
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IDENFR a
ASSIGN =
IDENFR a
PLUS +
INTCON 1
MINU -
INTCON 3
MULT *
INTCON 4
DIV /
INTCON 3
MOD %
INTCON 2
SEMICN ;
IDENFR a
ASSIGN =
INTCON 1
PLUS +
INTCON 1
SEMICN ;
IDENFR a
ASSIGN =
PLUS +
MINU -
PLUS +
INTCON 1
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "21371295\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
INTCON 0
PLUS +
INTCON 1
SEMICN ;
SEMICN ;
IFTK if
LPARENT (
IDENFR i
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR a
ASSIGN =
INTCON 1
COMMA ,
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
NOT !
IDENFR a
RPARENT )
LBRACE {
RBRACE }
ELSETK else
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR b
LEQ <=
INTCON 0
RPARENT )
LBRACE {
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
EQL ==
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
AND &&
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
OR ||
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IDENFR a
ASSIGN =
IDENFR a
PLUS +
INTCON 1
MINU -
INTCON 3
MULT *
INTCON 4
DIV /
INTCON 3
MOD %
INTCON 2
SEMICN ;
IDENFR a
ASSIGN =
INTCON 1
PLUS +
INTCON 1
SEMICN ;
IDENFR a
ASSIGN =
PLUS +
MINU -
PLUS +
INTCON 1
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "21371295\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
INTCON 0
PLUS +
INTCON 1
SEMICN ;
SEMICN ;
IFTK if
LPARENT (
IDENFR i
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR a
ASSIGN =
INTCON 1
COMMA ,
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
NOT !
IDENFR a
RPARENT )
LBRACE {
RBRACE }
ELSETK else
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR b
LEQ <=
INTCON 0
RPARENT )
LBRACE {
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
EQL ==
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
AND &&
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
OR ||
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IDENFR a
ASSIGN =
IDENFR a
PLUS +
INTCON 1
MINU -
INTCON 3
MULT *
INTCON 4
DIV /
INTCON 3
MOD %
INTCON 2
SEMICN ;
IDENFR a
ASSIGN =
INTCON 1
PLUS +
INTCON 1
SEMICN ;
IDENFR a
ASSIGN =
PLUS +
MINU -
PLUS +
INTCON 1
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "21371295\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
INTCON 0
PLUS +
INTCON 1
SEMICN ;
SEMICN ;
IFTK if
LPARENT (
IDENFR i
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR a
ASSIGN =
INTCON 1
COMMA ,
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
NOT !
IDENFR a
RPARENT )
LBRACE {
RBRACE }
ELSETK else
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR b
LEQ <=
INTCON 0
RPARENT )
LBRACE {
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
EQL ==
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
AND &&
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
OR ||
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IDENFR a
ASSIGN =
IDENFR a
PLUS +
INTCON 1
MINU -
INTCON 3
MULT *
INTCON 4
DIV /
INTCON 3
MOD %
INTCON 2
SEMICN ;
IDENFR a
ASSIGN =
INTCON 1
PLUS +
INTCON 1
SEMICN ;
IDENFR a
ASSIGN =
PLUS +
MINU -
PLUS +
INTCON 1
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "21371295\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
INTCON 0
PLUS +
INTCON 1
SEMICN ;
SEMICN ;
IFTK if
LPARENT (
IDENFR i
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR a
ASSIGN =
INTCON 1
COMMA ,
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
NOT !
IDENFR a
RPARENT )
LBRACE {
RBRACE }
ELSETK else
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR b
LEQ <=
INTCON 0
RPARENT )
LBRACE {
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
EQL ==
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
AND &&
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
OR ||
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IDENFR a
ASSIGN =
IDENFR a
PLUS +
INTCON 1
MINU -
INTCON 3
MULT *
INTCON 4
DIV /
INTCON 3
MOD %
INTCON 2
SEMICN ;
IDENFR a
ASSIGN =
INTCON 1
PLUS +
INTCON 1
SEMICN ;
IDENFR a
ASSIGN =
PLUS +
MINU -
PLUS +
INTCON 1
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "21371295\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
INTCON 0
PLUS +
INTCON 1
SEMICN ;
SEMICN ;
IFTK if
LPARENT (
IDENFR i
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR a
ASSIGN =
INTCON 1
COMMA ,
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
NOT !
IDENFR a
RPARENT )
LBRACE {
RBRACE }
ELSETK else
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR b
LEQ <=
INTCON 0
RPARENT )
LBRACE {
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
EQL ==
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
AND &&
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
OR ||
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IDENFR a
ASSIGN =
IDENFR a
PLUS +
INTCON 1
MINU -
INTCON 3
MULT *
INTCON 4
DIV /
INTCON 3
MOD %
INTCON 2
SEMICN ;
IDENFR a
ASSIGN =
INTCON 1
PLUS +
INTCON 1
SEMICN ;
IDENFR a
ASSIGN =
PLUS +
MINU -
PLUS +
INTCON 1
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "21371295\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
INTCON 0
PLUS +
INTCON 1
SEMICN ;
SEMICN ;
IFTK if
LPARENT (
IDENFR i
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR a
ASSIGN =
INTCON 1
COMMA ,
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
NOT !
IDENFR a
RPARENT )
LBRACE {
RBRACE }
ELSETK else
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR b
LEQ <=
INTCON 0
RPARENT )
LBRACE {
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
EQL ==
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
AND &&
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
OR ||
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IDENFR a
ASSIGN =
IDENFR a
PLUS +
INTCON 1
MINU -
INTCON 3
MULT *
INTCON 4
DIV /
INTCON 3
MOD %
INTCON 2
SEMICN ;
IDENFR a
ASSIGN =
INTCON 1
PLUS +
INTCON 1
SEMICN ;
IDENFR a
ASSIGN =
PLUS +
MINU -
PLUS +
INTCON 1
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "21371295\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
INTCON 0
PLUS +
INTCON 1
SEMICN ;
SEMICN ;
IFTK if
LPARENT (
IDENFR i
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR a
ASSIGN =
INTCON 1
COMMA ,
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
NOT !
IDENFR a
RPARENT )
LBRACE {
RBRACE }
ELSETK else
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR b
LEQ <=
INTCON 0
RPARENT )
LBRACE {
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
EQL ==
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
AND &&
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
OR ||
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IDENFR a
ASSIGN =
IDENFR a
PLUS +
INTCON 1
MINU -
INTCON 3
MULT *
INTCON 4
DIV /
INTCON 3
MOD %
INTCON 2
SEMICN ;
IDENFR a
ASSIGN =
INTCON 1
PLUS +
INTCON 1
SEMICN ;
IDENFR a
ASSIGN =
PLUS +
MINU -
PLUS +
INTCON 1
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "21371295\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
INTCON 0
PLUS +
INTCON 1
SEMICN ;
SEMICN ;
IFTK if
LPARENT (
IDENFR i
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR a
ASSIGN =
INTCON 1
COMMA ,
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
NOT !
IDENFR a
RPARENT )
LBRACE {
RBRACE }
ELSETK else
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR b
LEQ <=
INTCON 0
RPARENT )
LBRACE {
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
EQL ==
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
AND &&
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
OR ||
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IDENFR a
ASSIGN =
IDENFR a
PLUS +
INTCON 1
MINU -
INTCON 3
MULT *
INTCON 4
DIV /
INTCON 3
MOD %
INTCON 2
SEMICN ;
IDENFR a
ASSIGN =
INTCON 1
PLUS +
INTCON 1
SEMICN ;
IDENFR a
ASSIGN =
PLUS +
MINU -
PLUS +
INTCON 1
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "21371295\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
INTCON 0
PLUS +
INTCON 1
SEMICN ;
SEMICN ;
IFTK if
LPARENT (
IDENFR i
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR a
ASSIGN =
INTCON 1
COMMA ,
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
NOT !
IDENFR a
RPARENT )
LBRACE {
RBRACE }
ELSETK else
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR b
LEQ <=
INTCON 0
RPARENT )
LBRACE {
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
EQL ==
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
AND &&
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
OR ||
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IDENFR a
ASSIGN =
IDENFR a
PLUS +
INTCON 1
MINU -
INTCON 3
MULT *
INTCON 4
DIV /
INTCON 3
MOD %
INTCON 2
SEMICN ;
IDENFR a
ASSIGN =
INTCON 1
PLUS +
INTCON 1
SEMICN ;
IDENFR a
ASSIGN =
PLUS +
MINU -
PLUS +
INTCON 1
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "21371295\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
INTCON 0
PLUS +
INTCON 1
SEMICN ;
SEMICN ;
IFTK if
LPARENT (
IDENFR i
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR a
ASSIGN =
INTCON 1
COMMA ,
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
NOT !
IDENFR a
RPARENT )
LBRACE {
RBRACE }
ELSETK else
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR b
LEQ <=
INTCON 0
RPARENT )
LBRACE {
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
EQL ==
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
AND &&
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
OR ||
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IDENFR a
ASSIGN =
IDENFR a
PLUS +
INTCON 1
MINU -
INTCON 3
MULT *
INTCON 4
DIV /
INTCON 3
MOD %
INTCON 2
SEMICN ;
IDENFR a
ASSIGN =
INTCON 1
PLUS +
INTCON 1
SEMICN ;
IDENFR a
ASSIGN =
PLUS +
MINU -
PLUS +
INTCON 1
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "21371295\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
INTCON 0
PLUS +
INTCON 1
SEMICN ;
SEMICN ;
IFTK if
LPARENT (
IDENFR i
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR a
ASSIGN =
INTCON 1
COMMA ,
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
NOT !
IDENFR a
RPARENT )
LBRACE {
RBRACE }
ELSETK else
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR b
LEQ <=
INTCON 0
RPARENT )
LBRACE {
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
EQL ==
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
AND &&
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
OR ||
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IDENFR a
ASSIGN =
IDENFR a
PLUS +
INTCON 1
MINU -
INTCON 3
MULT *
INTCON 4
DIV /
INTCON 3
MOD %
INTCON 2
SEMICN ;
IDENFR a
ASSIGN =
INTCON 1
PLUS +
INTCON 1
SEMICN ;
IDENFR a
ASSIGN =
PLUS +
MINU -
PLUS +
INTCON 1
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "21371295\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
INTCON 0
PLUS +
INTCON 1
SEMICN ;
SEMICN ;
IFTK if
LPARENT (
IDENFR i
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR a
ASSIGN =
INTCON 1
COMMA ,
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
NOT !
IDENFR a
RPARENT )
LBRACE {
RBRACE }
ELSETK else
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR b
LEQ <=
INTCON 0
RPARENT )
LBRACE {
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
EQL ==
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
AND &&
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
OR ||
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IDENFR a
ASSIGN =
IDENFR a
PLUS +
INTCON 1
MINU -
INTCON 3
MULT *
INTCON 4
DIV /
INTCON 3
MOD %
INTCON 2
SEMICN ;
IDENFR a
ASSIGN =
INTCON 1
PLUS +
INTCON 1
SEMICN ;
IDENFR a
ASSIGN =
PLUS +
MINU -
PLUS +
INTCON 1
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "21371295\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
INTCON 0
PLUS +
INTCON 1
SEMICN ;
SEMICN ;
IFTK if
LPARENT (
IDENFR i
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR a
ASSIGN =
INTCON 1
COMMA ,
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
NOT !
IDENFR a
RPARENT )
LBRACE {
RBRACE }
ELSETK else
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR b
LEQ <=
INTCON 0
RPARENT )
LBRACE {
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
EQL ==
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
AND &&
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
OR ||
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IDENFR a
ASSIGN =
IDENFR a
PLUS +
INTCON 1
MINU -
INTCON 3
MULT *
INTCON 4
DIV /
INTCON 3
MOD %
INTCON 2
SEMICN ;
IDENFR a
ASSIGN =
INTCON 1
PLUS +
INTCON 1
SEMICN ;
IDENFR a
ASSIGN =
PLUS +
MINU -
PLUS +
INTCON 1
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "21371295\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
INTCON 0
PLUS +
INTCON 1
SEMICN ;
SEMICN ;
IFTK if
LPARENT (
IDENFR i
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR a
ASSIGN =
INTCON 1
COMMA ,
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
NOT !
IDENFR a
RPARENT )
LBRACE {
RBRACE }
ELSETK else
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR b
LEQ <=
INTCON 0
RPARENT )
LBRACE {
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
EQL ==
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
AND &&
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
OR ||
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IDENFR a
ASSIGN =
IDENFR a
PLUS +
INTCON 1
MINU -
INTCON 3
MULT *
INTCON 4
DIV /
INTCON 3
MOD %
INTCON 2
SEMICN ;
IDENFR a
ASSIGN =
INTCON 1
PLUS +
INTCON 1
SEMICN ;
IDENFR a
ASSIGN =
PLUS +
MINU -
PLUS +
INTCON 1
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "21371295\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
INTCON 0
PLUS +
INTCON 1
SEMICN ;
SEMICN ;
IFTK if
LPARENT (
IDENFR i
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR a
ASSIGN =
INTCON 1
COMMA ,
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
NOT !
IDENFR a
RPARENT )
LBRACE {
RBRACE }
ELSETK else
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR b
LEQ <=
INTCON 0
RPARENT )
LBRACE {
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
EQL ==
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
AND &&
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
OR ||
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IDENFR a
ASSIGN =
IDENFR a
PLUS +
INTCON 1
MINU -
INTCON 3
MULT *
INTCON 4
DIV /
INTCON 3
MOD %
INTCON 2
SEMICN ;
IDENFR a
ASSIGN =
INTCON 1
PLUS +
INTCON 1
SEMICN ;
IDENFR a
ASSIGN =
PLUS +
MINU -
PLUS +
INTCON 1
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "21371295\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
INTCON 0
PLUS +
INTCON 1
SEMICN ;
SEMICN ;
IFTK if
LPARENT (
IDENFR i
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR a
ASSIGN =
INTCON 1
COMMA ,
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
NOT !
IDENFR a
RPARENT )
LBRACE {
RBRACE }
ELSETK else
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR b
LEQ <=
INTCON 0
RPARENT )
LBRACE {
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
EQL ==
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
AND &&
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
OR ||
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IDENFR a
ASSIGN =
IDENFR a
PLUS +
INTCON 1
MINU -
INTCON 3
MULT *
INTCON 4
DIV /
INTCON 3
MOD %
INTCON 2
SEMICN ;
IDENFR a
ASSIGN =
INTCON 1
PLUS +
INTCON 1
SEMICN ;
IDENFR a
ASSIGN =
PLUS +
MINU -
PLUS +
INTCON 1
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "21371295\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
INTCON 0
PLUS +
INTCON 1
SEMICN ;
SEMICN ;
IFTK if
LPARENT (
IDENFR i
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR a
ASSIGN =
INTCON 1
COMMA ,
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
NOT !
IDENFR a
RPARENT )
LBRACE {
RBRACE }
ELSETK else
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR b
LEQ <=
INTCON 0
RPARENT )
LBRACE {
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
EQL ==
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
AND &&
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
OR ||
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IDENFR a
ASSIGN =
IDENFR a
PLUS +
INTCON 1
MINU -
INTCON 3
MULT *
INTCON 4
DIV /
INTCON 3
MOD %
INTCON 2
SEMICN ;
IDENFR a
ASSIGN =
INTCON 1
PLUS +
INTCON 1
SEMICN ;
IDENFR a
ASSIGN =
PLUS +
MINU -
PLUS +
INTCON 1
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "21371295\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
INTCON 0
PLUS +
INTCON 1
SEMICN ;
SEMICN ;
IFTK if
LPARENT (
IDENFR i
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR a
ASSIGN =
INTCON 1
COMMA ,
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
NOT !
IDENFR a
RPARENT )
LBRACE {
RBRACE }
ELSETK else
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR b
LEQ <=
INTCON 0
RPARENT )
LBRACE {
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
EQL ==
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
AND &&
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
OR ||
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IDENFR a
ASSIGN =
IDENFR a
PLUS +
INTCON 1
MINU -
INTCON 3
MULT *
INTCON 4
DIV /
INTCON 3
MOD %
INTCON 2
SEMICN ;
IDENFR a
ASSIGN =
INTCON 1
PLUS +
INTCON 1
SEMICN ;
IDENFR a
ASSIGN =
PLUS +
MINU -
PLUS +
INTCON 1
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "21371295\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
INTCON 0
PLUS +
INTCON 1
SEMICN ;
SEMICN ;
IFTK if
LPARENT (
IDENFR i
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR a
ASSIGN =
INTCON 1
COMMA ,
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
NOT !
IDENFR a
RPARENT )
LBRACE {
RBRACE }
ELSETK else
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR b
LEQ <=
INTCON 0
RPARENT )
LBRACE {
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
EQL ==
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
AND &&
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
OR ||
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IDENFR a
ASSIGN =
IDENFR a
PLUS +
INTCON 1
MINU -
INTCON 3
MULT *
INTCON 4
DIV /
INTCON 3
MOD %
INTCON 2
SEMICN ;
IDENFR a
ASSIGN =
INTCON 1
PLUS +
INTCON 1
SEMICN ;
IDENFR a
ASSIGN =
PLUS +
MINU -
PLUS +
INTCON 1
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "21371295\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
INTCON 0
PLUS +
INTCON 1
SEMICN ;
SEMICN ;
IFTK if
LPARENT (
IDENFR i
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR a
ASSIGN =
INTCON 1
COMMA ,
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
NOT !
IDENFR a
RPARENT )
LBRACE {
RBRACE }
ELSETK else
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR b
LEQ <=
INTCON 0
RPARENT )
LBRACE {
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
EQL ==
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
AND &&
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
OR ||
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IDENFR a
ASSIGN =
IDENFR a
PLUS +
INTCON 1
MINU -
INTCON 3
MULT *
INTCON 4
DIV /
INTCON 3
MOD %
INTCON 2
SEMICN ;
IDENFR a
ASSIGN =
INTCON 1
PLUS +
INTCON 1
SEMICN ;
IDENFR a
ASSIGN =
PLUS +
MINU -
PLUS +
INTCON 1
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "21371295\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
INTCON 0
PLUS +
INTCON 1
SEMICN ;
SEMICN ;
IFTK if
LPARENT (
IDENFR i
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR a
ASSIGN =
INTCON 1
COMMA ,
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
NOT !
IDENFR a
RPARENT )
LBRACE {
RBRACE }
ELSETK else
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR b
LEQ <=
INTCON 0
RPARENT )
LBRACE {
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
EQL ==
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
AND &&
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
OR ||
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IDENFR a
ASSIGN =
IDENFR a
PLUS +
INTCON 1
MINU -
INTCON 3
MULT *
INTCON 4
DIV /
INTCON 3
MOD %
INTCON 2
SEMICN ;
IDENFR a
ASSIGN =
INTCON 1
PLUS +
INTCON 1
SEMICN ;
IDENFR a
ASSIGN =
PLUS +
MINU -
PLUS +
INTCON 1
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "21371295\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
INTCON 0
PLUS +
INTCON 1
SEMICN ;
SEMICN ;
IFTK if
LPARENT (
IDENFR i
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR a
ASSIGN =
INTCON 1
COMMA ,
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
NOT !
IDENFR a
RPARENT )
LBRACE {
RBRACE }
ELSETK else
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR b
LEQ <=
INTCON 0
RPARENT )
LBRACE {
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
EQL ==
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
AND &&
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
OR ||
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IDENFR a
ASSIGN =
IDENFR a
PLUS +
INTCON 1
MINU -
INTCON 3
MULT *
INTCON 4
DIV /
INTCON 3
MOD %
INTCON 2
SEMICN ;
IDENFR a
ASSIGN =
INTCON 1
PLUS +
INTCON 1
SEMICN ;
IDENFR a
ASSIGN =
PLUS +
MINU -
PLUS +
INTCON 1
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "21371295\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
INTCON 0
PLUS +
INTCON 1
SEMICN ;
SEMICN ;
IFTK if
LPARENT (
IDENFR i
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR a
ASSIGN =
INTCON 1
COMMA ,
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
NOT !
IDENFR a
RPARENT )
LBRACE {
RBRACE }
ELSETK else
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR b
LEQ <=
INTCON 0
RPARENT )
LBRACE {
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
EQL ==
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
AND &&
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
OR ||
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IDENFR a
ASSIGN =
IDENFR a
PLUS +
INTCON 1
MINU -
INTCON 3
MULT *
INTCON 4
DIV /
INTCON 3
MOD %
INTCON 2
SEMICN ;
IDENFR a
ASSIGN =
INTCON 1
PLUS +
INTCON 1
SEMICN ;
IDENFR a
ASSIGN =
PLUS +
MINU -
PLUS +
INTCON 1
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "21371295\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
INTCON 0
PLUS +
INTCON 1
SEMICN ;
SEMICN ;
IFTK if
LPARENT (
IDENFR i
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR a
ASSIGN =
INTCON 1
COMMA ,
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
NOT !
IDENFR a
RPARENT )
LBRACE {
RBRACE }
ELSETK else
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR b
LEQ <=
INTCON 0
RPARENT )
LBRACE {
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
EQL ==
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
AND &&
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
OR ||
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IDENFR a
ASSIGN =
IDENFR a
PLUS +
INTCON 1
MINU -
INTCON 3
MULT *
INTCON 4
DIV /
INTCON 3
MOD %
INTCON 2
SEMICN ;
IDENFR a
ASSIGN =
INTCON 1
PLUS +
INTCON 1
SEMICN ;
IDENFR a
ASSIGN =
PLUS +
MINU -
PLUS +
INTCON 1
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "21371295\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
INTCON 0
PLUS +
INTCON 1
SEMICN ;
SEMICN ;
IFTK if
LPARENT (
IDENFR i
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR a
ASSIGN =
INTCON 1
COMMA ,
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
NOT !
IDENFR a
RPARENT )
LBRACE {
RBRACE }
ELSETK else
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR b
LEQ <=
INTCON 0
RPARENT )
LBRACE {
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
EQL ==
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
AND &&
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
OR ||
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IDENFR a
ASSIGN =
IDENFR a
PLUS +
INTCON 1
MINU -
INTCON 3
MULT *
INTCON 4
DIV /
INTCON 3
MOD %
INTCON 2
SEMICN ;
IDENFR a
ASSIGN =
INTCON 1
PLUS +
INTCON 1
SEMICN ;
IDENFR a
ASSIGN =
PLUS +
MINU -
PLUS +
INTCON 1
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "21371295\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
INTCON 0
PLUS +
INTCON 1
SEMICN ;
SEMICN ;
IFTK if
LPARENT (
IDENFR i
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR a
ASSIGN =
INTCON 1
COMMA ,
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
NOT !
IDENFR a
RPARENT )
LBRACE {
RBRACE }
ELSETK else
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR b
LEQ <=
INTCON 0
RPARENT )
LBRACE {
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
EQL ==
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
AND &&
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
OR ||
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IDENFR a
ASSIGN =
IDENFR a
PLUS +
INTCON 1
MINU -
INTCON 3
MULT *
INTCON 4
DIV /
INTCON 3
MOD %
INTCON 2
SEMICN ;
IDENFR a
ASSIGN =
INTCON 1
PLUS +
INTCON 1
SEMICN ;
IDENFR a
ASSIGN =
PLUS +
MINU -
PLUS +
INTCON 1
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "21371295\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
INTCON 0
PLUS +
INTCON 1
SEMICN ;
SEMICN ;
IFTK if
LPARENT (
IDENFR i
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR a
ASSIGN =
INTCON 1
COMMA ,
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
NOT !
IDENFR a
RPARENT )
LBRACE {
RBRACE }
ELSETK else
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR b
LEQ <=
INTCON 0
RPARENT )
LBRACE {
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
EQL ==
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
AND &&
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
OR ||
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IDENFR a
ASSIGN =
IDENFR a
PLUS +
INTCON 1
MINU -
INTCON 3
MULT *
INTCON 4
DIV /
INTCON 3
MOD %
INTCON 2
SEMICN ;
IDENFR a
ASSIGN =
INTCON 1
PLUS +
INTCON 1
SEMICN ;
IDENFR a
ASSIGN =
PLUS +
MINU -
PLUS +
INTCON 1
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "21371295\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
INTCON 0
PLUS +
INTCON 1
SEMICN ;
SEMICN ;
IFTK if
LPARENT (
IDENFR i
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR a
ASSIGN =
INTCON 1
COMMA ,
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
NOT !
IDENFR a
RPARENT )
LBRACE {
RBRACE }
ELSETK else
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR b
LEQ <=
INTCON 0
RPARENT )
LBRACE {
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
EQL ==
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
AND &&
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
OR ||
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IDENFR a
ASSIGN =
IDENFR a
PLUS +
INTCON 1
MINU -
INTCON 3
MULT *
INTCON 4
DIV /
INTCON 3
MOD %
INTCON 2
SEMICN ;
IDENFR a
ASSIGN =
INTCON 1
PLUS +
INTCON 1
SEMICN ;
IDENFR a
ASSIGN =
PLUS +
MINU -
PLUS +
INTCON 1
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "21371295\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
INTCON 0
PLUS +
INTCON 1
SEMICN ;
SEMICN ;
IFTK if
LPARENT (
IDENFR i
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR a
ASSIGN =
INTCON 1
COMMA ,
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
NOT !
IDENFR a
RPARENT )
LBRACE {
RBRACE }
ELSETK else
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR b
LEQ <=
INTCON 0
RPARENT )
LBRACE {
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
EQL ==
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
AND &&
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
OR ||
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IDENFR a
ASSIGN =
IDENFR a
PLUS +
INTCON 1
MINU -
INTCON 3
MULT *
INTCON 4
DIV /
INTCON 3
MOD %
INTCON 2
SEMICN ;
IDENFR a
ASSIGN =
INTCON 1
PLUS +
INTCON 1
SEMICN ;
IDENFR a
ASSIGN =
PLUS +
MINU -
PLUS +
INTCON 1
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "21371295\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
INTCON 0
PLUS +
INTCON 1
SEMICN ;
SEMICN ;
IFTK if
LPARENT (
IDENFR i
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR a
ASSIGN =
INTCON 1
COMMA ,
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
NOT !
IDENFR a
RPARENT )
LBRACE {
RBRACE }
ELSETK else
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR b
LEQ <=
INTCON 0
RPARENT )
LBRACE {
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
EQL ==
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
AND &&
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
OR ||
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IDENFR a
ASSIGN =
IDENFR a
PLUS +
INTCON 1
MINU -
INTCON 3
MULT *
INTCON 4
DIV /
INTCON 3
MOD %
INTCON 2
SEMICN ;
IDENFR a
ASSIGN =
INTCON 1
PLUS +
INTCON 1
SEMICN ;
IDENFR a
ASSIGN =
PLUS +
MINU -
PLUS +
INTCON 1
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "21371295\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
INTCON 0
PLUS +
INTCON 1
SEMICN ;
SEMICN ;
IFTK if
LPARENT (
IDENFR i
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR a
ASSIGN =
INTCON 1
COMMA ,
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
NOT !
IDENFR a
RPARENT )
LBRACE {
RBRACE }
ELSETK else
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR b
LEQ <=
INTCON 0
RPARENT )
LBRACE {
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
EQL ==
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
AND &&
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
OR ||
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IDENFR a
ASSIGN =
IDENFR a
PLUS +
INTCON 1
MINU -
INTCON 3
MULT *
INTCON 4
DIV /
INTCON 3
MOD %
INTCON 2
SEMICN ;
IDENFR a
ASSIGN =
INTCON 1
PLUS +
INTCON 1
SEMICN ;
IDENFR a
ASSIGN =
PLUS +
MINU -
PLUS +
INTCON 1
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "21371295\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
INTCON 0
PLUS +
INTCON 1
SEMICN ;
SEMICN ;
IFTK if
LPARENT (
IDENFR i
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR a
ASSIGN =
INTCON 1
COMMA ,
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
NOT !
IDENFR a
RPARENT )
LBRACE {
RBRACE }
ELSETK else
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR b
LEQ <=
INTCON 0
RPARENT )
LBRACE {
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
EQL ==
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
AND &&
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
OR ||
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IDENFR a
ASSIGN =
IDENFR a
PLUS +
INTCON 1
MINU -
INTCON 3
MULT *
INTCON 4
DIV /
INTCON 3
MOD %
INTCON 2
SEMICN ;
IDENFR a
ASSIGN =
INTCON 1
PLUS +
INTCON 1
SEMICN ;
IDENFR a
ASSIGN =
PLUS +
MINU -
PLUS +
INTCON 1
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "21371295\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
INTCON 0
PLUS +
INTCON 1
SEMICN ;
SEMICN ;
IFTK if
LPARENT (
IDENFR i
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR a
ASSIGN =
INTCON 1
COMMA ,
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
NOT !
IDENFR a
RPARENT )
LBRACE {
RBRACE }
ELSETK else
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR b
LEQ <=
INTCON 0
RPARENT )
LBRACE {
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
EQL ==
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
AND &&
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
OR ||
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IDENFR a
ASSIGN =
IDENFR a
PLUS +
INTCON 1
MINU -
INTCON 3
MULT *
INTCON 4
DIV /
INTCON 3
MOD %
INTCON 2
SEMICN ;
IDENFR a
ASSIGN =
INTCON 1
PLUS +
INTCON 1
SEMICN ;
IDENFR a
ASSIGN =
PLUS +
MINU -
PLUS +
INTCON 1
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "21371295\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
INTCON 0
PLUS +
INTCON 1
SEMICN ;
SEMICN ;
IFTK if
LPARENT (
IDENFR i
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR a
ASSIGN =
INTCON 1
COMMA ,
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
NOT !
IDENFR a
RPARENT )
LBRACE {
RBRACE }
ELSETK else
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR b
LEQ <=
INTCON 0
RPARENT )
LBRACE {
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
EQL ==
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
AND &&
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
OR ||
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IDENFR a
ASSIGN =
IDENFR a
PLUS +
INTCON 1
MINU -
INTCON 3
MULT *
INTCON 4
DIV /
INTCON 3
MOD %
INTCON 2
SEMICN ;
IDENFR a
ASSIGN =
INTCON 1
PLUS +
INTCON 1
SEMICN ;
IDENFR a
ASSIGN =
PLUS +
MINU -
PLUS +
INTCON 1
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "21371295\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
INTCON 0
PLUS +
INTCON 1
SEMICN ;
SEMICN ;
IFTK if
LPARENT (
IDENFR i
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR a
ASSIGN =
INTCON 1
COMMA ,
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
NOT !
IDENFR a
RPARENT )
LBRACE {
RBRACE }
ELSETK else
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR b
LEQ <=
INTCON 0
RPARENT )
LBRACE {
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
EQL ==
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
AND &&
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
OR ||
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IDENFR a
ASSIGN =
IDENFR a
PLUS +
INTCON 1
MINU -
INTCON 3
MULT *
INTCON 4
DIV /
INTCON 3
MOD %
INTCON 2
SEMICN ;
IDENFR a
ASSIGN =
INTCON 1
PLUS +
INTCON 1
SEMICN ;
IDENFR a
ASSIGN =
PLUS +
MINU -
PLUS +
INTCON 1
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "21371295\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
INTCON 0
PLUS +
INTCON 1
SEMICN ;
SEMICN ;
IFTK if
LPARENT (
IDENFR i
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR a
ASSIGN =
INTCON 1
COMMA ,
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
NOT !
IDENFR a
RPARENT )
LBRACE {
RBRACE }
ELSETK else
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR b
LEQ <=
INTCON 0
RPARENT )
LBRACE {
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
EQL ==
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
AND &&
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
OR ||
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IDENFR a
ASSIGN =
IDENFR a
PLUS +
INTCON 1
MINU -
INTCON 3
MULT *
INTCON 4
DIV /
INTCON 3
MOD %
INTCON 2
SEMICN ;
IDENFR a
ASSIGN =
INTCON 1
PLUS +
INTCON 1
SEMICN ;
IDENFR a
ASSIGN =
PLUS +
MINU -
PLUS +
INTCON 1
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "21371295\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
INTCON 0
PLUS +
INTCON 1
SEMICN ;
SEMICN ;
IFTK if
LPARENT (
IDENFR i
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR a
ASSIGN =
INTCON 1
COMMA ,
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
NOT !
IDENFR a
RPARENT )
LBRACE {
RBRACE }
ELSETK else
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR b
LEQ <=
INTCON 0
RPARENT )
LBRACE {
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
EQL ==
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
AND &&
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
OR ||
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IDENFR a
ASSIGN =
IDENFR a
PLUS +
INTCON 1
MINU -
INTCON 3
MULT *
INTCON 4
DIV /
INTCON 3
MOD %
INTCON 2
SEMICN ;
IDENFR a
ASSIGN =
INTCON 1
PLUS +
INTCON 1
SEMICN ;
IDENFR a
ASSIGN =
PLUS +
MINU -
PLUS +
INTCON 1
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "21371295\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
INTCON 0
PLUS +
INTCON 1
SEMICN ;
SEMICN ;
IFTK if
LPARENT (
IDENFR i
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR a
ASSIGN =
INTCON 1
COMMA ,
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
NOT !
IDENFR a
RPARENT )
LBRACE {
RBRACE }
ELSETK else
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR b
LEQ <=
INTCON 0
RPARENT )
LBRACE {
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
EQL ==
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
AND &&
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
OR ||
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IDENFR a
ASSIGN =
IDENFR a
PLUS +
INTCON 1
MINU -
INTCON 3
MULT *
INTCON 4
DIV /
INTCON 3
MOD %
INTCON 2
SEMICN ;
IDENFR a
ASSIGN =
INTCON 1
PLUS +
INTCON 1
SEMICN ;
IDENFR a
ASSIGN =
PLUS +
MINU -
PLUS +
INTCON 1
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "21371295\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
INTCON 0
PLUS +
INTCON 1
SEMICN ;
SEMICN ;
IFTK if
LPARENT (
IDENFR i
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR a
ASSIGN =
INTCON 1
COMMA ,
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
NOT !
IDENFR a
RPARENT )
LBRACE {
RBRACE }
ELSETK else
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR b
LEQ <=
INTCON 0
RPARENT )
LBRACE {
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
EQL ==
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
AND &&
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
OR ||
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IDENFR a
ASSIGN =
IDENFR a
PLUS +
INTCON 1
MINU -
INTCON 3
MULT *
INTCON 4
DIV /
INTCON 3
MOD %
INTCON 2
SEMICN ;
IDENFR a
ASSIGN =
INTCON 1
PLUS +
INTCON 1
SEMICN ;
IDENFR a
ASSIGN =
PLUS +
MINU -
PLUS +
INTCON 1
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "21371295\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
INTCON 0
PLUS +
INTCON 1
SEMICN ;
SEMICN ;
IFTK if
LPARENT (
IDENFR i
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR a
ASSIGN =
INTCON 1
COMMA ,
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
NOT !
IDENFR a
RPARENT )
LBRACE {
RBRACE }
ELSETK else
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR b
LEQ <=
INTCON 0
RPARENT )
LBRACE {
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
EQL ==
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
AND &&
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
OR ||
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IDENFR a
ASSIGN =
IDENFR a
PLUS +
INTCON 1
MINU -
INTCON 3
MULT *
INTCON 4
DIV /
INTCON 3
MOD %
INTCON 2
SEMICN ;
IDENFR a
ASSIGN =
INTCON 1
PLUS +
INTCON 1
SEMICN ;
IDENFR a
ASSIGN =
PLUS +
MINU -
PLUS +
INTCON 1
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "21371295\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
INTCON 0
PLUS +
INTCON 1
SEMICN ;
SEMICN ;
IFTK if
LPARENT (
IDENFR i
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR a
ASSIGN =
INTCON 1
COMMA ,
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
NOT !
IDENFR a
RPARENT )
LBRACE {
RBRACE }
ELSETK else
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR b
LEQ <=
INTCON 0
RPARENT )
LBRACE {
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
EQL ==
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
AND &&
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
OR ||
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IDENFR a
ASSIGN =
IDENFR a
PLUS +
INTCON 1
MINU -
INTCON 3
MULT *
INTCON 4
DIV /
INTCON 3
MOD %
INTCON 2
SEMICN ;
IDENFR a
ASSIGN =
INTCON 1
PLUS +
INTCON 1
SEMICN ;
IDENFR a
ASSIGN =
PLUS +
MINU -
PLUS +
INTCON 1
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "21371295\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
INTCON 0
PLUS +
INTCON 1
SEMICN ;
SEMICN ;
IFTK if
LPARENT (
IDENFR i
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR a
ASSIGN =
INTCON 1
COMMA ,
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
NOT !
IDENFR a
RPARENT )
LBRACE {
RBRACE }
ELSETK else
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR b
LEQ <=
INTCON 0
RPARENT )
LBRACE {
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
EQL ==
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
AND &&
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
OR ||
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IDENFR a
ASSIGN =
IDENFR a
PLUS +
INTCON 1
MINU -
INTCON 3
MULT *
INTCON 4
DIV /
INTCON 3
MOD %
INTCON 2
SEMICN ;
IDENFR a
ASSIGN =
INTCON 1
PLUS +
INTCON 1
SEMICN ;
IDENFR a
ASSIGN =
PLUS +
MINU -
PLUS +
INTCON 1
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "21371295\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
INTCON 0
PLUS +
INTCON 1
SEMICN ;
SEMICN ;
IFTK if
LPARENT (
IDENFR i
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR a
ASSIGN =
INTCON 1
COMMA ,
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
NOT !
IDENFR a
RPARENT )
LBRACE {
RBRACE }
ELSETK else
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR b
LEQ <=
INTCON 0
RPARENT )
LBRACE {
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
EQL ==
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
AND &&
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
OR ||
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IDENFR a
ASSIGN =
IDENFR a
PLUS +
INTCON 1
MINU -
INTCON 3
MULT *
INTCON 4
DIV /
INTCON 3
MOD %
INTCON 2
SEMICN ;
IDENFR a
ASSIGN =
INTCON 1
PLUS +
INTCON 1
SEMICN ;
IDENFR a
ASSIGN =
PLUS +
MINU -
PLUS +
INTCON 1
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "21371295\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
INTCON 0
PLUS +
INTCON 1
SEMICN ;
SEMICN ;
IFTK if
LPARENT (
IDENFR i
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR a
ASSIGN =
INTCON 1
COMMA ,
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
NOT !
IDENFR a
RPARENT )
LBRACE {
RBRACE }
ELSETK else
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR b
LEQ <=
INTCON 0
RPARENT )
LBRACE {
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
EQL ==
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
AND &&
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
OR ||
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IDENFR a
ASSIGN =
IDENFR a
PLUS +
INTCON 1
MINU -
INTCON 3
MULT *
INTCON 4
DIV /
INTCON 3
MOD %
INTCON 2
SEMICN ;
IDENFR a
ASSIGN =
INTCON 1
PLUS +
INTCON 1
SEMICN ;
IDENFR a
ASSIGN =
PLUS +
MINU -
PLUS +
INTCON 1
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "21371295\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
INTCON 0
PLUS +
INTCON 1
SEMICN ;
SEMICN ;
IFTK if
LPARENT (
IDENFR i
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR a
ASSIGN =
INTCON 1
COMMA ,
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
NOT !
IDENFR a
RPARENT )
LBRACE {
RBRACE }
ELSETK else
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR b
LEQ <=
INTCON 0
RPARENT )
LBRACE {
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
EQL ==
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
AND &&
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
OR ||
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IDENFR a
ASSIGN =
IDENFR a
PLUS +
INTCON 1
MINU -
INTCON 3
MULT *
INTCON 4
DIV /
INTCON 3
MOD %
INTCON 2
SEMICN ;
IDENFR a
ASSIGN =
INTCON 1
PLUS +
INTCON 1
SEMICN ;
IDENFR a
ASSIGN =
PLUS +
MINU -
PLUS +
INTCON 1
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "21371295\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
INTCON 0
PLUS +
INTCON 1
SEMICN ;
SEMICN ;
IFTK if
LPARENT (
IDENFR i
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR a
ASSIGN =
INTCON 1
COMMA ,
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
NOT !
IDENFR a
RPARENT )
LBRACE {
RBRACE }
ELSETK else
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR b
LEQ <=
INTCON 0
RPARENT )
LBRACE {
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
EQL ==
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
AND &&
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
OR ||
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IDENFR a
ASSIGN =
IDENFR a
PLUS +
INTCON 1
MINU -
INTCON 3
MULT *
INTCON 4
DIV /
INTCON 3
MOD %
INTCON 2
SEMICN ;
IDENFR a
ASSIGN =
INTCON 1
PLUS +
INTCON 1
SEMICN ;
IDENFR a
ASSIGN =
PLUS +
MINU -
PLUS +
INTCON 1
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
LBRACE {
RBRACE }
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
LBRACE {
RBRACE }
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
LBRACE {
RBRACE }
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
LBRACE {
RBRACE }
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
LBRACE {
RBRACE }
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
LBRACE {
RBRACE }
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "21371295\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
INTCON 0
PLUS +
INTCON 1
SEMICN ;
SEMICN ;
IFTK if
LPARENT (
IDENFR i
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR a
ASSIGN =
INTCON 1
COMMA ,
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
NOT !
IDENFR a
RPARENT )
LBRACE {
RBRACE }
ELSETK else
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR b
LEQ <=
INTCON 0
RPARENT )
LBRACE {
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
EQL ==
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
AND &&
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
OR ||
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IDENFR a
ASSIGN =
IDENFR a
PLUS +
INTCON 1
MINU -
INTCON 3
MULT *
INTCON 4
DIV /
INTCON 3
MOD %
INTCON 2
SEMICN ;
IDENFR a
ASSIGN =
INTCON 1
PLUS +
INTCON 1
SEMICN ;
IDENFR a
ASSIGN =
PLUS +
MINU -
PLUS +
INTCON 1
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "21371295\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
INTCON 0
PLUS +
INTCON 1
SEMICN ;
SEMICN ;
IFTK if
LPARENT (
IDENFR i
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR a
ASSIGN =
INTCON 1
COMMA ,
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
NOT !
IDENFR a
RPARENT )
LBRACE {
RBRACE }
ELSETK else
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR b
LEQ <=
INTCON 0
RPARENT )
LBRACE {
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
EQL ==
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
AND &&
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
OR ||
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IDENFR a
ASSIGN =
IDENFR a
PLUS +
INTCON 1
MINU -
INTCON 3
MULT *
INTCON 4
DIV /
INTCON 3
MOD %
INTCON 2
SEMICN ;
IDENFR a
ASSIGN =
INTCON 1
PLUS +
INTCON 1
SEMICN ;
IDENFR a
ASSIGN =
PLUS +
MINU -
PLUS +
INTCON 1
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "21371295\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
INTCON 0
PLUS +
INTCON 1
SEMICN ;
SEMICN ;
IFTK if
LPARENT (
IDENFR i
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR a
ASSIGN =
INTCON 1
COMMA ,
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
NOT !
IDENFR a
RPARENT )
LBRACE {
RBRACE }
ELSETK else
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR b
LEQ <=
INTCON 0
RPARENT )
LBRACE {
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
EQL ==
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
AND &&
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
OR ||
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IDENFR a
ASSIGN =
IDENFR a
PLUS +
INTCON 1
MINU -
INTCON 3
MULT *
INTCON 4
DIV /
INTCON 3
MOD %
INTCON 2
SEMICN ;
IDENFR a
ASSIGN =
INTCON 1
PLUS +
INTCON 1
SEMICN ;
IDENFR a
ASSIGN =
PLUS +
MINU -
PLUS +
INTCON 1
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "21371295\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
INTCON 0
PLUS +
INTCON 1
SEMICN ;
SEMICN ;
IFTK if
LPARENT (
IDENFR i
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR a
ASSIGN =
INTCON 1
COMMA ,
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
NOT !
IDENFR a
RPARENT )
LBRACE {
RBRACE }
ELSETK else
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR b
LEQ <=
INTCON 0
RPARENT )
LBRACE {
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
EQL ==
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
AND &&
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
OR ||
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IDENFR a
ASSIGN =
IDENFR a
PLUS +
INTCON 1
MINU -
INTCON 3
MULT *
INTCON 4
DIV /
INTCON 3
MOD %
INTCON 2
SEMICN ;
IDENFR a
ASSIGN =
INTCON 1
PLUS +
INTCON 1
SEMICN ;
IDENFR a
ASSIGN =
PLUS +
MINU -
PLUS +
INTCON 1
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "21371295\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
INTCON 0
PLUS +
INTCON 1
SEMICN ;
SEMICN ;
IFTK if
LPARENT (
IDENFR i
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR a
ASSIGN =
INTCON 1
COMMA ,
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
NOT !
IDENFR a
RPARENT )
LBRACE {
RBRACE }
ELSETK else
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR b
LEQ <=
INTCON 0
RPARENT )
LBRACE {
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
EQL ==
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
AND &&
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
OR ||
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IDENFR a
ASSIGN =
IDENFR a
PLUS +
INTCON 1
MINU -
INTCON 3
MULT *
INTCON 4
DIV /
INTCON 3
MOD %
INTCON 2
SEMICN ;
IDENFR a
ASSIGN =
INTCON 1
PLUS +
INTCON 1
SEMICN ;
IDENFR a
ASSIGN =
PLUS +
MINU -
PLUS +
INTCON 1
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "21371295\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
INTCON 0
PLUS +
INTCON 1
SEMICN ;
SEMICN ;
IFTK if
LPARENT (
IDENFR i
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR a
ASSIGN =
INTCON 1
COMMA ,
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
NOT !
IDENFR a
RPARENT )
LBRACE {
RBRACE }
ELSETK else
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR b
LEQ <=
INTCON 0
RPARENT )
LBRACE {
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
EQL ==
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
AND &&
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
OR ||
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IDENFR a
ASSIGN =
IDENFR a
PLUS +
INTCON 1
MINU -
INTCON 3
MULT *
INTCON 4
DIV /
INTCON 3
MOD %
INTCON 2
SEMICN ;
IDENFR a
ASSIGN =
INTCON 1
PLUS +
INTCON 1
SEMICN ;
IDENFR a
ASSIGN =
PLUS +
MINU -
PLUS +
INTCON 1
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "21371295\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
INTCON 0
PLUS +
INTCON 1
SEMICN ;
SEMICN ;
IFTK if
LPARENT (
IDENFR i
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR a
ASSIGN =
INTCON 1
COMMA ,
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
NOT !
IDENFR a
RPARENT )
LBRACE {
RBRACE }
ELSETK else
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR b
LEQ <=
INTCON 0
RPARENT )
LBRACE {
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
EQL ==
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
AND &&
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
OR ||
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IDENFR a
ASSIGN =
IDENFR a
PLUS +
INTCON 1
MINU -
INTCON 3
MULT *
INTCON 4
DIV /
INTCON 3
MOD %
INTCON 2
SEMICN ;
IDENFR a
ASSIGN =
INTCON 1
PLUS +
INTCON 1
SEMICN ;
IDENFR a
ASSIGN =
PLUS +
MINU -
PLUS +
INTCON 1
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
INTCON 0
PLUS +
INTCON 1
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
INTCON 0
PLUS +
INTCON 1
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
INTCON 0
PLUS +
INTCON 1
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
INTCON 0
PLUS +
INTCON 1
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "21371295\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
INTCON 0
PLUS +
INTCON 1
SEMICN ;
SEMICN ;
IFTK if
LPARENT (
IDENFR i
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR a
ASSIGN =
INTCON 1
COMMA ,
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
NOT !
IDENFR a
RPARENT )
LBRACE {
RBRACE }
ELSETK else
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR b
LEQ <=
INTCON 0
RPARENT )
LBRACE {
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
EQL ==
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
AND &&
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
OR ||
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IDENFR a
ASSIGN =
IDENFR a
PLUS +
INTCON 1
MINU -
INTCON 3
MULT *
INTCON 4
DIV /
INTCON 3
MOD %
INTCON 2
SEMICN ;
IDENFR a
ASSIGN =
INTCON 1
PLUS +
INTCON 1
SEMICN ;
IDENFR a
ASSIGN =
PLUS +
MINU -
PLUS +
INTCON 1
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
INTCON 0
PLUS +
INTCON 1
SEMICN ;
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
INTCON 0
PLUS +
INTCON 1
SEMICN ;
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
INTCON 0
PLUS +
INTCON 1
SEMICN ;
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
INTCON 0
PLUS +
INTCON 1
SEMICN ;
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
INTCON 0
PLUS +
INTCON 1
SEMICN ;
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
INTCON 0
PLUS +
INTCON 1
SEMICN ;
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "21371295\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
INTCON 0
PLUS +
INTCON 1
SEMICN ;
SEMICN ;
IFTK if
LPARENT (
IDENFR i
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR a
ASSIGN =
INTCON 1
COMMA ,
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
NOT !
IDENFR a
RPARENT )
LBRACE {
RBRACE }
ELSETK else
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR b
LEQ <=
INTCON 0
RPARENT )
LBRACE {
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
EQL ==
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
AND &&
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
OR ||
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IDENFR a
ASSIGN =
IDENFR a
PLUS +
INTCON 1
MINU -
INTCON 3
MULT *
INTCON 4
DIV /
INTCON 3
MOD %
INTCON 2
SEMICN ;
IDENFR a
ASSIGN =
INTCON 1
PLUS +
INTCON 1
SEMICN ;
IDENFR a
ASSIGN =
PLUS +
MINU -
PLUS +
INTCON 1
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
GRE >
INTCON 0
RPARENT )
LBRACE {
SEMICN ;
RBRACE }
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
GRE >
INTCON 0
RPARENT )
LBRACE {
SEMICN ;
RBRACE }
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
GRE >
INTCON 0
RPARENT )
LBRACE {
SEMICN ;
RBRACE }
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
GRE >
INTCON 0
RPARENT )
LBRACE {
SEMICN ;
RBRACE }
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
GRE >
INTCON 0
RPARENT )
LBRACE {
SEMICN ;
RBRACE }
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
GRE >
INTCON 0
RPARENT )
LBRACE {
SEMICN ;
RBRACE }
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
GRE >
INTCON 0
RPARENT )
LBRACE {
SEMICN ;
RBRACE }
RBRACE }
CONSTTK const
INTTK int
IDENFR c
ASSIGN =
INTCON 10
SEMICN ;
INTTK int
IDENFR x
SEMICN ;
VOIDTK void
IDENFR f1
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR i
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
INTCON 5
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IDENFR x
ASSIGN =
IDENFR x
PLUS +
INTCON 1
SEMICN ;
RBRACE }
RBRACE }
INTTK int
IDENFR f2
LPARENT (
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR x
GRE >
INTCON 0
RPARENT )
LBRACE {
RETURNTK return
MINU -
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
RETURNTK return
INTCON 1
SEMICN ;
RBRACE }
RETURNTK return
IDENFR x
SEMICN ;
RBRACE }
VOIDTK void
IDENFR f3
LPARENT (
INTTK int
IDENFR a
RPARENT )
LBRACE {
IDENFR x
ASSIGN =
IDENFR a
SEMICN ;
RBRACE }
INTTK int
IDENFR f4
LPARENT (
INTTK int
IDENFR a
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR a
GRE >
INTCON 0
RPARENT )
RETURNTK return
PLUS +
IDENFR a
SEMICN ;
RETURNTK return
MINU -
IDENFR a
SEMICN ;
RBRACE }
INTTK int
IDENFR f5
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
COMMA ,
INTTK int
IDENFR c
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR a
GRE >
IDENFR b
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR a
GRE >
IDENFR c
RPARENT )
RETURNTK return
IDENFR a
SEMICN ;
ELSETK else
RETURNTK return
IDENFR c
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR b
GRE >
IDENFR c
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR b
GRE >
IDENFR a
RPARENT )
RETURNTK return
IDENFR b
SEMICN ;
ELSETK else
RETURNTK return
IDENFR a
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR c
GRE >
IDENFR a
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR c
GRE >
IDENFR b
RPARENT )
RETURNTK return
IDENFR c
SEMICN ;
ELSETK else
RETURNTK return
IDENFR b
SEMICN ;
RBRACE }
RETURNTK return
IDENFR f4
LPARENT (
IDENFR a
RPARENT )
SEMICN ;
RBRACE }
INTTK int
IDENFR f6
LPARENT (
INTTK int
IDENFR a
RPARENT )
LBRACE {
IDENFR x
ASSIGN =
IDENFR x
PLUS +
IDENFR a
SEMICN ;
IFTK if
LPARENT (
IDENFR a
EQL ==
INTCON 0
RPARENT )
LBRACE {
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
RETURNTK return
IDENFR f6
LPARENT (
IDENFR a
MINU -
INTCON 1
RPARENT )
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "21373457\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR i
COMMA ,
IDENFR j
ASSIGN =
INTCON 5
COMMA ,
IDENFR k
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
INTCON 5
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 5
RPARENT )
PRINTFTK printf
LPARENT (
STRCON "Empty for pass!\n"
RPARENT )
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
INTCON 2
SEMICN ;
RPARENT )
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 2
SEMICN ;
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 4
RPARENT )
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
IDENFR i
LSS <
INTCON 5
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
LSS <
INTCON 5
RPARENT )
CONTINUETK continue
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 2
SEMICN ;
RBRACE }
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 5
SEMICN ;
SEMICN ;
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 6
RPARENT )
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
IDENFR i
LSS <
INTCON 7
SEMICN ;
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 8
RPARENT )
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
SEMICN ;
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 10
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "One stmt for pass!\n"
RPARENT )
SEMICN ;
BREAKTK break
SEMICN ;
RBRACE }
RBRACE }
IDENFR f1
LPARENT (
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR x
EQL ==
INTCON 5
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR f2
LPARENT (
RPARENT )
EQL ==
MINU -
INTCON 1
RPARENT )
PRINTFTK printf
LPARENT (
STRCON "Basic for and no params function pass!\n"
RPARENT )
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "Please input 5 number (no zero)\n"
RPARENT )
SEMICN ;
IDENFR x
ASSIGN =
MINU -
INTCON 1
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
MULT *
IDENFR i
LSS <
IDENFR j
MULT *
IDENFR j
DIV /
LPARENT (
INTCON 5
MINU -
INTCON 4
RPARENT )
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IDENFR k
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR f3
LPARENT (
IDENFR f4
LPARENT (
IDENFR k
RPARENT )
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR x
LSS <
INTCON 0
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR x
GRE >
INTCON 0
RPARENT )
LBRACE {
CONTINUETK continue
SEMICN ;
RBRACE }
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR x
GEQ >=
INTCON 0
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "Basic for and one params function pass!\n"
RPARENT )
SEMICN ;
RBRACE }
IDENFR i
ASSIGN =
INTCON 10
SEMICN ;
IDENFR j
ASSIGN =
INTCON 5
SEMICN ;
IDENFR k
ASSIGN =
INTCON 7
SEMICN ;
IFTK if
LPARENT (
IDENFR f5
LPARENT (
IDENFR i
COMMA ,
IDENFR j
COMMA ,
IDENFR k
RPARENT )
EQL ==
IDENFR i
RPARENT )
PRINTFTK printf
LPARENT (
STRCON "Basic for and multiple params function pass!\n"
RPARENT )
SEMICN ;
IDENFR x
ASSIGN =
INTCON 0
SEMICN ;
IDENFR f6
LPARENT (
IDENFR c
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "Recursive Success, count = %d\n"
COMMA ,
IDENFR x
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "This C level file include decl, if, for ,continue, break, basic LOrExp. No block\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "Pass Success!"
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
CONSTTK const
INTTK int
IDENFR c
ASSIGN =
INTCON 10
SEMICN ;
INTTK int
IDENFR x
SEMICN ;
VOIDTK void
IDENFR f1
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR i
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
INTCON 5
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IDENFR x
ASSIGN =
IDENFR x
PLUS +
INTCON 1
SEMICN ;
RBRACE }
RBRACE }
INTTK int
IDENFR f2
LPARENT (
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR x
GRE >
INTCON 0
RPARENT )
LBRACE {
RETURNTK return
MINU -
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
RETURNTK return
INTCON 1
SEMICN ;
RBRACE }
RETURNTK return
IDENFR x
SEMICN ;
RBRACE }
VOIDTK void
IDENFR f3
LPARENT (
INTTK int
IDENFR a
RPARENT )
LBRACE {
IDENFR x
ASSIGN =
IDENFR a
SEMICN ;
RBRACE }
INTTK int
IDENFR f4
LPARENT (
INTTK int
IDENFR a
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR a
GRE >
INTCON 0
RPARENT )
RETURNTK return
PLUS +
IDENFR a
SEMICN ;
RETURNTK return
MINU -
IDENFR a
SEMICN ;
RBRACE }
INTTK int
IDENFR f5
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
COMMA ,
INTTK int
IDENFR c
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR a
GRE >
IDENFR b
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR a
GRE >
IDENFR c
RPARENT )
RETURNTK return
IDENFR a
SEMICN ;
ELSETK else
RETURNTK return
IDENFR c
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR b
GRE >
IDENFR c
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR b
GRE >
IDENFR a
RPARENT )
RETURNTK return
IDENFR b
SEMICN ;
ELSETK else
RETURNTK return
IDENFR a
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR c
GRE >
IDENFR a
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR c
GRE >
IDENFR b
RPARENT )
RETURNTK return
IDENFR c
SEMICN ;
ELSETK else
RETURNTK return
IDENFR b
SEMICN ;
RBRACE }
RETURNTK return
IDENFR f4
LPARENT (
IDENFR a
RPARENT )
SEMICN ;
RBRACE }
INTTK int
IDENFR f6
LPARENT (
INTTK int
IDENFR a
RPARENT )
LBRACE {
IDENFR x
ASSIGN =
IDENFR x
PLUS +
IDENFR a
SEMICN ;
IFTK if
LPARENT (
IDENFR a
EQL ==
INTCON 0
RPARENT )
LBRACE {
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
RETURNTK return
IDENFR f6
LPARENT (
IDENFR a
MINU -
INTCON 1
RPARENT )
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "21373457\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR i
COMMA ,
IDENFR j
ASSIGN =
INTCON 5
COMMA ,
IDENFR k
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
INTCON 5
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 5
RPARENT )
PRINTFTK printf
LPARENT (
STRCON "Empty for pass!\n"
RPARENT )
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
INTCON 2
SEMICN ;
RPARENT )
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 2
SEMICN ;
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 4
RPARENT )
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
IDENFR i
LSS <
INTCON 5
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
LSS <
INTCON 5
RPARENT )
CONTINUETK continue
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 2
SEMICN ;
RBRACE }
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 5
SEMICN ;
SEMICN ;
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 6
RPARENT )
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
IDENFR i
LSS <
INTCON 7
SEMICN ;
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 8
RPARENT )
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
SEMICN ;
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 10
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "One stmt for pass!\n"
RPARENT )
SEMICN ;
BREAKTK break
SEMICN ;
RBRACE }
RBRACE }
IDENFR f1
LPARENT (
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR x
EQL ==
INTCON 5
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR f2
LPARENT (
RPARENT )
EQL ==
MINU -
INTCON 1
RPARENT )
PRINTFTK printf
LPARENT (
STRCON "Basic for and no params function pass!\n"
RPARENT )
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "Please input 5 number (no zero)\n"
RPARENT )
SEMICN ;
IDENFR x
ASSIGN =
MINU -
INTCON 1
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
MULT *
IDENFR i
LSS <
IDENFR j
MULT *
IDENFR j
DIV /
LPARENT (
INTCON 5
MINU -
INTCON 4
RPARENT )
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IDENFR k
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR f3
LPARENT (
IDENFR f4
LPARENT (
IDENFR k
RPARENT )
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR x
LSS <
INTCON 0
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR x
GRE >
INTCON 0
RPARENT )
LBRACE {
CONTINUETK continue
SEMICN ;
RBRACE }
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR x
GEQ >=
INTCON 0
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "Basic for and one params function pass!\n"
RPARENT )
SEMICN ;
RBRACE }
IDENFR i
ASSIGN =
INTCON 10
SEMICN ;
IDENFR j
ASSIGN =
INTCON 5
SEMICN ;
IDENFR k
ASSIGN =
INTCON 7
SEMICN ;
IFTK if
LPARENT (
IDENFR f5
LPARENT (
IDENFR i
COMMA ,
IDENFR j
COMMA ,
IDENFR k
RPARENT )
EQL ==
IDENFR i
RPARENT )
PRINTFTK printf
LPARENT (
STRCON "Basic for and multiple params function pass!\n"
RPARENT )
SEMICN ;
IDENFR x
ASSIGN =
INTCON 0
SEMICN ;
IDENFR f6
LPARENT (
IDENFR c
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "Recursive Success, count = %d\n"
COMMA ,
IDENFR x
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "This C level file include decl, if, for ,continue, break, basic LOrExp. No block\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "Pass Success!"
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "21371295\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
INTCON 0
PLUS +
INTCON 1
SEMICN ;
SEMICN ;
IFTK if
LPARENT (
IDENFR i
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR a
ASSIGN =
INTCON 1
COMMA ,
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
NOT !
IDENFR a
RPARENT )
LBRACE {
RBRACE }
ELSETK else
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR b
LEQ <=
INTCON 0
RPARENT )
LBRACE {
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
EQL ==
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
AND &&
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
OR ||
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IDENFR a
ASSIGN =
IDENFR a
PLUS +
INTCON 1
MINU -
INTCON 3
MULT *
INTCON 4
DIV /
INTCON 3
MOD %
INTCON 2
SEMICN ;
IDENFR a
ASSIGN =
INTCON 1
PLUS +
INTCON 1
SEMICN ;
IDENFR a
ASSIGN =
PLUS +
MINU -
PLUS +
INTCON 1
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
CONSTTK const
INTTK int
IDENFR c
ASSIGN =
INTCON 10
SEMICN ;
INTTK int
IDENFR x
SEMICN ;
VOIDTK void
IDENFR f1
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR i
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
INTCON 5
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IDENFR x
ASSIGN =
IDENFR x
PLUS +
INTCON 1
SEMICN ;
RBRACE }
RBRACE }
INTTK int
IDENFR f2
LPARENT (
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR x
GRE >
INTCON 0
RPARENT )
LBRACE {
RETURNTK return
MINU -
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
RETURNTK return
INTCON 1
SEMICN ;
RBRACE }
RETURNTK return
IDENFR x
SEMICN ;
RBRACE }
VOIDTK void
IDENFR f3
LPARENT (
INTTK int
IDENFR a
RPARENT )
LBRACE {
IDENFR x
ASSIGN =
IDENFR a
SEMICN ;
RBRACE }
INTTK int
IDENFR f4
LPARENT (
INTTK int
IDENFR a
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR a
GRE >
INTCON 0
RPARENT )
RETURNTK return
PLUS +
IDENFR a
SEMICN ;
RETURNTK return
MINU -
IDENFR a
SEMICN ;
RBRACE }
INTTK int
IDENFR f5
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
COMMA ,
INTTK int
IDENFR c
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR a
GRE >
IDENFR b
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR a
GRE >
IDENFR c
RPARENT )
RETURNTK return
IDENFR a
SEMICN ;
ELSETK else
RETURNTK return
IDENFR c
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR b
GRE >
IDENFR c
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR b
GRE >
IDENFR a
RPARENT )
RETURNTK return
IDENFR b
SEMICN ;
ELSETK else
RETURNTK return
IDENFR a
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR c
GRE >
IDENFR a
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR c
GRE >
IDENFR b
RPARENT )
RETURNTK return
IDENFR c
SEMICN ;
ELSETK else
RETURNTK return
IDENFR b
SEMICN ;
RBRACE }
RETURNTK return
IDENFR f4
LPARENT (
IDENFR a
RPARENT )
SEMICN ;
RBRACE }
INTTK int
IDENFR f6
LPARENT (
INTTK int
IDENFR a
RPARENT )
LBRACE {
IDENFR x
ASSIGN =
IDENFR x
PLUS +
IDENFR a
SEMICN ;
IFTK if
LPARENT (
IDENFR a
EQL ==
INTCON 0
RPARENT )
LBRACE {
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
RETURNTK return
IDENFR f6
LPARENT (
IDENFR a
MINU -
INTCON 1
RPARENT )
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "21373457\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR i
COMMA ,
IDENFR j
ASSIGN =
INTCON 5
COMMA ,
IDENFR k
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
INTCON 5
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 5
RPARENT )
PRINTFTK printf
LPARENT (
STRCON "Empty for pass!\n"
RPARENT )
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
INTCON 2
SEMICN ;
RPARENT )
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 2
SEMICN ;
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 4
RPARENT )
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
IDENFR i
LSS <
INTCON 5
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
LSS <
INTCON 5
RPARENT )
CONTINUETK continue
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 2
SEMICN ;
RBRACE }
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 5
SEMICN ;
SEMICN ;
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 6
RPARENT )
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
IDENFR i
LSS <
INTCON 7
SEMICN ;
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 8
RPARENT )
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
SEMICN ;
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 10
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "One stmt for pass!\n"
RPARENT )
SEMICN ;
BREAKTK break
SEMICN ;
RBRACE }
RBRACE }
IDENFR f1
LPARENT (
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR x
EQL ==
INTCON 5
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR f2
LPARENT (
RPARENT )
EQL ==
MINU -
INTCON 1
RPARENT )
PRINTFTK printf
LPARENT (
STRCON "Basic for and no params function pass!\n"
RPARENT )
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "Please input 5 number (no zero)\n"
RPARENT )
SEMICN ;
IDENFR x
ASSIGN =
MINU -
INTCON 1
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
MULT *
IDENFR i
LSS <
IDENFR j
MULT *
IDENFR j
DIV /
LPARENT (
INTCON 5
MINU -
INTCON 4
RPARENT )
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IDENFR k
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR f3
LPARENT (
IDENFR f4
LPARENT (
IDENFR k
RPARENT )
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR x
LSS <
INTCON 0
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR x
GRE >
INTCON 0
RPARENT )
LBRACE {
CONTINUETK continue
SEMICN ;
RBRACE }
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR x
GEQ >=
INTCON 0
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "Basic for and one params function pass!\n"
RPARENT )
SEMICN ;
RBRACE }
IDENFR i
ASSIGN =
INTCON 10
SEMICN ;
IDENFR j
ASSIGN =
INTCON 5
SEMICN ;
IDENFR k
ASSIGN =
INTCON 7
SEMICN ;
IFTK if
LPARENT (
IDENFR f5
LPARENT (
IDENFR i
COMMA ,
IDENFR j
COMMA ,
IDENFR k
RPARENT )
EQL ==
IDENFR i
RPARENT )
PRINTFTK printf
LPARENT (
STRCON "Basic for and multiple params function pass!\n"
RPARENT )
SEMICN ;
IDENFR x
ASSIGN =
INTCON 0
SEMICN ;
IDENFR f6
LPARENT (
IDENFR c
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "Recursive Success, count = %d\n"
COMMA ,
IDENFR x
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "This C level file include decl, if, for ,continue, break, basic LOrExp. No block\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "Pass Success!"
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
CONSTTK const
INTTK int
IDENFR c
ASSIGN =
INTCON 10
SEMICN ;
INTTK int
IDENFR x
SEMICN ;
VOIDTK void
IDENFR f1
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR i
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
INTCON 5
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IDENFR x
ASSIGN =
IDENFR x
PLUS +
INTCON 1
SEMICN ;
RBRACE }
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
IDENFR x
ASSIGN =
INTCON 0
SEMICN ;
IDENFR f1
LPARENT (
RPARENT )
SEMICN ;
RETURNTK return
IDENFR x
SEMICN ;
RBRACE }
RBRACE }
CONSTTK const
INTTK int
IDENFR c
ASSIGN =
INTCON 10
SEMICN ;
INTTK int
IDENFR x
SEMICN ;
VOIDTK void
IDENFR f1
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR i
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
INTCON 5
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IDENFR x
ASSIGN =
IDENFR x
PLUS +
INTCON 1
SEMICN ;
RBRACE }
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
IDENFR x
ASSIGN =
INTCON 0
SEMICN ;
IDENFR f1
LPARENT (
RPARENT )
SEMICN ;
RETURNTK return
IDENFR x
SEMICN ;
RBRACE }
CONSTTK const
INTTK int
IDENFR c
ASSIGN =
INTCON 10
SEMICN ;
CONSTTK const
INTTK int
IDENFR c
ASSIGN =
INTCON 10
SEMICN ;
INTTK int
IDENFR x
SEMICN ;
VOIDTK void
IDENFR f1
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR i
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
INTCON 5
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IDENFR x
ASSIGN =
IDENFR x
PLUS +
INTCON 1
SEMICN ;
RBRACE }
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
IDENFR x
ASSIGN =
INTCON 0
SEMICN ;
IDENFR f1
LPARENT (
RPARENT )
SEMICN ;
RETURNTK return
IDENFR x
SEMICN ;
RBRACE }
CONSTTK const
INTTK int
IDENFR c
ASSIGN =
INTCON 10
SEMICN ;
INTTK int
IDENFR x
SEMICN ;
VOIDTK void
IDENFR f1
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR i
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
INTCON 5
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IDENFR x
ASSIGN =
IDENFR x
PLUS +
INTCON 1
SEMICN ;
RBRACE }
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
IDENFR x
ASSIGN =
INTCON 0
SEMICN ;
IDENFR f1
LPARENT (
RPARENT )
SEMICN ;
RETURNTK return
IDENFR x
SEMICN ;
RBRACE }
CONSTTK const
INTTK int
IDENFR c
ASSIGN =
INTCON 10
SEMICN ;
INTTK int
IDENFR x
SEMICN ;
VOIDTK void
IDENFR f1
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR i
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
INTCON 5
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IDENFR x
ASSIGN =
IDENFR x
PLUS +
INTCON 1
SEMICN ;
RBRACE }
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
IDENFR x
ASSIGN =
INTCON 0
SEMICN ;
IDENFR f1
LPARENT (
RPARENT )
SEMICN ;
RETURNTK return
IDENFR x
SEMICN ;
RBRACE }
CONSTTK const
INTTK int
IDENFR c
ASSIGN =
INTCON 10
SEMICN ;
INTTK int
IDENFR x
SEMICN ;
VOIDTK void
IDENFR f1
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR i
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
INTCON 5
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IDENFR x
ASSIGN =
IDENFR x
PLUS +
INTCON 1
SEMICN ;
RBRACE }
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
IDENFR x
ASSIGN =
INTCON 0
SEMICN ;
IDENFR f1
LPARENT (
RPARENT )
SEMICN ;
RETURNTK return
IDENFR x
SEMICN ;
RBRACE }
CONSTTK const
INTTK int
IDENFR c
ASSIGN =
INTCON 10
SEMICN ;
INTTK int
IDENFR x
SEMICN ;
VOIDTK void
IDENFR f1
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR i
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
INTCON 5
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IDENFR x
ASSIGN =
IDENFR x
PLUS +
INTCON 1
SEMICN ;
RBRACE }
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
IDENFR x
ASSIGN =
INTCON 0
SEMICN ;
IDENFR f1
LPARENT (
RPARENT )
SEMICN ;
RETURNTK return
IDENFR x
SEMICN ;
RBRACE }
VOIDTK void
IDENFR f1
LPARENT (
RPARENT )
LBRACE {
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
INTCON 5
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IDENFR x
ASSIGN =
IDENFR x
PLUS +
INTCON 1
SEMICN ;
RBRACE }
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
IDENFR x
ASSIGN =
INTCON 0
SEMICN ;
IDENFR f1
LPARENT (
RPARENT )
SEMICN ;
RETURNTK return
IDENFR x
SEMICN ;
RBRACE }
VOIDTK void
IDENFR f1
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR i
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
INTCON 5
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IDENFR x
ASSIGN =
IDENFR x
PLUS +
INTCON 1
SEMICN ;
RBRACE }
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
IDENFR x
ASSIGN =
INTCON 0
SEMICN ;
IDENFR f1
LPARENT (
RPARENT )
SEMICN ;
RETURNTK return
IDENFR x
SEMICN ;
RBRACE }
VOIDTK void
IDENFR f1
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR i
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
INTCON 5
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IDENFR x
ASSIGN =
IDENFR x
PLUS +
INTCON 1
SEMICN ;
RBRACE }
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
IDENFR x
ASSIGN =
INTCON 0
SEMICN ;
IDENFR f1
LPARENT (
RPARENT )
SEMICN ;
RETURNTK return
IDENFR x
SEMICN ;
RBRACE }
VOIDTK void
IDENFR f1
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR i
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
INTCON 5
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IDENFR x
ASSIGN =
IDENFR x
PLUS +
INTCON 1
SEMICN ;
RBRACE }
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
IDENFR x
ASSIGN =
INTCON 0
SEMICN ;
IDENFR f1
LPARENT (
RPARENT )
SEMICN ;
RETURNTK return
IDENFR x
SEMICN ;
RBRACE }
VOIDTK void
IDENFR f1
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR i
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
INTCON 5
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IDENFR x
ASSIGN =
IDENFR x
PLUS +
INTCON 1
SEMICN ;
RBRACE }
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
IDENFR x
ASSIGN =
INTCON 0
SEMICN ;
IDENFR f1
LPARENT (
RPARENT )
SEMICN ;
RETURNTK return
IDENFR x
SEMICN ;
RBRACE }
VOIDTK void
IDENFR f1
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR i
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
INTCON 5
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IDENFR x
ASSIGN =
IDENFR x
PLUS +
INTCON 1
SEMICN ;
RBRACE }
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
IDENFR x
ASSIGN =
INTCON 0
SEMICN ;
IDENFR f1
LPARENT (
RPARENT )
SEMICN ;
RETURNTK return
IDENFR x
SEMICN ;
RBRACE }
VOIDTK void
IDENFR f1
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR i
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
INTCON 5
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IDENFR x
ASSIGN =
IDENFR x
PLUS +
INTCON 1
SEMICN ;
RBRACE }
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
IDENFR x
ASSIGN =
INTCON 0
SEMICN ;
IDENFR f1
LPARENT (
RPARENT )
SEMICN ;
RETURNTK return
IDENFR x
SEMICN ;
RBRACE }
VOIDTK void
IDENFR f1
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR i
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
INTCON 5
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IDENFR x
ASSIGN =
IDENFR x
PLUS +
INTCON 1
SEMICN ;
RBRACE }
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
IDENFR x
ASSIGN =
INTCON 0
SEMICN ;
IDENFR f1
LPARENT (
RPARENT )
SEMICN ;
RETURNTK return
IDENFR x
SEMICN ;
RBRACE }
VOIDTK void
IDENFR f1
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR i
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
INTCON 5
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IDENFR x
ASSIGN =
IDENFR x
PLUS +
INTCON 1
SEMICN ;
RBRACE }
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
IDENFR x
ASSIGN =
INTCON 0
SEMICN ;
IDENFR f1
LPARENT (
RPARENT )
SEMICN ;
RETURNTK return
IDENFR x
SEMICN ;
RBRACE }
VOIDTK void
IDENFR f1
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR i
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
INTCON 5
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IDENFR x
ASSIGN =
IDENFR x
PLUS +
INTCON 1
SEMICN ;
RBRACE }
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
IDENFR x
ASSIGN =
INTCON 0
SEMICN ;
IDENFR f1
LPARENT (
RPARENT )
SEMICN ;
RETURNTK return
IDENFR x
SEMICN ;
RBRACE }
VOIDTK void
IDENFR f1
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR i
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
INTCON 5
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IDENFR x
ASSIGN =
IDENFR x
PLUS +
INTCON 1
SEMICN ;
RBRACE }
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
IDENFR x
ASSIGN =
INTCON 0
SEMICN ;
IDENFR f1
LPARENT (
RPARENT )
SEMICN ;
RETURNTK return
IDENFR x
SEMICN ;
RBRACE }
VOIDTK void
IDENFR f1
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR i
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
INTCON 5
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IDENFR x
ASSIGN =
IDENFR x
PLUS +
INTCON 1
SEMICN ;
RBRACE }
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
IDENFR x
ASSIGN =
INTCON 0
SEMICN ;
IDENFR f1
LPARENT (
RPARENT )
SEMICN ;
RETURNTK return
IDENFR x
SEMICN ;
RBRACE }
VOIDTK void
IDENFR f1
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR i
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
INTCON 5
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IDENFR x
ASSIGN =
IDENFR x
PLUS +
INTCON 1
SEMICN ;
RBRACE }
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
IDENFR x
ASSIGN =
INTCON 0
SEMICN ;
IDENFR f1
LPARENT (
RPARENT )
SEMICN ;
RETURNTK return
IDENFR x
SEMICN ;
RBRACE }
VOIDTK void
IDENFR f1
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR i
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
INTCON 5
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IDENFR x
ASSIGN =
IDENFR x
PLUS +
INTCON 1
SEMICN ;
RBRACE }
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
IDENFR x
ASSIGN =
INTCON 0
SEMICN ;
IDENFR f1
LPARENT (
RPARENT )
SEMICN ;
RETURNTK return
IDENFR x
SEMICN ;
RBRACE }
VOIDTK void
IDENFR f1
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR i
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
IDENFR i
LSS <
INTCON 5
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IDENFR x
ASSIGN =
IDENFR x
PLUS +
INTCON 1
SEMICN ;
RBRACE }
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
IDENFR x
ASSIGN =
INTCON 0
SEMICN ;
IDENFR f1
LPARENT (
RPARENT )
SEMICN ;
RETURNTK return
IDENFR x
SEMICN ;
RBRACE }
VOIDTK void
IDENFR f1
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR i
SEMICN ;
FORTK for
LPARENT (
IDENFR i
LSS <
INTCON 5
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IDENFR x
ASSIGN =
IDENFR x
PLUS +
INTCON 1
SEMICN ;
RBRACE }
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
IDENFR x
ASSIGN =
INTCON 0
SEMICN ;
IDENFR f1
LPARENT (
RPARENT )
SEMICN ;
RETURNTK return
IDENFR x
SEMICN ;
RBRACE }
VOIDTK void
IDENFR f1
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR i
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
SEMICN ;
RPARENT )
LBRACE {
IDENFR x
ASSIGN =
IDENFR x
PLUS +
INTCON 1
SEMICN ;
RBRACE }
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
IDENFR x
ASSIGN =
INTCON 0
SEMICN ;
IDENFR f1
LPARENT (
RPARENT )
SEMICN ;
RETURNTK return
IDENFR x
SEMICN ;
RBRACE }
CONSTTK const
INTTK int
IDENFR c
ASSIGN =
INTCON 10
SEMICN ;
INTTK int
IDENFR x
SEMICN ;
VOIDTK void
IDENFR f1
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR i
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
INTCON 5
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IDENFR x
ASSIGN =
IDENFR x
PLUS +
INTCON 1
SEMICN ;
RBRACE }
RBRACE }
INTTK int
IDENFR f2
LPARENT (
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR x
GRE >
INTCON 0
RPARENT )
LBRACE {
RETURNTK return
MINU -
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
RETURNTK return
INTCON 1
SEMICN ;
RBRACE }
RETURNTK return
IDENFR x
SEMICN ;
RBRACE }
VOIDTK void
IDENFR f3
LPARENT (
INTTK int
IDENFR a
RPARENT )
LBRACE {
IDENFR x
ASSIGN =
IDENFR a
SEMICN ;
RBRACE }
INTTK int
IDENFR f4
LPARENT (
INTTK int
IDENFR a
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR a
GRE >
INTCON 0
RPARENT )
RETURNTK return
PLUS +
IDENFR a
SEMICN ;
RETURNTK return
MINU -
IDENFR a
SEMICN ;
RBRACE }
INTTK int
IDENFR f5
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
COMMA ,
INTTK int
IDENFR c
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR a
GRE >
IDENFR b
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR a
GRE >
IDENFR c
RPARENT )
RETURNTK return
IDENFR a
SEMICN ;
ELSETK else
RETURNTK return
IDENFR c
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR b
GRE >
IDENFR c
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR b
GRE >
IDENFR a
RPARENT )
RETURNTK return
IDENFR b
SEMICN ;
ELSETK else
RETURNTK return
IDENFR a
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR c
GRE >
IDENFR a
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR c
GRE >
IDENFR b
RPARENT )
RETURNTK return
IDENFR c
SEMICN ;
ELSETK else
RETURNTK return
IDENFR b
SEMICN ;
RBRACE }
RETURNTK return
IDENFR f4
LPARENT (
IDENFR a
RPARENT )
SEMICN ;
RBRACE }
INTTK int
IDENFR f6
LPARENT (
INTTK int
IDENFR a
RPARENT )
LBRACE {
IDENFR x
ASSIGN =
IDENFR x
PLUS +
IDENFR a
SEMICN ;
IFTK if
LPARENT (
IDENFR a
EQL ==
INTCON 0
RPARENT )
LBRACE {
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
RETURNTK return
IDENFR f6
LPARENT (
IDENFR a
MINU -
INTCON 1
RPARENT )
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "21373457\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR i
COMMA ,
IDENFR j
ASSIGN =
INTCON 5
COMMA ,
IDENFR k
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
INTCON 5
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 5
RPARENT )
PRINTFTK printf
LPARENT (
STRCON "Empty for pass!\n"
RPARENT )
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
INTCON 2
SEMICN ;
RPARENT )
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 2
SEMICN ;
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 4
RPARENT )
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
IDENFR i
LSS <
INTCON 5
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
LSS <
INTCON 5
RPARENT )
CONTINUETK continue
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 2
SEMICN ;
RBRACE }
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 5
SEMICN ;
SEMICN ;
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 6
RPARENT )
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
IDENFR i
LSS <
INTCON 7
SEMICN ;
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 8
RPARENT )
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
SEMICN ;
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 10
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "One stmt for pass!\n"
RPARENT )
SEMICN ;
BREAKTK break
SEMICN ;
RBRACE }
RBRACE }
IDENFR f1
LPARENT (
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR x
EQL ==
INTCON 5
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR f2
LPARENT (
RPARENT )
EQL ==
MINU -
INTCON 1
RPARENT )
PRINTFTK printf
LPARENT (
STRCON "Basic for and no params function pass!\n"
RPARENT )
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "Please input 5 number (no zero)\n"
RPARENT )
SEMICN ;
IDENFR x
ASSIGN =
MINU -
INTCON 1
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
MULT *
IDENFR i
LSS <
IDENFR j
MULT *
IDENFR j
DIV /
LPARENT (
INTCON 5
MINU -
INTCON 4
RPARENT )
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IDENFR k
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR f3
LPARENT (
IDENFR f4
LPARENT (
IDENFR k
RPARENT )
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR x
LSS <
INTCON 0
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR x
GRE >
INTCON 0
RPARENT )
LBRACE {
CONTINUETK continue
SEMICN ;
RBRACE }
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR x
GEQ >=
INTCON 0
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "Basic for and one params function pass!\n"
RPARENT )
SEMICN ;
RBRACE }
IDENFR i
ASSIGN =
INTCON 10
SEMICN ;
IDENFR j
ASSIGN =
INTCON 5
SEMICN ;
IDENFR k
ASSIGN =
INTCON 7
SEMICN ;
IFTK if
LPARENT (
IDENFR f5
LPARENT (
IDENFR i
COMMA ,
IDENFR j
COMMA ,
IDENFR k
RPARENT )
EQL ==
IDENFR i
RPARENT )
PRINTFTK printf
LPARENT (
STRCON "Basic for and multiple params function pass!\n"
RPARENT )
SEMICN ;
IDENFR x
ASSIGN =
INTCON 0
SEMICN ;
IDENFR f6
LPARENT (
IDENFR c
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "Recursive Success, count = %d\n"
COMMA ,
IDENFR x
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "This C level file include decl, if, for ,continue, break, basic LOrExp. No block\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "Pass Success!"
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
CONSTTK const
INTTK int
IDENFR c
ASSIGN =
INTCON 10
SEMICN ;
INTTK int
IDENFR x
SEMICN ;
VOIDTK void
IDENFR f1
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR i
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
INTCON 5
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IDENFR x
ASSIGN =
IDENFR x
PLUS +
INTCON 1
SEMICN ;
RBRACE }
RBRACE }
INTTK int
IDENFR f2
LPARENT (
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR x
GRE >
INTCON 0
RPARENT )
LBRACE {
RETURNTK return
MINU -
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
RETURNTK return
INTCON 1
SEMICN ;
RBRACE }
RETURNTK return
IDENFR x
SEMICN ;
RBRACE }
VOIDTK void
IDENFR f3
LPARENT (
INTTK int
IDENFR a
RPARENT )
LBRACE {
IDENFR x
ASSIGN =
IDENFR a
SEMICN ;
RBRACE }
INTTK int
IDENFR f4
LPARENT (
INTTK int
IDENFR a
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR a
GRE >
INTCON 0
RPARENT )
RETURNTK return
PLUS +
IDENFR a
SEMICN ;
RETURNTK return
MINU -
IDENFR a
SEMICN ;
RBRACE }
INTTK int
IDENFR f5
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
COMMA ,
INTTK int
IDENFR c
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR a
GRE >
IDENFR b
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR a
GRE >
IDENFR c
RPARENT )
RETURNTK return
IDENFR a
SEMICN ;
ELSETK else
RETURNTK return
IDENFR c
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR b
GRE >
IDENFR c
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR b
GRE >
IDENFR a
RPARENT )
RETURNTK return
IDENFR b
SEMICN ;
ELSETK else
RETURNTK return
IDENFR a
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR c
GRE >
IDENFR a
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR c
GRE >
IDENFR b
RPARENT )
RETURNTK return
IDENFR c
SEMICN ;
ELSETK else
RETURNTK return
IDENFR b
SEMICN ;
RBRACE }
RETURNTK return
IDENFR f4
LPARENT (
IDENFR a
RPARENT )
SEMICN ;
RBRACE }
INTTK int
IDENFR f6
LPARENT (
INTTK int
IDENFR a
RPARENT )
LBRACE {
IDENFR x
ASSIGN =
IDENFR x
PLUS +
IDENFR a
SEMICN ;
IFTK if
LPARENT (
IDENFR a
EQL ==
INTCON 0
RPARENT )
LBRACE {
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
RETURNTK return
IDENFR f6
LPARENT (
IDENFR a
MINU -
INTCON 1
RPARENT )
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "21373457\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR i
COMMA ,
IDENFR j
ASSIGN =
INTCON 5
COMMA ,
IDENFR k
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
INTCON 5
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 5
RPARENT )
PRINTFTK printf
LPARENT (
STRCON "Empty for pass!\n"
RPARENT )
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
INTCON 2
SEMICN ;
RPARENT )
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 2
SEMICN ;
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 4
RPARENT )
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
IDENFR i
LSS <
INTCON 5
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
LSS <
INTCON 5
RPARENT )
CONTINUETK continue
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 2
SEMICN ;
RBRACE }
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 5
SEMICN ;
SEMICN ;
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 6
RPARENT )
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
IDENFR i
LSS <
INTCON 7
SEMICN ;
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 8
RPARENT )
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
SEMICN ;
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 10
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "One stmt for pass!\n"
RPARENT )
SEMICN ;
BREAKTK break
SEMICN ;
RBRACE }
RBRACE }
IDENFR f1
LPARENT (
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR x
EQL ==
INTCON 5
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR f2
LPARENT (
RPARENT )
EQL ==
MINU -
INTCON 1
RPARENT )
PRINTFTK printf
LPARENT (
STRCON "Basic for and no params function pass!\n"
RPARENT )
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "Please input 5 number (no zero)\n"
RPARENT )
SEMICN ;
IDENFR x
ASSIGN =
MINU -
INTCON 1
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
MULT *
IDENFR i
LSS <
IDENFR j
MULT *
IDENFR j
DIV /
LPARENT (
INTCON 5
MINU -
INTCON 4
RPARENT )
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IDENFR k
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR f3
LPARENT (
IDENFR f4
LPARENT (
IDENFR k
RPARENT )
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR x
LSS <
INTCON 0
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR x
GRE >
INTCON 0
RPARENT )
LBRACE {
CONTINUETK continue
SEMICN ;
RBRACE }
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR x
GEQ >=
INTCON 0
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "Basic for and one params function pass!\n"
RPARENT )
SEMICN ;
RBRACE }
IDENFR i
ASSIGN =
INTCON 10
SEMICN ;
IDENFR j
ASSIGN =
INTCON 5
SEMICN ;
IDENFR k
ASSIGN =
INTCON 7
SEMICN ;
IFTK if
LPARENT (
IDENFR f5
LPARENT (
IDENFR i
COMMA ,
IDENFR j
COMMA ,
IDENFR k
RPARENT )
EQL ==
IDENFR i
RPARENT )
PRINTFTK printf
LPARENT (
STRCON "Basic for and multiple params function pass!\n"
RPARENT )
SEMICN ;
IDENFR x
ASSIGN =
INTCON 0
SEMICN ;
IDENFR f6
LPARENT (
IDENFR c
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "Recursive Success, count = %d\n"
COMMA ,
IDENFR x
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "This C level file include decl, if, for ,continue, break, basic LOrExp. No block\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "Pass Success!"
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
CONSTTK const
INTTK int
IDENFR c
ASSIGN =
INTCON 10
SEMICN ;
INTTK int
IDENFR x
SEMICN ;
VOIDTK void
IDENFR f1
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR i
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
INTCON 5
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IDENFR x
ASSIGN =
IDENFR x
PLUS +
INTCON 1
SEMICN ;
RBRACE }
RBRACE }
INTTK int
IDENFR f2
LPARENT (
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR x
GRE >
INTCON 0
RPARENT )
LBRACE {
RETURNTK return
MINU -
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
RETURNTK return
INTCON 1
SEMICN ;
RBRACE }
RETURNTK return
IDENFR x
SEMICN ;
RBRACE }
VOIDTK void
IDENFR f3
LPARENT (
INTTK int
IDENFR a
RPARENT )
LBRACE {
IDENFR x
ASSIGN =
IDENFR a
SEMICN ;
RBRACE }
INTTK int
IDENFR f4
LPARENT (
INTTK int
IDENFR a
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR a
GRE >
INTCON 0
RPARENT )
RETURNTK return
PLUS +
IDENFR a
SEMICN ;
RETURNTK return
MINU -
IDENFR a
SEMICN ;
RBRACE }
INTTK int
IDENFR f5
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
COMMA ,
INTTK int
IDENFR c
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR a
GRE >
IDENFR b
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR a
GRE >
IDENFR c
RPARENT )
RETURNTK return
IDENFR a
SEMICN ;
ELSETK else
RETURNTK return
IDENFR c
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR b
GRE >
IDENFR c
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR b
GRE >
IDENFR a
RPARENT )
RETURNTK return
IDENFR b
SEMICN ;
ELSETK else
RETURNTK return
IDENFR a
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR c
GRE >
IDENFR a
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR c
GRE >
IDENFR b
RPARENT )
RETURNTK return
IDENFR c
SEMICN ;
ELSETK else
RETURNTK return
IDENFR b
SEMICN ;
RBRACE }
RETURNTK return
IDENFR f4
LPARENT (
IDENFR a
RPARENT )
SEMICN ;
RBRACE }
INTTK int
IDENFR f6
LPARENT (
INTTK int
IDENFR a
RPARENT )
LBRACE {
IDENFR x
ASSIGN =
IDENFR x
PLUS +
IDENFR a
SEMICN ;
IFTK if
LPARENT (
IDENFR a
EQL ==
INTCON 0
RPARENT )
LBRACE {
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
RETURNTK return
IDENFR f6
LPARENT (
IDENFR a
MINU -
INTCON 1
RPARENT )
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "21373457\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR i
COMMA ,
IDENFR j
ASSIGN =
INTCON 5
COMMA ,
IDENFR k
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
INTCON 5
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 5
RPARENT )
PRINTFTK printf
LPARENT (
STRCON "Empty for pass!\n"
RPARENT )
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
INTCON 2
SEMICN ;
RPARENT )
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 2
SEMICN ;
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 4
RPARENT )
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
IDENFR i
LSS <
INTCON 5
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
LSS <
INTCON 5
RPARENT )
CONTINUETK continue
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 2
SEMICN ;
RBRACE }
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 5
SEMICN ;
SEMICN ;
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 6
RPARENT )
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
IDENFR i
LSS <
INTCON 7
SEMICN ;
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 8
RPARENT )
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
SEMICN ;
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 10
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "One stmt for pass!\n"
RPARENT )
SEMICN ;
BREAKTK break
SEMICN ;
RBRACE }
RBRACE }
IDENFR f1
LPARENT (
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR x
EQL ==
INTCON 5
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR f2
LPARENT (
RPARENT )
EQL ==
MINU -
INTCON 1
RPARENT )
PRINTFTK printf
LPARENT (
STRCON "Basic for and no params function pass!\n"
RPARENT )
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "Please input 5 number (no zero)\n"
RPARENT )
SEMICN ;
IDENFR x
ASSIGN =
MINU -
INTCON 1
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
MULT *
IDENFR i
LSS <
IDENFR j
MULT *
IDENFR j
DIV /
LPARENT (
INTCON 5
MINU -
INTCON 4
RPARENT )
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IDENFR k
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR f3
LPARENT (
IDENFR f4
LPARENT (
IDENFR k
RPARENT )
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR x
LSS <
INTCON 0
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR x
GRE >
INTCON 0
RPARENT )
LBRACE {
CONTINUETK continue
SEMICN ;
RBRACE }
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR x
GEQ >=
INTCON 0
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "Basic for and one params function pass!\n"
RPARENT )
SEMICN ;
RBRACE }
IDENFR i
ASSIGN =
INTCON 10
SEMICN ;
IDENFR j
ASSIGN =
INTCON 5
SEMICN ;
IDENFR k
ASSIGN =
INTCON 7
SEMICN ;
IFTK if
LPARENT (
IDENFR f5
LPARENT (
IDENFR i
COMMA ,
IDENFR j
COMMA ,
IDENFR k
RPARENT )
EQL ==
IDENFR i
RPARENT )
PRINTFTK printf
LPARENT (
STRCON "Basic for and multiple params function pass!\n"
RPARENT )
SEMICN ;
IDENFR x
ASSIGN =
INTCON 0
SEMICN ;
IDENFR f6
LPARENT (
IDENFR c
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "Recursive Success, count = %d\n"
COMMA ,
IDENFR x
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "This C level file include decl, if, for ,continue, break, basic LOrExp. No block\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "Pass Success!"
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
VOIDTK void
IDENFR f3
LPARENT (
INTTK int
IDENFR a
RPARENT )
LBRACE {
IDENFR x
ASSIGN =
IDENFR a
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
VOIDTK void
IDENFR f3
LPARENT (
INTTK int
IDENFR a
RPARENT )
LBRACE {
IDENFR x
ASSIGN =
IDENFR a
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
VOIDTK void
IDENFR f3
LPARENT (
INTTK int
IDENFR a
RPARENT )
LBRACE {
IDENFR x
ASSIGN =
IDENFR a
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
VOIDTK void
IDENFR f3
LPARENT (
INTTK int
IDENFR a
RPARENT )
LBRACE {
IDENFR x
ASSIGN =
IDENFR a
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
VOIDTK void
IDENFR f3
LPARENT (
INTTK int
IDENFR a
RPARENT )
LBRACE {
IDENFR x
ASSIGN =
IDENFR a
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
VOIDTK void
IDENFR f3
LPARENT (
INTTK int
IDENFR a
RPARENT )
LBRACE {
IDENFR x
ASSIGN =
IDENFR a
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
VOIDTK void
IDENFR f3
LPARENT (
INTTK int
IDENFR a
RPARENT )
LBRACE {
IDENFR x
ASSIGN =
IDENFR a
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
VOIDTK void
IDENFR f3
LPARENT (
INTTK int
IDENFR a
RPARENT )
LBRACE {
IDENFR x
ASSIGN =
IDENFR a
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
CONSTTK const
INTTK int
IDENFR c
ASSIGN =
INTCON 10
SEMICN ;
INTTK int
IDENFR x
SEMICN ;
VOIDTK void
IDENFR f1
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR i
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
INTCON 5
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IDENFR x
ASSIGN =
IDENFR x
PLUS +
INTCON 1
SEMICN ;
RBRACE }
RBRACE }
INTTK int
IDENFR f2
LPARENT (
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR x
GRE >
INTCON 0
RPARENT )
LBRACE {
RETURNTK return
MINU -
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
RETURNTK return
INTCON 1
SEMICN ;
RBRACE }
RETURNTK return
IDENFR x
SEMICN ;
RBRACE }
VOIDTK void
IDENFR f3
LPARENT (
INTTK int
IDENFR a
RPARENT )
LBRACE {
IDENFR x
ASSIGN =
IDENFR a
SEMICN ;
RBRACE }
INTTK int
IDENFR f4
LPARENT (
INTTK int
IDENFR a
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR a
GRE >
INTCON 0
RPARENT )
RETURNTK return
PLUS +
IDENFR a
SEMICN ;
RETURNTK return
MINU -
IDENFR a
SEMICN ;
RBRACE }
INTTK int
IDENFR f5
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
COMMA ,
INTTK int
IDENFR c
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR a
GRE >
IDENFR b
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR a
GRE >
IDENFR c
RPARENT )
RETURNTK return
IDENFR a
SEMICN ;
ELSETK else
RETURNTK return
IDENFR c
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR b
GRE >
IDENFR c
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR b
GRE >
IDENFR a
RPARENT )
RETURNTK return
IDENFR b
SEMICN ;
ELSETK else
RETURNTK return
IDENFR a
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR c
GRE >
IDENFR a
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR c
GRE >
IDENFR b
RPARENT )
RETURNTK return
IDENFR c
SEMICN ;
ELSETK else
RETURNTK return
IDENFR b
SEMICN ;
RBRACE }
RETURNTK return
IDENFR f4
LPARENT (
IDENFR a
RPARENT )
SEMICN ;
RBRACE }
INTTK int
IDENFR f6
LPARENT (
INTTK int
IDENFR a
RPARENT )
LBRACE {
IDENFR x
ASSIGN =
IDENFR x
PLUS +
IDENFR a
SEMICN ;
IFTK if
LPARENT (
IDENFR a
EQL ==
INTCON 0
RPARENT )
LBRACE {
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
RETURNTK return
IDENFR f6
LPARENT (
IDENFR a
MINU -
INTCON 1
RPARENT )
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "21373457\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR i
COMMA ,
IDENFR j
ASSIGN =
INTCON 5
COMMA ,
IDENFR k
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
INTCON 5
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 5
RPARENT )
PRINTFTK printf
LPARENT (
STRCON "Empty for pass!\n"
RPARENT )
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
INTCON 2
SEMICN ;
RPARENT )
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 2
SEMICN ;
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 4
RPARENT )
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
IDENFR i
LSS <
INTCON 5
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
LSS <
INTCON 5
RPARENT )
CONTINUETK continue
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 2
SEMICN ;
RBRACE }
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 5
SEMICN ;
SEMICN ;
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 6
RPARENT )
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
IDENFR i
LSS <
INTCON 7
SEMICN ;
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 8
RPARENT )
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
SEMICN ;
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 10
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "One stmt for pass!\n"
RPARENT )
SEMICN ;
BREAKTK break
SEMICN ;
RBRACE }
RBRACE }
IDENFR f1
LPARENT (
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR x
EQL ==
INTCON 5
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR f2
LPARENT (
RPARENT )
EQL ==
MINU -
INTCON 1
RPARENT )
PRINTFTK printf
LPARENT (
STRCON "Basic for and no params function pass!\n"
RPARENT )
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "Please input 5 number (no zero)\n"
RPARENT )
SEMICN ;
IDENFR x
ASSIGN =
MINU -
INTCON 1
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
MULT *
IDENFR i
LSS <
IDENFR j
MULT *
IDENFR j
DIV /
LPARENT (
INTCON 5
MINU -
INTCON 4
RPARENT )
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IDENFR k
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR f3
LPARENT (
IDENFR f4
LPARENT (
IDENFR k
RPARENT )
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR x
LSS <
INTCON 0
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR x
GRE >
INTCON 0
RPARENT )
LBRACE {
CONTINUETK continue
SEMICN ;
RBRACE }
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR x
GEQ >=
INTCON 0
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "Basic for and one params function pass!\n"
RPARENT )
SEMICN ;
RBRACE }
IDENFR i
ASSIGN =
INTCON 10
SEMICN ;
IDENFR j
ASSIGN =
INTCON 5
SEMICN ;
IDENFR k
ASSIGN =
INTCON 7
SEMICN ;
IFTK if
LPARENT (
IDENFR f5
LPARENT (
IDENFR i
COMMA ,
IDENFR j
COMMA ,
IDENFR k
RPARENT )
EQL ==
IDENFR i
RPARENT )
PRINTFTK printf
LPARENT (
STRCON "Basic for and multiple params function pass!\n"
RPARENT )
SEMICN ;
IDENFR x
ASSIGN =
INTCON 0
SEMICN ;
IDENFR f6
LPARENT (
IDENFR c
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "Recursive Success, count = %d\n"
COMMA ,
IDENFR x
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "This C level file include decl, if, for ,continue, break, basic LOrExp. No block\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "Pass Success!"
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
CONSTTK const
INTTK int
IDENFR c
ASSIGN =
INTCON 10
SEMICN ;
INTTK int
IDENFR x
SEMICN ;
VOIDTK void
IDENFR f1
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR i
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
INTCON 5
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IDENFR x
ASSIGN =
IDENFR x
PLUS +
INTCON 1
SEMICN ;
RBRACE }
RBRACE }
INTTK int
IDENFR f2
LPARENT (
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR x
GRE >
INTCON 0
RPARENT )
LBRACE {
RETURNTK return
MINU -
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
RETURNTK return
INTCON 1
SEMICN ;
RBRACE }
RETURNTK return
IDENFR x
SEMICN ;
RBRACE }
VOIDTK void
IDENFR f3
LPARENT (
INTTK int
IDENFR a
RPARENT )
LBRACE {
IDENFR x
ASSIGN =
IDENFR a
SEMICN ;
RBRACE }
INTTK int
IDENFR f4
LPARENT (
INTTK int
IDENFR a
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR a
GRE >
INTCON 0
RPARENT )
RETURNTK return
PLUS +
IDENFR a
SEMICN ;
RETURNTK return
MINU -
IDENFR a
SEMICN ;
RBRACE }
INTTK int
IDENFR f5
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
COMMA ,
INTTK int
IDENFR c
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR a
GRE >
IDENFR b
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR a
GRE >
IDENFR c
RPARENT )
RETURNTK return
IDENFR a
SEMICN ;
ELSETK else
RETURNTK return
IDENFR c
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR b
GRE >
IDENFR c
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR b
GRE >
IDENFR a
RPARENT )
RETURNTK return
IDENFR b
SEMICN ;
ELSETK else
RETURNTK return
IDENFR a
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR c
GRE >
IDENFR a
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR c
GRE >
IDENFR b
RPARENT )
RETURNTK return
IDENFR c
SEMICN ;
ELSETK else
RETURNTK return
IDENFR b
SEMICN ;
RBRACE }
RETURNTK return
IDENFR f4
LPARENT (
IDENFR a
RPARENT )
SEMICN ;
RBRACE }
INTTK int
IDENFR f6
LPARENT (
INTTK int
IDENFR a
RPARENT )
LBRACE {
IDENFR x
ASSIGN =
IDENFR x
PLUS +
IDENFR a
SEMICN ;
IFTK if
LPARENT (
IDENFR a
EQL ==
INTCON 0
RPARENT )
LBRACE {
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
RETURNTK return
IDENFR f6
LPARENT (
IDENFR a
MINU -
INTCON 1
RPARENT )
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "21373457\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR i
COMMA ,
IDENFR j
ASSIGN =
INTCON 5
COMMA ,
IDENFR k
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
INTCON 5
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 5
RPARENT )
PRINTFTK printf
LPARENT (
STRCON "Empty for pass!\n"
RPARENT )
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
INTCON 2
SEMICN ;
RPARENT )
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 2
SEMICN ;
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 4
RPARENT )
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
IDENFR i
LSS <
INTCON 5
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
LSS <
INTCON 5
RPARENT )
CONTINUETK continue
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 2
SEMICN ;
RBRACE }
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 5
SEMICN ;
SEMICN ;
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 6
RPARENT )
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
IDENFR i
LSS <
INTCON 7
SEMICN ;
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 8
RPARENT )
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
SEMICN ;
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 10
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "One stmt for pass!\n"
RPARENT )
SEMICN ;
BREAKTK break
SEMICN ;
RBRACE }
RBRACE }
IDENFR f1
LPARENT (
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR x
EQL ==
INTCON 5
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR f2
LPARENT (
RPARENT )
EQL ==
MINU -
INTCON 1
RPARENT )
PRINTFTK printf
LPARENT (
STRCON "Basic for and no params function pass!\n"
RPARENT )
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "Please input 5 number (no zero)\n"
RPARENT )
SEMICN ;
IDENFR x
ASSIGN =
MINU -
INTCON 1
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
MULT *
IDENFR i
LSS <
IDENFR j
MULT *
IDENFR j
DIV /
LPARENT (
INTCON 5
MINU -
INTCON 4
RPARENT )
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IDENFR k
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR f3
LPARENT (
IDENFR f4
LPARENT (
IDENFR k
RPARENT )
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR x
LSS <
INTCON 0
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR x
GRE >
INTCON 0
RPARENT )
LBRACE {
CONTINUETK continue
SEMICN ;
RBRACE }
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR x
GEQ >=
INTCON 0
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "Basic for and one params function pass!\n"
RPARENT )
SEMICN ;
RBRACE }
IDENFR i
ASSIGN =
INTCON 10
SEMICN ;
IDENFR j
ASSIGN =
INTCON 5
SEMICN ;
IDENFR k
ASSIGN =
INTCON 7
SEMICN ;
IFTK if
LPARENT (
IDENFR f5
LPARENT (
IDENFR i
COMMA ,
IDENFR j
COMMA ,
IDENFR k
RPARENT )
EQL ==
IDENFR i
RPARENT )
PRINTFTK printf
LPARENT (
STRCON "Basic for and multiple params function pass!\n"
RPARENT )
SEMICN ;
IDENFR x
ASSIGN =
INTCON 0
SEMICN ;
IDENFR f6
LPARENT (
IDENFR c
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "Recursive Success, count = %d\n"
COMMA ,
IDENFR x
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "This C level file include decl, if, for ,continue, break, basic LOrExp. No block\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "Pass Success!"
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
CONSTTK const
INTTK int
IDENFR c
ASSIGN =
INTCON 10
SEMICN ;
INTTK int
IDENFR x
SEMICN ;
VOIDTK void
IDENFR f1
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR i
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
INTCON 5
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IDENFR x
ASSIGN =
IDENFR x
PLUS +
INTCON 1
SEMICN ;
RBRACE }
RBRACE }
INTTK int
IDENFR f2
LPARENT (
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR x
GRE >
INTCON 0
RPARENT )
LBRACE {
RETURNTK return
MINU -
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
RETURNTK return
INTCON 1
SEMICN ;
RBRACE }
RETURNTK return
IDENFR x
SEMICN ;
RBRACE }
VOIDTK void
IDENFR f3
LPARENT (
INTTK int
IDENFR a
RPARENT )
LBRACE {
IDENFR x
ASSIGN =
IDENFR a
SEMICN ;
RBRACE }
INTTK int
IDENFR f4
LPARENT (
INTTK int
IDENFR a
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR a
GRE >
INTCON 0
RPARENT )
RETURNTK return
PLUS +
IDENFR a
SEMICN ;
RETURNTK return
MINU -
IDENFR a
SEMICN ;
RBRACE }
INTTK int
IDENFR f5
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
COMMA ,
INTTK int
IDENFR c
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR a
GRE >
IDENFR b
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR a
GRE >
IDENFR c
RPARENT )
RETURNTK return
IDENFR a
SEMICN ;
ELSETK else
RETURNTK return
IDENFR c
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR b
GRE >
IDENFR c
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR b
GRE >
IDENFR a
RPARENT )
RETURNTK return
IDENFR b
SEMICN ;
ELSETK else
RETURNTK return
IDENFR a
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR c
GRE >
IDENFR a
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR c
GRE >
IDENFR b
RPARENT )
RETURNTK return
IDENFR c
SEMICN ;
ELSETK else
RETURNTK return
IDENFR b
SEMICN ;
RBRACE }
RETURNTK return
IDENFR f4
LPARENT (
IDENFR a
RPARENT )
SEMICN ;
RBRACE }
INTTK int
IDENFR f6
LPARENT (
INTTK int
IDENFR a
RPARENT )
LBRACE {
IDENFR x
ASSIGN =
IDENFR x
PLUS +
IDENFR a
SEMICN ;
IFTK if
LPARENT (
IDENFR a
EQL ==
INTCON 0
RPARENT )
LBRACE {
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
RETURNTK return
IDENFR f6
LPARENT (
IDENFR a
MINU -
INTCON 1
RPARENT )
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "21373457\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR i
COMMA ,
IDENFR j
ASSIGN =
INTCON 5
COMMA ,
IDENFR k
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
INTCON 5
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 5
RPARENT )
PRINTFTK printf
LPARENT (
STRCON "Empty for pass!\n"
RPARENT )
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
INTCON 2
SEMICN ;
RPARENT )
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 2
SEMICN ;
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 4
RPARENT )
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
IDENFR i
LSS <
INTCON 5
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
LSS <
INTCON 5
RPARENT )
CONTINUETK continue
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 2
SEMICN ;
RBRACE }
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 5
SEMICN ;
SEMICN ;
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 6
RPARENT )
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
IDENFR i
LSS <
INTCON 7
SEMICN ;
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 8
RPARENT )
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
SEMICN ;
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 10
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "One stmt for pass!\n"
RPARENT )
SEMICN ;
BREAKTK break
SEMICN ;
RBRACE }
RBRACE }
IDENFR f1
LPARENT (
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR x
EQL ==
INTCON 5
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR f2
LPARENT (
RPARENT )
EQL ==
MINU -
INTCON 1
RPARENT )
PRINTFTK printf
LPARENT (
STRCON "Basic for and no params function pass!\n"
RPARENT )
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "Please input 5 number (no zero)\n"
RPARENT )
SEMICN ;
IDENFR x
ASSIGN =
MINU -
INTCON 1
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
MULT *
IDENFR i
LSS <
IDENFR j
MULT *
IDENFR j
DIV /
LPARENT (
INTCON 5
MINU -
INTCON 4
RPARENT )
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IDENFR k
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR f3
LPARENT (
IDENFR f4
LPARENT (
IDENFR k
RPARENT )
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR x
LSS <
INTCON 0
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR x
GRE >
INTCON 0
RPARENT )
LBRACE {
CONTINUETK continue
SEMICN ;
RBRACE }
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR x
GEQ >=
INTCON 0
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "Basic for and one params function pass!\n"
RPARENT )
SEMICN ;
RBRACE }
IDENFR i
ASSIGN =
INTCON 10
SEMICN ;
IDENFR j
ASSIGN =
INTCON 5
SEMICN ;
IDENFR k
ASSIGN =
INTCON 7
SEMICN ;
IFTK if
LPARENT (
IDENFR f5
LPARENT (
IDENFR i
COMMA ,
IDENFR j
COMMA ,
IDENFR k
RPARENT )
EQL ==
IDENFR i
RPARENT )
PRINTFTK printf
LPARENT (
STRCON "Basic for and multiple params function pass!\n"
RPARENT )
SEMICN ;
IDENFR x
ASSIGN =
INTCON 0
SEMICN ;
IDENFR f6
LPARENT (
IDENFR c
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "Recursive Success, count = %d\n"
COMMA ,
IDENFR x
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "This C level file include decl, if, for ,continue, break, basic LOrExp. No block\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "Pass Success!"
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
CONSTTK const
INTTK int
IDENFR c
ASSIGN =
INTCON 10
SEMICN ;
INTTK int
IDENFR x
SEMICN ;
VOIDTK void
IDENFR f1
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR i
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
INTCON 5
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IDENFR x
ASSIGN =
IDENFR x
PLUS +
INTCON 1
SEMICN ;
RBRACE }
RBRACE }
INTTK int
IDENFR f2
LPARENT (
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR x
GRE >
INTCON 0
RPARENT )
LBRACE {
RETURNTK return
MINU -
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
RETURNTK return
INTCON 1
SEMICN ;
RBRACE }
RETURNTK return
IDENFR x
SEMICN ;
RBRACE }
VOIDTK void
IDENFR f3
LPARENT (
INTTK int
IDENFR a
RPARENT )
LBRACE {
IDENFR x
ASSIGN =
IDENFR a
SEMICN ;
RBRACE }
INTTK int
IDENFR f4
LPARENT (
INTTK int
IDENFR a
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR a
GRE >
INTCON 0
RPARENT )
RETURNTK return
PLUS +
IDENFR a
SEMICN ;
RETURNTK return
MINU -
IDENFR a
SEMICN ;
RBRACE }
INTTK int
IDENFR f5
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
COMMA ,
INTTK int
IDENFR c
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR a
GRE >
IDENFR b
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR a
GRE >
IDENFR c
RPARENT )
RETURNTK return
IDENFR a
SEMICN ;
ELSETK else
RETURNTK return
IDENFR c
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR b
GRE >
IDENFR c
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR b
GRE >
IDENFR a
RPARENT )
RETURNTK return
IDENFR b
SEMICN ;
ELSETK else
RETURNTK return
IDENFR a
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR c
GRE >
IDENFR a
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR c
GRE >
IDENFR b
RPARENT )
RETURNTK return
IDENFR c
SEMICN ;
ELSETK else
RETURNTK return
IDENFR b
SEMICN ;
RBRACE }
RETURNTK return
IDENFR f4
LPARENT (
IDENFR a
RPARENT )
SEMICN ;
RBRACE }
INTTK int
IDENFR f6
LPARENT (
INTTK int
IDENFR a
RPARENT )
LBRACE {
IDENFR x
ASSIGN =
IDENFR x
PLUS +
IDENFR a
SEMICN ;
IFTK if
LPARENT (
IDENFR a
EQL ==
INTCON 0
RPARENT )
LBRACE {
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
RETURNTK return
IDENFR f6
LPARENT (
IDENFR a
MINU -
INTCON 1
RPARENT )
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "21373457\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR i
COMMA ,
IDENFR j
ASSIGN =
INTCON 5
COMMA ,
IDENFR k
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
INTCON 5
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 5
RPARENT )
PRINTFTK printf
LPARENT (
STRCON "Empty for pass!\n"
RPARENT )
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
INTCON 2
SEMICN ;
RPARENT )
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 2
SEMICN ;
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 4
RPARENT )
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
IDENFR i
LSS <
INTCON 5
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
LSS <
INTCON 5
RPARENT )
CONTINUETK continue
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 2
SEMICN ;
RBRACE }
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 5
SEMICN ;
SEMICN ;
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 6
RPARENT )
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
IDENFR i
LSS <
INTCON 7
SEMICN ;
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 8
RPARENT )
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
SEMICN ;
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 10
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "One stmt for pass!\n"
RPARENT )
SEMICN ;
BREAKTK break
SEMICN ;
RBRACE }
RBRACE }
IDENFR f1
LPARENT (
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR x
EQL ==
INTCON 5
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR f2
LPARENT (
RPARENT )
EQL ==
MINU -
INTCON 1
RPARENT )
PRINTFTK printf
LPARENT (
STRCON "Basic for and no params function pass!\n"
RPARENT )
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "Please input 5 number (no zero)\n"
RPARENT )
SEMICN ;
IDENFR x
ASSIGN =
MINU -
INTCON 1
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
MULT *
IDENFR i
LSS <
IDENFR j
MULT *
IDENFR j
DIV /
LPARENT (
INTCON 5
MINU -
INTCON 4
RPARENT )
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IDENFR k
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR f3
LPARENT (
IDENFR f4
LPARENT (
IDENFR k
RPARENT )
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR x
LSS <
INTCON 0
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR x
GRE >
INTCON 0
RPARENT )
LBRACE {
CONTINUETK continue
SEMICN ;
RBRACE }
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR x
GEQ >=
INTCON 0
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "Basic for and one params function pass!\n"
RPARENT )
SEMICN ;
RBRACE }
IDENFR i
ASSIGN =
INTCON 10
SEMICN ;
IDENFR j
ASSIGN =
INTCON 5
SEMICN ;
IDENFR k
ASSIGN =
INTCON 7
SEMICN ;
IFTK if
LPARENT (
IDENFR f5
LPARENT (
IDENFR i
COMMA ,
IDENFR j
COMMA ,
IDENFR k
RPARENT )
EQL ==
IDENFR i
RPARENT )
PRINTFTK printf
LPARENT (
STRCON "Basic for and multiple params function pass!\n"
RPARENT )
SEMICN ;
IDENFR x
ASSIGN =
INTCON 0
SEMICN ;
IDENFR f6
LPARENT (
IDENFR c
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "Recursive Success, count = %d\n"
COMMA ,
IDENFR x
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "This C level file include decl, if, for ,continue, break, basic LOrExp. No block\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "Pass Success!"
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
CONSTTK const
INTTK int
IDENFR c
ASSIGN =
INTCON 10
SEMICN ;
INTTK int
IDENFR x
SEMICN ;
VOIDTK void
IDENFR f1
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR i
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
INTCON 5
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IDENFR x
ASSIGN =
IDENFR x
PLUS +
INTCON 1
SEMICN ;
RBRACE }
RBRACE }
INTTK int
IDENFR f2
LPARENT (
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR x
GRE >
INTCON 0
RPARENT )
LBRACE {
RETURNTK return
MINU -
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
RETURNTK return
INTCON 1
SEMICN ;
RBRACE }
RETURNTK return
IDENFR x
SEMICN ;
RBRACE }
VOIDTK void
IDENFR f3
LPARENT (
INTTK int
IDENFR a
RPARENT )
LBRACE {
IDENFR x
ASSIGN =
IDENFR a
SEMICN ;
RBRACE }
INTTK int
IDENFR f4
LPARENT (
INTTK int
IDENFR a
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR a
GRE >
INTCON 0
RPARENT )
RETURNTK return
PLUS +
IDENFR a
SEMICN ;
RETURNTK return
MINU -
IDENFR a
SEMICN ;
RBRACE }
INTTK int
IDENFR f5
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
COMMA ,
INTTK int
IDENFR c
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR a
GRE >
IDENFR b
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR a
GRE >
IDENFR c
RPARENT )
RETURNTK return
IDENFR a
SEMICN ;
ELSETK else
RETURNTK return
IDENFR c
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR b
GRE >
IDENFR c
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR b
GRE >
IDENFR a
RPARENT )
RETURNTK return
IDENFR b
SEMICN ;
ELSETK else
RETURNTK return
IDENFR a
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR c
GRE >
IDENFR a
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR c
GRE >
IDENFR b
RPARENT )
RETURNTK return
IDENFR c
SEMICN ;
ELSETK else
RETURNTK return
IDENFR b
SEMICN ;
RBRACE }
RETURNTK return
IDENFR f4
LPARENT (
IDENFR a
RPARENT )
SEMICN ;
RBRACE }
INTTK int
IDENFR f6
LPARENT (
INTTK int
IDENFR a
RPARENT )
LBRACE {
IDENFR x
ASSIGN =
IDENFR x
PLUS +
IDENFR a
SEMICN ;
IFTK if
LPARENT (
IDENFR a
EQL ==
INTCON 0
RPARENT )
LBRACE {
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
RETURNTK return
IDENFR f6
LPARENT (
IDENFR a
MINU -
INTCON 1
RPARENT )
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "21373457\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR i
COMMA ,
IDENFR j
ASSIGN =
INTCON 5
COMMA ,
IDENFR k
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
INTCON 5
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 5
RPARENT )
PRINTFTK printf
LPARENT (
STRCON "Empty for pass!\n"
RPARENT )
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
INTCON 2
SEMICN ;
RPARENT )
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 2
SEMICN ;
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 4
RPARENT )
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
IDENFR i
LSS <
INTCON 5
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
LSS <
INTCON 5
RPARENT )
CONTINUETK continue
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 2
SEMICN ;
RBRACE }
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 5
SEMICN ;
SEMICN ;
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 6
RPARENT )
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
IDENFR i
LSS <
INTCON 7
SEMICN ;
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 8
RPARENT )
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
SEMICN ;
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 10
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "One stmt for pass!\n"
RPARENT )
SEMICN ;
BREAKTK break
SEMICN ;
RBRACE }
RBRACE }
IDENFR f1
LPARENT (
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR x
EQL ==
INTCON 5
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR f2
LPARENT (
RPARENT )
EQL ==
MINU -
INTCON 1
RPARENT )
PRINTFTK printf
LPARENT (
STRCON "Basic for and no params function pass!\n"
RPARENT )
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "Please input 5 number (no zero)\n"
RPARENT )
SEMICN ;
IDENFR x
ASSIGN =
MINU -
INTCON 1
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
MULT *
IDENFR i
LSS <
IDENFR j
MULT *
IDENFR j
DIV /
LPARENT (
INTCON 5
MINU -
INTCON 4
RPARENT )
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IDENFR k
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR f3
LPARENT (
IDENFR f4
LPARENT (
IDENFR k
RPARENT )
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR x
LSS <
INTCON 0
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR x
GRE >
INTCON 0
RPARENT )
LBRACE {
CONTINUETK continue
SEMICN ;
RBRACE }
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR x
GEQ >=
INTCON 0
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "Basic for and one params function pass!\n"
RPARENT )
SEMICN ;
RBRACE }
IDENFR i
ASSIGN =
INTCON 10
SEMICN ;
IDENFR j
ASSIGN =
INTCON 5
SEMICN ;
IDENFR k
ASSIGN =
INTCON 7
SEMICN ;
IFTK if
LPARENT (
IDENFR f5
LPARENT (
IDENFR i
COMMA ,
IDENFR j
COMMA ,
IDENFR k
RPARENT )
EQL ==
IDENFR i
RPARENT )
PRINTFTK printf
LPARENT (
STRCON "Basic for and multiple params function pass!\n"
RPARENT )
SEMICN ;
IDENFR x
ASSIGN =
INTCON 0
SEMICN ;
IDENFR f6
LPARENT (
IDENFR c
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "Recursive Success, count = %d\n"
COMMA ,
IDENFR x
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "This C level file include decl, if, for ,continue, break, basic LOrExp. No block\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "Pass Success!"
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
CONSTTK const
INTTK int
IDENFR c
ASSIGN =
INTCON 10
SEMICN ;
INTTK int
IDENFR x
SEMICN ;
VOIDTK void
IDENFR f1
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR i
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
INTCON 5
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IDENFR x
ASSIGN =
IDENFR x
PLUS +
INTCON 1
SEMICN ;
RBRACE }
RBRACE }
INTTK int
IDENFR f2
LPARENT (
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR x
GRE >
INTCON 0
RPARENT )
LBRACE {
RETURNTK return
MINU -
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
RETURNTK return
INTCON 1
SEMICN ;
RBRACE }
RETURNTK return
IDENFR x
SEMICN ;
RBRACE }
VOIDTK void
IDENFR f3
LPARENT (
INTTK int
IDENFR a
RPARENT )
LBRACE {
IDENFR x
ASSIGN =
IDENFR a
SEMICN ;
RBRACE }
INTTK int
IDENFR f4
LPARENT (
INTTK int
IDENFR a
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR a
GRE >
INTCON 0
RPARENT )
RETURNTK return
PLUS +
IDENFR a
SEMICN ;
RETURNTK return
MINU -
IDENFR a
SEMICN ;
RBRACE }
INTTK int
IDENFR f5
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
COMMA ,
INTTK int
IDENFR c
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR a
GRE >
IDENFR b
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR a
GRE >
IDENFR c
RPARENT )
RETURNTK return
IDENFR a
SEMICN ;
ELSETK else
RETURNTK return
IDENFR c
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR b
GRE >
IDENFR c
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR b
GRE >
IDENFR a
RPARENT )
RETURNTK return
IDENFR b
SEMICN ;
ELSETK else
RETURNTK return
IDENFR a
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR c
GRE >
IDENFR a
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR c
GRE >
IDENFR b
RPARENT )
RETURNTK return
IDENFR c
SEMICN ;
ELSETK else
RETURNTK return
IDENFR b
SEMICN ;
RBRACE }
RETURNTK return
IDENFR f4
LPARENT (
IDENFR a
RPARENT )
SEMICN ;
RBRACE }
INTTK int
IDENFR f6
LPARENT (
INTTK int
IDENFR a
RPARENT )
LBRACE {
IDENFR x
ASSIGN =
IDENFR x
PLUS +
IDENFR a
SEMICN ;
IFTK if
LPARENT (
IDENFR a
EQL ==
INTCON 0
RPARENT )
LBRACE {
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
RETURNTK return
IDENFR f6
LPARENT (
IDENFR a
MINU -
INTCON 1
RPARENT )
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "21373457\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR i
COMMA ,
IDENFR j
ASSIGN =
INTCON 5
COMMA ,
IDENFR k
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
INTCON 5
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 5
RPARENT )
PRINTFTK printf
LPARENT (
STRCON "Empty for pass!\n"
RPARENT )
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
INTCON 2
SEMICN ;
RPARENT )
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 2
SEMICN ;
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 4
RPARENT )
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
IDENFR i
LSS <
INTCON 5
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
LSS <
INTCON 5
RPARENT )
CONTINUETK continue
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 2
SEMICN ;
RBRACE }
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 5
SEMICN ;
SEMICN ;
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 6
RPARENT )
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
IDENFR i
LSS <
INTCON 7
SEMICN ;
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 8
RPARENT )
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
SEMICN ;
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 10
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "One stmt for pass!\n"
RPARENT )
SEMICN ;
BREAKTK break
SEMICN ;
RBRACE }
RBRACE }
IDENFR f1
LPARENT (
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR x
EQL ==
INTCON 5
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR f2
LPARENT (
RPARENT )
EQL ==
MINU -
INTCON 1
RPARENT )
PRINTFTK printf
LPARENT (
STRCON "Basic for and no params function pass!\n"
RPARENT )
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "Please input 5 number (no zero)\n"
RPARENT )
SEMICN ;
IDENFR x
ASSIGN =
MINU -
INTCON 1
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
MULT *
IDENFR i
LSS <
IDENFR j
MULT *
IDENFR j
DIV /
LPARENT (
INTCON 5
MINU -
INTCON 4
RPARENT )
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IDENFR k
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR f3
LPARENT (
IDENFR f4
LPARENT (
IDENFR k
RPARENT )
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR x
LSS <
INTCON 0
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR x
GRE >
INTCON 0
RPARENT )
LBRACE {
CONTINUETK continue
SEMICN ;
RBRACE }
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR x
GEQ >=
INTCON 0
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "Basic for and one params function pass!\n"
RPARENT )
SEMICN ;
RBRACE }
IDENFR i
ASSIGN =
INTCON 10
SEMICN ;
IDENFR j
ASSIGN =
INTCON 5
SEMICN ;
IDENFR k
ASSIGN =
INTCON 7
SEMICN ;
IFTK if
LPARENT (
IDENFR f5
LPARENT (
IDENFR i
COMMA ,
IDENFR j
COMMA ,
IDENFR k
RPARENT )
EQL ==
IDENFR i
RPARENT )
PRINTFTK printf
LPARENT (
STRCON "Basic for and multiple params function pass!\n"
RPARENT )
SEMICN ;
IDENFR x
ASSIGN =
INTCON 0
SEMICN ;
IDENFR f6
LPARENT (
IDENFR c
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "Recursive Success, count = %d\n"
COMMA ,
IDENFR x
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "This C level file include decl, if, for ,continue, break, basic LOrExp. No block\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "Pass Success!"
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
VOIDTK void
IDENFR f3
LPARENT (
INTTK int
IDENFR a
RPARENT )
LBRACE {
IDENFR x
ASSIGN =
IDENFR a
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "21373457\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR i
COMMA ,
IDENFR j
ASSIGN =
INTCON 5
COMMA ,
IDENFR k
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
INTCON 5
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 5
RPARENT )
PRINTFTK printf
LPARENT (
STRCON "Empty for pass!\n"
RPARENT )
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
INTCON 2
SEMICN ;
RPARENT )
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 2
SEMICN ;
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 4
RPARENT )
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
IDENFR i
LSS <
INTCON 5
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
LSS <
INTCON 5
RPARENT )
CONTINUETK continue
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 2
SEMICN ;
RBRACE }
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 5
SEMICN ;
SEMICN ;
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 6
RPARENT )
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
IDENFR i
LSS <
INTCON 7
SEMICN ;
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 8
RPARENT )
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
SEMICN ;
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 10
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "One stmt for pass!\n"
RPARENT )
SEMICN ;
BREAKTK break
SEMICN ;
RBRACE }
RBRACE }
IDENFR f1
LPARENT (
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR x
EQL ==
INTCON 5
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR f2
LPARENT (
RPARENT )
EQL ==
MINU -
INTCON 1
RPARENT )
PRINTFTK printf
LPARENT (
STRCON "Basic for and no params function pass!\n"
RPARENT )
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "Please input 5 number (no zero)\n"
RPARENT )
SEMICN ;
IDENFR x
ASSIGN =
MINU -
INTCON 1
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
MULT *
IDENFR i
LSS <
IDENFR j
MULT *
IDENFR j
DIV /
LPARENT (
INTCON 5
MINU -
INTCON 4
RPARENT )
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IDENFR k
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR f3
LPARENT (
IDENFR f4
LPARENT (
IDENFR k
RPARENT )
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR x
LSS <
INTCON 0
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR x
GRE >
INTCON 0
RPARENT )
LBRACE {
CONTINUETK continue
SEMICN ;
RBRACE }
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR x
GEQ >=
INTCON 0
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "Basic for and one params function pass!\n"
RPARENT )
SEMICN ;
RBRACE }
IDENFR i
ASSIGN =
INTCON 10
SEMICN ;
IDENFR j
ASSIGN =
INTCON 5
SEMICN ;
IDENFR k
ASSIGN =
INTCON 7
SEMICN ;
IFTK if
LPARENT (
IDENFR f5
LPARENT (
IDENFR i
COMMA ,
IDENFR j
COMMA ,
IDENFR k
RPARENT )
EQL ==
IDENFR i
RPARENT )
PRINTFTK printf
LPARENT (
STRCON "Basic for and multiple params function pass!\n"
RPARENT )
SEMICN ;
IDENFR x
ASSIGN =
INTCON 0
SEMICN ;
IDENFR f6
LPARENT (
IDENFR c
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "Recursive Success, count = %d\n"
COMMA ,
IDENFR x
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "This C level file include decl, if, for ,continue, break, basic LOrExp. No block\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "Pass Success!"
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
VOIDTK void
IDENFR f3
LPARENT (
INTTK int
IDENFR a
RPARENT )
LBRACE {
IDENFR x
ASSIGN =
IDENFR a
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "21373457\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR i
COMMA ,
IDENFR j
ASSIGN =
INTCON 5
COMMA ,
IDENFR k
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
INTCON 5
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 5
RPARENT )
PRINTFTK printf
LPARENT (
STRCON "Empty for pass!\n"
RPARENT )
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
INTCON 2
SEMICN ;
RPARENT )
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 2
SEMICN ;
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 4
RPARENT )
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
IDENFR i
LSS <
INTCON 5
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
LSS <
INTCON 5
RPARENT )
CONTINUETK continue
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 2
SEMICN ;
RBRACE }
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 5
SEMICN ;
SEMICN ;
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 6
RPARENT )
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
IDENFR i
LSS <
INTCON 7
SEMICN ;
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 8
RPARENT )
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
SEMICN ;
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 10
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "One stmt for pass!\n"
RPARENT )
SEMICN ;
BREAKTK break
SEMICN ;
RBRACE }
RBRACE }
IDENFR f1
LPARENT (
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR x
EQL ==
INTCON 5
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR f2
LPARENT (
RPARENT )
EQL ==
MINU -
INTCON 1
RPARENT )
PRINTFTK printf
LPARENT (
STRCON "Basic for and no params function pass!\n"
RPARENT )
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "Please input 5 number (no zero)\n"
RPARENT )
SEMICN ;
IDENFR x
ASSIGN =
MINU -
INTCON 1
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
MULT *
IDENFR i
LSS <
IDENFR j
MULT *
IDENFR j
DIV /
LPARENT (
INTCON 5
MINU -
INTCON 4
RPARENT )
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IDENFR k
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR f3
LPARENT (
IDENFR f4
LPARENT (
IDENFR k
RPARENT )
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR x
LSS <
INTCON 0
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR x
GRE >
INTCON 0
RPARENT )
LBRACE {
CONTINUETK continue
SEMICN ;
RBRACE }
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR x
GEQ >=
INTCON 0
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "Basic for and one params function pass!\n"
RPARENT )
SEMICN ;
RBRACE }
IDENFR i
ASSIGN =
INTCON 10
SEMICN ;
IDENFR j
ASSIGN =
INTCON 5
SEMICN ;
IDENFR k
ASSIGN =
INTCON 7
SEMICN ;
IFTK if
LPARENT (
IDENFR f5
LPARENT (
IDENFR i
COMMA ,
IDENFR j
COMMA ,
IDENFR k
RPARENT )
EQL ==
IDENFR i
RPARENT )
PRINTFTK printf
LPARENT (
STRCON "Basic for and multiple params function pass!\n"
RPARENT )
SEMICN ;
IDENFR x
ASSIGN =
INTCON 0
SEMICN ;
IDENFR f6
LPARENT (
IDENFR c
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "Recursive Success, count = %d\n"
COMMA ,
IDENFR x
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "This C level file include decl, if, for ,continue, break, basic LOrExp. No block\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "Pass Success!"
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
VOIDTK void
IDENFR f3
LPARENT (
INTTK int
IDENFR a
RPARENT )
LBRACE {
IDENFR x
ASSIGN =
IDENFR a
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "21373457\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR i
COMMA ,
IDENFR j
ASSIGN =
INTCON 5
COMMA ,
IDENFR k
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
INTCON 5
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 5
RPARENT )
PRINTFTK printf
LPARENT (
STRCON "Empty for pass!\n"
RPARENT )
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
INTCON 2
SEMICN ;
RPARENT )
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 2
SEMICN ;
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 4
RPARENT )
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
IDENFR i
LSS <
INTCON 5
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
LSS <
INTCON 5
RPARENT )
CONTINUETK continue
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 2
SEMICN ;
RBRACE }
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 5
SEMICN ;
SEMICN ;
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 6
RPARENT )
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
IDENFR i
LSS <
INTCON 7
SEMICN ;
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 8
RPARENT )
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
SEMICN ;
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 10
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "One stmt for pass!\n"
RPARENT )
SEMICN ;
BREAKTK break
SEMICN ;
RBRACE }
RBRACE }
IDENFR f1
LPARENT (
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR x
EQL ==
INTCON 5
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR f2
LPARENT (
RPARENT )
EQL ==
MINU -
INTCON 1
RPARENT )
PRINTFTK printf
LPARENT (
STRCON "Basic for and no params function pass!\n"
RPARENT )
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "Please input 5 number (no zero)\n"
RPARENT )
SEMICN ;
IDENFR x
ASSIGN =
MINU -
INTCON 1
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
MULT *
IDENFR i
LSS <
IDENFR j
MULT *
IDENFR j
DIV /
LPARENT (
INTCON 5
MINU -
INTCON 4
RPARENT )
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IDENFR k
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR f3
LPARENT (
IDENFR f4
LPARENT (
IDENFR k
RPARENT )
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR x
LSS <
INTCON 0
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR x
GRE >
INTCON 0
RPARENT )
LBRACE {
CONTINUETK continue
SEMICN ;
RBRACE }
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR x
GEQ >=
INTCON 0
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "Basic for and one params function pass!\n"
RPARENT )
SEMICN ;
RBRACE }
IDENFR i
ASSIGN =
INTCON 10
SEMICN ;
IDENFR j
ASSIGN =
INTCON 5
SEMICN ;
IDENFR k
ASSIGN =
INTCON 7
SEMICN ;
IFTK if
LPARENT (
IDENFR f5
LPARENT (
IDENFR i
COMMA ,
IDENFR j
COMMA ,
IDENFR k
RPARENT )
EQL ==
IDENFR i
RPARENT )
PRINTFTK printf
LPARENT (
STRCON "Basic for and multiple params function pass!\n"
RPARENT )
SEMICN ;
IDENFR x
ASSIGN =
INTCON 0
SEMICN ;
IDENFR f6
LPARENT (
IDENFR c
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "Recursive Success, count = %d\n"
COMMA ,
IDENFR x
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "This C level file include decl, if, for ,continue, break, basic LOrExp. No block\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "Pass Success!"
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "21373457\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR i
COMMA ,
IDENFR j
ASSIGN =
INTCON 5
COMMA ,
IDENFR k
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
INTCON 5
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 5
RPARENT )
PRINTFTK printf
LPARENT (
STRCON "Empty for pass!\n"
RPARENT )
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
INTCON 2
SEMICN ;
RPARENT )
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 2
SEMICN ;
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 4
RPARENT )
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
IDENFR i
LSS <
INTCON 5
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
LSS <
INTCON 5
RPARENT )
CONTINUETK continue
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 2
SEMICN ;
RBRACE }
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 5
SEMICN ;
SEMICN ;
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 6
RPARENT )
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
IDENFR i
LSS <
INTCON 7
SEMICN ;
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 8
RPARENT )
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
SEMICN ;
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 10
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "One stmt for pass!\n"
RPARENT )
SEMICN ;
BREAKTK break
SEMICN ;
RBRACE }
RBRACE }
IDENFR f1
LPARENT (
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR x
EQL ==
INTCON 5
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR f2
LPARENT (
RPARENT )
EQL ==
MINU -
INTCON 1
RPARENT )
PRINTFTK printf
LPARENT (
STRCON "Basic for and no params function pass!\n"
RPARENT )
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "Please input 5 number (no zero)\n"
RPARENT )
SEMICN ;
IDENFR x
ASSIGN =
MINU -
INTCON 1
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
MULT *
IDENFR i
LSS <
IDENFR j
MULT *
IDENFR j
DIV /
LPARENT (
INTCON 5
MINU -
INTCON 4
RPARENT )
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IDENFR k
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR f3
LPARENT (
IDENFR f4
LPARENT (
IDENFR k
RPARENT )
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR x
LSS <
INTCON 0
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR x
GRE >
INTCON 0
RPARENT )
LBRACE {
CONTINUETK continue
SEMICN ;
RBRACE }
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR x
GEQ >=
INTCON 0
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "Basic for and one params function pass!\n"
RPARENT )
SEMICN ;
RBRACE }
IDENFR i
ASSIGN =
INTCON 10
SEMICN ;
IDENFR j
ASSIGN =
INTCON 5
SEMICN ;
IDENFR k
ASSIGN =
INTCON 7
SEMICN ;
IFTK if
LPARENT (
IDENFR f5
LPARENT (
IDENFR i
COMMA ,
IDENFR j
COMMA ,
IDENFR k
RPARENT )
EQL ==
IDENFR i
RPARENT )
PRINTFTK printf
LPARENT (
STRCON "Basic for and multiple params function pass!\n"
RPARENT )
SEMICN ;
IDENFR x
ASSIGN =
INTCON 0
SEMICN ;
IDENFR f6
LPARENT (
IDENFR c
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "Recursive Success, count = %d\n"
COMMA ,
IDENFR x
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "This C level file include decl, if, for ,continue, break, basic LOrExp. No block\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "Pass Success!"
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "21373457\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR i
COMMA ,
IDENFR j
ASSIGN =
INTCON 5
COMMA ,
IDENFR k
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
INTCON 5
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 5
RPARENT )
PRINTFTK printf
LPARENT (
STRCON "Empty for pass!\n"
RPARENT )
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
INTCON 2
SEMICN ;
RPARENT )
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 2
SEMICN ;
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 4
RPARENT )
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
IDENFR i
LSS <
INTCON 5
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
LSS <
INTCON 5
RPARENT )
CONTINUETK continue
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 2
SEMICN ;
RBRACE }
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 5
SEMICN ;
SEMICN ;
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 6
RPARENT )
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
IDENFR i
LSS <
INTCON 7
SEMICN ;
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 8
RPARENT )
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
SEMICN ;
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 10
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "One stmt for pass!\n"
RPARENT )
SEMICN ;
BREAKTK break
SEMICN ;
RBRACE }
RBRACE }
IDENFR f1
LPARENT (
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR x
EQL ==
INTCON 5
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR f2
LPARENT (
RPARENT )
EQL ==
MINU -
INTCON 1
RPARENT )
PRINTFTK printf
LPARENT (
STRCON "Basic for and no params function pass!\n"
RPARENT )
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "Please input 5 number (no zero)\n"
RPARENT )
SEMICN ;
IDENFR x
ASSIGN =
MINU -
INTCON 1
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
MULT *
IDENFR i
LSS <
IDENFR j
MULT *
IDENFR j
DIV /
LPARENT (
INTCON 5
MINU -
INTCON 4
RPARENT )
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IDENFR k
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR f3
LPARENT (
IDENFR f4
LPARENT (
IDENFR k
RPARENT )
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR x
LSS <
INTCON 0
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR x
GRE >
INTCON 0
RPARENT )
LBRACE {
CONTINUETK continue
SEMICN ;
RBRACE }
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR x
GEQ >=
INTCON 0
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "Basic for and one params function pass!\n"
RPARENT )
SEMICN ;
RBRACE }
IDENFR i
ASSIGN =
INTCON 10
SEMICN ;
IDENFR j
ASSIGN =
INTCON 5
SEMICN ;
IDENFR k
ASSIGN =
INTCON 7
SEMICN ;
IFTK if
LPARENT (
IDENFR f5
LPARENT (
IDENFR i
COMMA ,
IDENFR j
COMMA ,
IDENFR k
RPARENT )
EQL ==
IDENFR i
RPARENT )
PRINTFTK printf
LPARENT (
STRCON "Basic for and multiple params function pass!\n"
RPARENT )
SEMICN ;
IDENFR x
ASSIGN =
INTCON 0
SEMICN ;
IDENFR f6
LPARENT (
IDENFR c
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "Recursive Success, count = %d\n"
COMMA ,
IDENFR x
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "This C level file include decl, if, for ,continue, break, basic LOrExp. No block\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "Pass Success!"
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "21373457\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR i
COMMA ,
IDENFR j
ASSIGN =
INTCON 5
COMMA ,
IDENFR k
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
INTCON 5
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 5
RPARENT )
PRINTFTK printf
LPARENT (
STRCON "Empty for pass!\n"
RPARENT )
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
INTCON 2
SEMICN ;
RPARENT )
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 2
SEMICN ;
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 4
RPARENT )
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
IDENFR i
LSS <
INTCON 5
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
LSS <
INTCON 5
RPARENT )
CONTINUETK continue
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 2
SEMICN ;
RBRACE }
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 5
SEMICN ;
SEMICN ;
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 6
RPARENT )
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
IDENFR i
LSS <
INTCON 7
SEMICN ;
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 8
RPARENT )
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
SEMICN ;
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 10
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "One stmt for pass!\n"
RPARENT )
SEMICN ;
BREAKTK break
SEMICN ;
RBRACE }
RBRACE }
IDENFR f1
LPARENT (
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR x
EQL ==
INTCON 5
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR f2
LPARENT (
RPARENT )
EQL ==
MINU -
INTCON 1
RPARENT )
PRINTFTK printf
LPARENT (
STRCON "Basic for and no params function pass!\n"
RPARENT )
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "Please input 5 number (no zero)\n"
RPARENT )
SEMICN ;
IDENFR x
ASSIGN =
MINU -
INTCON 1
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
MULT *
IDENFR i
LSS <
IDENFR j
MULT *
IDENFR j
DIV /
LPARENT (
INTCON 5
MINU -
INTCON 4
RPARENT )
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IDENFR k
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR f3
LPARENT (
IDENFR f4
LPARENT (
IDENFR k
RPARENT )
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR x
LSS <
INTCON 0
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR x
GRE >
INTCON 0
RPARENT )
LBRACE {
CONTINUETK continue
SEMICN ;
RBRACE }
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR x
GEQ >=
INTCON 0
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "Basic for and one params function pass!\n"
RPARENT )
SEMICN ;
RBRACE }
IDENFR i
ASSIGN =
INTCON 10
SEMICN ;
IDENFR j
ASSIGN =
INTCON 5
SEMICN ;
IDENFR k
ASSIGN =
INTCON 7
SEMICN ;
IFTK if
LPARENT (
IDENFR f5
LPARENT (
IDENFR i
COMMA ,
IDENFR j
COMMA ,
IDENFR k
RPARENT )
EQL ==
IDENFR i
RPARENT )
PRINTFTK printf
LPARENT (
STRCON "Basic for and multiple params function pass!\n"
RPARENT )
SEMICN ;
IDENFR x
ASSIGN =
INTCON 0
SEMICN ;
IDENFR f6
LPARENT (
IDENFR c
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "Recursive Success, count = %d\n"
COMMA ,
IDENFR x
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "This C level file include decl, if, for ,continue, break, basic LOrExp. No block\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "Pass Success!"
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "21373457\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR i
COMMA ,
IDENFR j
ASSIGN =
INTCON 5
COMMA ,
IDENFR k
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
INTCON 5
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 5
RPARENT )
PRINTFTK printf
LPARENT (
STRCON "Empty for pass!\n"
RPARENT )
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
INTCON 2
SEMICN ;
RPARENT )
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 2
SEMICN ;
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 4
RPARENT )
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
IDENFR i
LSS <
INTCON 5
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
LSS <
INTCON 5
RPARENT )
CONTINUETK continue
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 2
SEMICN ;
RBRACE }
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 5
SEMICN ;
SEMICN ;
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 6
RPARENT )
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
IDENFR i
LSS <
INTCON 7
SEMICN ;
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 8
RPARENT )
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
SEMICN ;
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 10
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "One stmt for pass!\n"
RPARENT )
SEMICN ;
BREAKTK break
SEMICN ;
RBRACE }
RBRACE }
IDENFR f1
LPARENT (
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR x
EQL ==
INTCON 5
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR f2
LPARENT (
RPARENT )
EQL ==
MINU -
INTCON 1
RPARENT )
PRINTFTK printf
LPARENT (
STRCON "Basic for and no params function pass!\n"
RPARENT )
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "Please input 5 number (no zero)\n"
RPARENT )
SEMICN ;
IDENFR x
ASSIGN =
MINU -
INTCON 1
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
MULT *
IDENFR i
LSS <
IDENFR j
MULT *
IDENFR j
DIV /
LPARENT (
INTCON 5
MINU -
INTCON 4
RPARENT )
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IDENFR k
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR f3
LPARENT (
IDENFR f4
LPARENT (
IDENFR k
RPARENT )
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR x
LSS <
INTCON 0
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR x
GRE >
INTCON 0
RPARENT )
LBRACE {
CONTINUETK continue
SEMICN ;
RBRACE }
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR x
GEQ >=
INTCON 0
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "Basic for and one params function pass!\n"
RPARENT )
SEMICN ;
RBRACE }
IDENFR i
ASSIGN =
INTCON 10
SEMICN ;
IDENFR j
ASSIGN =
INTCON 5
SEMICN ;
IDENFR k
ASSIGN =
INTCON 7
SEMICN ;
IFTK if
LPARENT (
IDENFR f5
LPARENT (
IDENFR i
COMMA ,
IDENFR j
COMMA ,
IDENFR k
RPARENT )
EQL ==
IDENFR i
RPARENT )
PRINTFTK printf
LPARENT (
STRCON "Basic for and multiple params function pass!\n"
RPARENT )
SEMICN ;
IDENFR x
ASSIGN =
INTCON 0
SEMICN ;
IDENFR f6
LPARENT (
IDENFR c
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "Recursive Success, count = %d\n"
COMMA ,
IDENFR x
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "This C level file include decl, if, for ,continue, break, basic LOrExp. No block\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "Pass Success!"
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "21373457\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR i
COMMA ,
IDENFR j
ASSIGN =
INTCON 5
COMMA ,
IDENFR k
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
INTCON 5
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 5
RPARENT )
PRINTFTK printf
LPARENT (
STRCON "Empty for pass!\n"
RPARENT )
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
INTCON 2
SEMICN ;
RPARENT )
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 2
SEMICN ;
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 4
RPARENT )
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
IDENFR i
LSS <
INTCON 5
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
LSS <
INTCON 5
RPARENT )
CONTINUETK continue
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 2
SEMICN ;
RBRACE }
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 5
SEMICN ;
SEMICN ;
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 6
RPARENT )
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
IDENFR i
LSS <
INTCON 7
SEMICN ;
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 8
RPARENT )
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
SEMICN ;
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 10
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "One stmt for pass!\n"
RPARENT )
SEMICN ;
BREAKTK break
SEMICN ;
RBRACE }
RBRACE }
IDENFR f1
LPARENT (
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR x
EQL ==
INTCON 5
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR f2
LPARENT (
RPARENT )
EQL ==
MINU -
INTCON 1
RPARENT )
PRINTFTK printf
LPARENT (
STRCON "Basic for and no params function pass!\n"
RPARENT )
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "Please input 5 number (no zero)\n"
RPARENT )
SEMICN ;
IDENFR x
ASSIGN =
MINU -
INTCON 1
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
MULT *
IDENFR i
LSS <
IDENFR j
MULT *
IDENFR j
DIV /
LPARENT (
INTCON 5
MINU -
INTCON 4
RPARENT )
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IDENFR k
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR f3
LPARENT (
IDENFR f4
LPARENT (
IDENFR k
RPARENT )
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR x
LSS <
INTCON 0
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR x
GRE >
INTCON 0
RPARENT )
LBRACE {
CONTINUETK continue
SEMICN ;
RBRACE }
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR x
GEQ >=
INTCON 0
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "Basic for and one params function pass!\n"
RPARENT )
SEMICN ;
RBRACE }
IDENFR i
ASSIGN =
INTCON 10
SEMICN ;
IDENFR j
ASSIGN =
INTCON 5
SEMICN ;
IDENFR k
ASSIGN =
INTCON 7
SEMICN ;
IFTK if
LPARENT (
IDENFR f5
LPARENT (
IDENFR i
COMMA ,
IDENFR j
COMMA ,
IDENFR k
RPARENT )
EQL ==
IDENFR i
RPARENT )
PRINTFTK printf
LPARENT (
STRCON "Basic for and multiple params function pass!\n"
RPARENT )
SEMICN ;
IDENFR x
ASSIGN =
INTCON 0
SEMICN ;
IDENFR f6
LPARENT (
IDENFR c
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "Recursive Success, count = %d\n"
COMMA ,
IDENFR x
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "This C level file include decl, if, for ,continue, break, basic LOrExp. No block\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "Pass Success!"
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR a
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR a
SEMICN ;
IDENFR a
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR a
SEMICN ;
IDENFR a
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR a
SEMICN ;
IDENFR a
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
CONSTTK const
INTTK int
IDENFR c
ASSIGN =
INTCON 10
SEMICN ;
INTTK int
IDENFR x
SEMICN ;
VOIDTK void
IDENFR f1
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR i
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
INTCON 5
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IDENFR x
ASSIGN =
IDENFR x
PLUS +
INTCON 1
SEMICN ;
RBRACE }
RBRACE }
INTTK int
IDENFR f2
LPARENT (
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR x
GRE >
INTCON 0
RPARENT )
LBRACE {
RETURNTK return
MINU -
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
RETURNTK return
INTCON 1
SEMICN ;
RBRACE }
RETURNTK return
IDENFR x
SEMICN ;
RBRACE }
VOIDTK void
IDENFR f3
LPARENT (
INTTK int
IDENFR a
RPARENT )
LBRACE {
IDENFR x
ASSIGN =
IDENFR a
SEMICN ;
RBRACE }
INTTK int
IDENFR f4
LPARENT (
INTTK int
IDENFR a
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR a
GRE >
INTCON 0
RPARENT )
RETURNTK return
PLUS +
IDENFR a
SEMICN ;
RETURNTK return
MINU -
IDENFR a
SEMICN ;
RBRACE }
INTTK int
IDENFR f5
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
COMMA ,
INTTK int
IDENFR c
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR a
GRE >
IDENFR b
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR a
GRE >
IDENFR c
RPARENT )
RETURNTK return
IDENFR a
SEMICN ;
ELSETK else
RETURNTK return
IDENFR c
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR b
GRE >
IDENFR c
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR b
GRE >
IDENFR a
RPARENT )
RETURNTK return
IDENFR b
SEMICN ;
ELSETK else
RETURNTK return
IDENFR a
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR c
GRE >
IDENFR a
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR c
GRE >
IDENFR b
RPARENT )
RETURNTK return
IDENFR c
SEMICN ;
ELSETK else
RETURNTK return
IDENFR b
SEMICN ;
RBRACE }
RETURNTK return
IDENFR f4
LPARENT (
IDENFR a
RPARENT )
SEMICN ;
RBRACE }
INTTK int
IDENFR f6
LPARENT (
INTTK int
IDENFR a
RPARENT )
LBRACE {
IDENFR x
ASSIGN =
IDENFR x
PLUS +
IDENFR a
SEMICN ;
IFTK if
LPARENT (
IDENFR a
EQL ==
INTCON 0
RPARENT )
LBRACE {
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
RETURNTK return
IDENFR f6
LPARENT (
IDENFR a
MINU -
INTCON 1
RPARENT )
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "21373457\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR i
COMMA ,
IDENFR j
ASSIGN =
INTCON 5
COMMA ,
IDENFR k
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
INTCON 5
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 5
RPARENT )
PRINTFTK printf
LPARENT (
STRCON "Empty for pass!\n"
RPARENT )
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
INTCON 2
SEMICN ;
RPARENT )
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 2
SEMICN ;
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 4
RPARENT )
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
IDENFR i
LSS <
INTCON 5
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
LSS <
INTCON 5
RPARENT )
CONTINUETK continue
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 2
SEMICN ;
RBRACE }
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 5
SEMICN ;
SEMICN ;
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 6
RPARENT )
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
IDENFR i
LSS <
INTCON 7
SEMICN ;
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 8
RPARENT )
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
SEMICN ;
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 10
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "One stmt for pass!\n"
RPARENT )
SEMICN ;
BREAKTK break
SEMICN ;
RBRACE }
RBRACE }
IDENFR f1
LPARENT (
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR x
EQL ==
INTCON 5
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR f2
LPARENT (
RPARENT )
EQL ==
MINU -
INTCON 1
RPARENT )
PRINTFTK printf
LPARENT (
STRCON "Basic for and no params function pass!\n"
RPARENT )
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "Please input 5 number (no zero)\n"
RPARENT )
SEMICN ;
IDENFR x
ASSIGN =
MINU -
INTCON 1
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
MULT *
IDENFR i
LSS <
IDENFR j
MULT *
IDENFR j
DIV /
LPARENT (
INTCON 5
MINU -
INTCON 4
RPARENT )
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IDENFR k
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR f3
LPARENT (
IDENFR f4
LPARENT (
IDENFR k
RPARENT )
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR x
LSS <
INTCON 0
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR x
GRE >
INTCON 0
RPARENT )
LBRACE {
CONTINUETK continue
SEMICN ;
RBRACE }
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR x
GEQ >=
INTCON 0
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "Basic for and one params function pass!\n"
RPARENT )
SEMICN ;
RBRACE }
IDENFR i
ASSIGN =
INTCON 10
SEMICN ;
IDENFR j
ASSIGN =
INTCON 5
SEMICN ;
IDENFR k
ASSIGN =
INTCON 7
SEMICN ;
IFTK if
LPARENT (
IDENFR f5
LPARENT (
IDENFR i
COMMA ,
IDENFR j
COMMA ,
IDENFR k
RPARENT )
EQL ==
IDENFR i
RPARENT )
PRINTFTK printf
LPARENT (
STRCON "Basic for and multiple params function pass!\n"
RPARENT )
SEMICN ;
IDENFR x
ASSIGN =
INTCON 0
SEMICN ;
IDENFR f6
LPARENT (
IDENFR c
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "Recursive Success, count = %d\n"
COMMA ,
IDENFR x
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "This C level file include decl, if, for ,continue, break, basic LOrExp. No block\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "Pass Success!"
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
CONSTTK const
INTTK int
IDENFR c
ASSIGN =
INTCON 10
SEMICN ;
INTTK int
IDENFR x
SEMICN ;
VOIDTK void
IDENFR f1
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR i
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
INTCON 5
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IDENFR x
ASSIGN =
IDENFR x
PLUS +
INTCON 1
SEMICN ;
RBRACE }
RBRACE }
INTTK int
IDENFR f2
LPARENT (
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR x
GRE >
INTCON 0
RPARENT )
LBRACE {
RETURNTK return
MINU -
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
RETURNTK return
INTCON 1
SEMICN ;
RBRACE }
RETURNTK return
IDENFR x
SEMICN ;
RBRACE }
VOIDTK void
IDENFR f3
LPARENT (
INTTK int
IDENFR a
RPARENT )
LBRACE {
IDENFR x
ASSIGN =
IDENFR a
SEMICN ;
RBRACE }
INTTK int
IDENFR f4
LPARENT (
INTTK int
IDENFR a
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR a
GRE >
INTCON 0
RPARENT )
RETURNTK return
PLUS +
IDENFR a
SEMICN ;
RETURNTK return
MINU -
IDENFR a
SEMICN ;
RBRACE }
INTTK int
IDENFR f5
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
COMMA ,
INTTK int
IDENFR c
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR a
GRE >
IDENFR b
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR a
GRE >
IDENFR c
RPARENT )
RETURNTK return
IDENFR a
SEMICN ;
ELSETK else
RETURNTK return
IDENFR c
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR b
GRE >
IDENFR c
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR b
GRE >
IDENFR a
RPARENT )
RETURNTK return
IDENFR b
SEMICN ;
ELSETK else
RETURNTK return
IDENFR a
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR c
GRE >
IDENFR a
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR c
GRE >
IDENFR b
RPARENT )
RETURNTK return
IDENFR c
SEMICN ;
ELSETK else
RETURNTK return
IDENFR b
SEMICN ;
RBRACE }
RETURNTK return
IDENFR f4
LPARENT (
IDENFR a
RPARENT )
SEMICN ;
RBRACE }
INTTK int
IDENFR f6
LPARENT (
INTTK int
IDENFR a
RPARENT )
LBRACE {
IDENFR x
ASSIGN =
IDENFR x
PLUS +
IDENFR a
SEMICN ;
IFTK if
LPARENT (
IDENFR a
EQL ==
INTCON 0
RPARENT )
LBRACE {
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
RETURNTK return
IDENFR f6
LPARENT (
IDENFR a
MINU -
INTCON 1
RPARENT )
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "21373457\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR i
COMMA ,
IDENFR j
ASSIGN =
INTCON 5
COMMA ,
IDENFR k
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
INTCON 5
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 5
RPARENT )
PRINTFTK printf
LPARENT (
STRCON "Empty for pass!\n"
RPARENT )
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
INTCON 2
SEMICN ;
RPARENT )
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 2
SEMICN ;
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 4
RPARENT )
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
IDENFR i
LSS <
INTCON 5
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
LSS <
INTCON 5
RPARENT )
CONTINUETK continue
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 2
SEMICN ;
RBRACE }
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 5
SEMICN ;
SEMICN ;
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 6
RPARENT )
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
IDENFR i
LSS <
INTCON 7
SEMICN ;
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 8
RPARENT )
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
SEMICN ;
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 10
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "One stmt for pass!\n"
RPARENT )
SEMICN ;
BREAKTK break
SEMICN ;
RBRACE }
RBRACE }
IDENFR f1
LPARENT (
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR x
EQL ==
INTCON 5
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR f2
LPARENT (
RPARENT )
EQL ==
MINU -
INTCON 1
RPARENT )
PRINTFTK printf
LPARENT (
STRCON "Basic for and no params function pass!\n"
RPARENT )
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "Please input 5 number (no zero)\n"
RPARENT )
SEMICN ;
IDENFR x
ASSIGN =
MINU -
INTCON 1
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
MULT *
IDENFR i
LSS <
IDENFR j
MULT *
IDENFR j
DIV /
LPARENT (
INTCON 5
MINU -
INTCON 4
RPARENT )
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IDENFR k
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR f3
LPARENT (
IDENFR f4
LPARENT (
IDENFR k
RPARENT )
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR x
LSS <
INTCON 0
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR x
GRE >
INTCON 0
RPARENT )
LBRACE {
CONTINUETK continue
SEMICN ;
RBRACE }
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR x
GEQ >=
INTCON 0
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "Basic for and one params function pass!\n"
RPARENT )
SEMICN ;
RBRACE }
IDENFR i
ASSIGN =
INTCON 10
SEMICN ;
IDENFR j
ASSIGN =
INTCON 5
SEMICN ;
IDENFR k
ASSIGN =
INTCON 7
SEMICN ;
IFTK if
LPARENT (
IDENFR f5
LPARENT (
IDENFR i
COMMA ,
IDENFR j
COMMA ,
IDENFR k
RPARENT )
EQL ==
IDENFR i
RPARENT )
PRINTFTK printf
LPARENT (
STRCON "Basic for and multiple params function pass!\n"
RPARENT )
SEMICN ;
IDENFR x
ASSIGN =
INTCON 0
SEMICN ;
IDENFR f6
LPARENT (
IDENFR c
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "Recursive Success, count = %d\n"
COMMA ,
IDENFR x
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "This C level file include decl, if, for ,continue, break, basic LOrExp. No block\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "Pass Success!"
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
CONSTTK const
INTTK int
IDENFR c
ASSIGN =
INTCON 10
SEMICN ;
INTTK int
IDENFR x
SEMICN ;
VOIDTK void
IDENFR f1
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR i
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
INTCON 5
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IDENFR x
ASSIGN =
IDENFR x
PLUS +
INTCON 1
SEMICN ;
RBRACE }
RBRACE }
INTTK int
IDENFR f2
LPARENT (
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR x
GRE >
INTCON 0
RPARENT )
LBRACE {
RETURNTK return
MINU -
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
RETURNTK return
INTCON 1
SEMICN ;
RBRACE }
RETURNTK return
IDENFR x
SEMICN ;
RBRACE }
VOIDTK void
IDENFR f3
LPARENT (
INTTK int
IDENFR a
RPARENT )
LBRACE {
IDENFR x
ASSIGN =
IDENFR a
SEMICN ;
RBRACE }
INTTK int
IDENFR f4
LPARENT (
INTTK int
IDENFR a
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR a
GRE >
INTCON 0
RPARENT )
RETURNTK return
PLUS +
IDENFR a
SEMICN ;
RETURNTK return
MINU -
IDENFR a
SEMICN ;
RBRACE }
INTTK int
IDENFR f5
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
COMMA ,
INTTK int
IDENFR c
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR a
GRE >
IDENFR b
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR a
GRE >
IDENFR c
RPARENT )
RETURNTK return
IDENFR a
SEMICN ;
ELSETK else
RETURNTK return
IDENFR c
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR b
GRE >
IDENFR c
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR b
GRE >
IDENFR a
RPARENT )
RETURNTK return
IDENFR b
SEMICN ;
ELSETK else
RETURNTK return
IDENFR a
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR c
GRE >
IDENFR a
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR c
GRE >
IDENFR b
RPARENT )
RETURNTK return
IDENFR c
SEMICN ;
ELSETK else
RETURNTK return
IDENFR b
SEMICN ;
RBRACE }
RETURNTK return
IDENFR f4
LPARENT (
IDENFR a
RPARENT )
SEMICN ;
RBRACE }
INTTK int
IDENFR f6
LPARENT (
INTTK int
IDENFR a
RPARENT )
LBRACE {
IDENFR x
ASSIGN =
IDENFR x
PLUS +
IDENFR a
SEMICN ;
IFTK if
LPARENT (
IDENFR a
EQL ==
INTCON 0
RPARENT )
LBRACE {
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
RETURNTK return
IDENFR f6
LPARENT (
IDENFR a
MINU -
INTCON 1
RPARENT )
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "21373457\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR i
COMMA ,
IDENFR j
ASSIGN =
INTCON 5
COMMA ,
IDENFR k
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
INTCON 5
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 5
RPARENT )
PRINTFTK printf
LPARENT (
STRCON "Empty for pass!\n"
RPARENT )
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
INTCON 2
SEMICN ;
RPARENT )
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 2
SEMICN ;
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 4
RPARENT )
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
IDENFR i
LSS <
INTCON 5
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
LSS <
INTCON 5
RPARENT )
CONTINUETK continue
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 2
SEMICN ;
RBRACE }
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 5
SEMICN ;
SEMICN ;
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 6
RPARENT )
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
IDENFR i
LSS <
INTCON 7
SEMICN ;
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 8
RPARENT )
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
SEMICN ;
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 10
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "One stmt for pass!\n"
RPARENT )
SEMICN ;
BREAKTK break
SEMICN ;
RBRACE }
RBRACE }
IDENFR f1
LPARENT (
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR x
EQL ==
INTCON 5
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR f2
LPARENT (
RPARENT )
EQL ==
MINU -
INTCON 1
RPARENT )
PRINTFTK printf
LPARENT (
STRCON "Basic for and no params function pass!\n"
RPARENT )
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "Please input 5 number (no zero)\n"
RPARENT )
SEMICN ;
IDENFR x
ASSIGN =
MINU -
INTCON 1
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
MULT *
IDENFR i
LSS <
IDENFR j
MULT *
IDENFR j
DIV /
LPARENT (
INTCON 5
MINU -
INTCON 4
RPARENT )
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IDENFR k
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR f3
LPARENT (
IDENFR f4
LPARENT (
IDENFR k
RPARENT )
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR x
LSS <
INTCON 0
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR x
GRE >
INTCON 0
RPARENT )
LBRACE {
CONTINUETK continue
SEMICN ;
RBRACE }
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR x
GEQ >=
INTCON 0
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "Basic for and one params function pass!\n"
RPARENT )
SEMICN ;
RBRACE }
IDENFR i
ASSIGN =
INTCON 10
SEMICN ;
IDENFR j
ASSIGN =
INTCON 5
SEMICN ;
IDENFR k
ASSIGN =
INTCON 7
SEMICN ;
IFTK if
LPARENT (
IDENFR f5
LPARENT (
IDENFR i
COMMA ,
IDENFR j
COMMA ,
IDENFR k
RPARENT )
EQL ==
IDENFR i
RPARENT )
PRINTFTK printf
LPARENT (
STRCON "Basic for and multiple params function pass!\n"
RPARENT )
SEMICN ;
IDENFR x
ASSIGN =
INTCON 0
SEMICN ;
IDENFR f6
LPARENT (
IDENFR c
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "Recursive Success, count = %d\n"
COMMA ,
IDENFR x
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "This C level file include decl, if, for ,continue, break, basic LOrExp. No block\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "Pass Success!"
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
CONSTTK const
INTTK int
IDENFR c
ASSIGN =
INTCON 10
SEMICN ;
INTTK int
IDENFR x
SEMICN ;
VOIDTK void
IDENFR f1
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR i
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
INTCON 5
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IDENFR x
ASSIGN =
IDENFR x
PLUS +
INTCON 1
SEMICN ;
RBRACE }
RBRACE }
INTTK int
IDENFR f2
LPARENT (
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR x
GRE >
INTCON 0
RPARENT )
LBRACE {
RETURNTK return
MINU -
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
RETURNTK return
INTCON 1
SEMICN ;
RBRACE }
RETURNTK return
IDENFR x
SEMICN ;
RBRACE }
VOIDTK void
IDENFR f3
LPARENT (
INTTK int
IDENFR a
RPARENT )
LBRACE {
IDENFR x
ASSIGN =
IDENFR a
SEMICN ;
RBRACE }
INTTK int
IDENFR f4
LPARENT (
INTTK int
IDENFR a
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR a
GRE >
INTCON 0
RPARENT )
RETURNTK return
PLUS +
IDENFR a
SEMICN ;
RETURNTK return
MINU -
IDENFR a
SEMICN ;
RBRACE }
INTTK int
IDENFR f5
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
COMMA ,
INTTK int
IDENFR c
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR a
GRE >
IDENFR b
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR a
GRE >
IDENFR c
RPARENT )
RETURNTK return
IDENFR a
SEMICN ;
ELSETK else
RETURNTK return
IDENFR c
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR b
GRE >
IDENFR c
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR b
GRE >
IDENFR a
RPARENT )
RETURNTK return
IDENFR b
SEMICN ;
ELSETK else
RETURNTK return
IDENFR a
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR c
GRE >
IDENFR a
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR c
GRE >
IDENFR b
RPARENT )
RETURNTK return
IDENFR c
SEMICN ;
ELSETK else
RETURNTK return
IDENFR b
SEMICN ;
RBRACE }
RETURNTK return
IDENFR f4
LPARENT (
IDENFR a
RPARENT )
SEMICN ;
RBRACE }
INTTK int
IDENFR f6
LPARENT (
INTTK int
IDENFR a
RPARENT )
LBRACE {
IDENFR x
ASSIGN =
IDENFR x
PLUS +
IDENFR a
SEMICN ;
IFTK if
LPARENT (
IDENFR a
EQL ==
INTCON 0
RPARENT )
LBRACE {
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
RETURNTK return
IDENFR f6
LPARENT (
IDENFR a
MINU -
INTCON 1
RPARENT )
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "21373457\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR i
COMMA ,
IDENFR j
ASSIGN =
INTCON 5
COMMA ,
IDENFR k
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
INTCON 5
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 5
RPARENT )
PRINTFTK printf
LPARENT (
STRCON "Empty for pass!\n"
RPARENT )
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
INTCON 2
SEMICN ;
RPARENT )
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 2
SEMICN ;
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 4
RPARENT )
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
IDENFR i
LSS <
INTCON 5
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
LSS <
INTCON 5
RPARENT )
CONTINUETK continue
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 2
SEMICN ;
RBRACE }
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 5
SEMICN ;
SEMICN ;
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 6
RPARENT )
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
IDENFR i
LSS <
INTCON 7
SEMICN ;
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 8
RPARENT )
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
SEMICN ;
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 10
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "One stmt for pass!\n"
RPARENT )
SEMICN ;
BREAKTK break
SEMICN ;
RBRACE }
RBRACE }
IDENFR f1
LPARENT (
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR x
EQL ==
INTCON 5
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR f2
LPARENT (
RPARENT )
EQL ==
MINU -
INTCON 1
RPARENT )
PRINTFTK printf
LPARENT (
STRCON "Basic for and no params function pass!\n"
RPARENT )
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "Please input 5 number (no zero)\n"
RPARENT )
SEMICN ;
IDENFR x
ASSIGN =
MINU -
INTCON 1
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
MULT *
IDENFR i
LSS <
IDENFR j
MULT *
IDENFR j
DIV /
LPARENT (
INTCON 5
MINU -
INTCON 4
RPARENT )
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IDENFR k
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR f3
LPARENT (
IDENFR f4
LPARENT (
IDENFR k
RPARENT )
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR x
LSS <
INTCON 0
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR x
GRE >
INTCON 0
RPARENT )
LBRACE {
CONTINUETK continue
SEMICN ;
RBRACE }
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR x
GEQ >=
INTCON 0
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "Basic for and one params function pass!\n"
RPARENT )
SEMICN ;
RBRACE }
IDENFR i
ASSIGN =
INTCON 10
SEMICN ;
IDENFR j
ASSIGN =
INTCON 5
SEMICN ;
IDENFR k
ASSIGN =
INTCON 7
SEMICN ;
IFTK if
LPARENT (
IDENFR f5
LPARENT (
IDENFR i
COMMA ,
IDENFR j
COMMA ,
IDENFR k
RPARENT )
EQL ==
IDENFR i
RPARENT )
PRINTFTK printf
LPARENT (
STRCON "Basic for and multiple params function pass!\n"
RPARENT )
SEMICN ;
IDENFR x
ASSIGN =
INTCON 0
SEMICN ;
IDENFR f6
LPARENT (
IDENFR c
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "Recursive Success, count = %d\n"
COMMA ,
IDENFR x
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "This C level file include decl, if, for ,continue, break, basic LOrExp. No block\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "Pass Success!"
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
CONSTTK const
INTTK int
IDENFR c
ASSIGN =
INTCON 10
SEMICN ;
INTTK int
IDENFR x
SEMICN ;
VOIDTK void
IDENFR f1
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR i
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
INTCON 5
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IDENFR x
ASSIGN =
IDENFR x
PLUS +
INTCON 1
SEMICN ;
RBRACE }
RBRACE }
INTTK int
IDENFR f2
LPARENT (
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR x
GRE >
INTCON 0
RPARENT )
LBRACE {
RETURNTK return
MINU -
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
RETURNTK return
INTCON 1
SEMICN ;
RBRACE }
RETURNTK return
IDENFR x
SEMICN ;
RBRACE }
VOIDTK void
IDENFR f3
LPARENT (
INTTK int
IDENFR a
RPARENT )
LBRACE {
IDENFR x
ASSIGN =
IDENFR a
SEMICN ;
RBRACE }
INTTK int
IDENFR f4
LPARENT (
INTTK int
IDENFR a
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR a
GRE >
INTCON 0
RPARENT )
RETURNTK return
PLUS +
IDENFR a
SEMICN ;
RETURNTK return
MINU -
IDENFR a
SEMICN ;
RBRACE }
INTTK int
IDENFR f5
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
COMMA ,
INTTK int
IDENFR c
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR a
GRE >
IDENFR b
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR a
GRE >
IDENFR c
RPARENT )
RETURNTK return
IDENFR a
SEMICN ;
ELSETK else
RETURNTK return
IDENFR c
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR b
GRE >
IDENFR c
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR b
GRE >
IDENFR a
RPARENT )
RETURNTK return
IDENFR b
SEMICN ;
ELSETK else
RETURNTK return
IDENFR a
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR c
GRE >
IDENFR a
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR c
GRE >
IDENFR b
RPARENT )
RETURNTK return
IDENFR c
SEMICN ;
ELSETK else
RETURNTK return
IDENFR b
SEMICN ;
RBRACE }
RETURNTK return
IDENFR f4
LPARENT (
IDENFR a
RPARENT )
SEMICN ;
RBRACE }
INTTK int
IDENFR f6
LPARENT (
INTTK int
IDENFR a
RPARENT )
LBRACE {
IDENFR x
ASSIGN =
IDENFR x
PLUS +
IDENFR a
SEMICN ;
IFTK if
LPARENT (
IDENFR a
EQL ==
INTCON 0
RPARENT )
LBRACE {
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
RETURNTK return
IDENFR f6
LPARENT (
IDENFR a
MINU -
INTCON 1
RPARENT )
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "21373457\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR i
COMMA ,
IDENFR j
ASSIGN =
INTCON 5
COMMA ,
IDENFR k
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
INTCON 5
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 5
RPARENT )
PRINTFTK printf
LPARENT (
STRCON "Empty for pass!\n"
RPARENT )
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
INTCON 2
SEMICN ;
RPARENT )
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 2
SEMICN ;
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 4
RPARENT )
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
IDENFR i
LSS <
INTCON 5
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
LSS <
INTCON 5
RPARENT )
CONTINUETK continue
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 2
SEMICN ;
RBRACE }
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 5
SEMICN ;
SEMICN ;
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 6
RPARENT )
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
IDENFR i
LSS <
INTCON 7
SEMICN ;
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 8
RPARENT )
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
SEMICN ;
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 10
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "One stmt for pass!\n"
RPARENT )
SEMICN ;
BREAKTK break
SEMICN ;
RBRACE }
RBRACE }
IDENFR f1
LPARENT (
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR x
EQL ==
INTCON 5
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR f2
LPARENT (
RPARENT )
EQL ==
MINU -
INTCON 1
RPARENT )
PRINTFTK printf
LPARENT (
STRCON "Basic for and no params function pass!\n"
RPARENT )
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "Please input 5 number (no zero)\n"
RPARENT )
SEMICN ;
IDENFR x
ASSIGN =
MINU -
INTCON 1
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
MULT *
IDENFR i
LSS <
IDENFR j
MULT *
IDENFR j
DIV /
LPARENT (
INTCON 5
MINU -
INTCON 4
RPARENT )
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IDENFR k
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR f3
LPARENT (
IDENFR f4
LPARENT (
IDENFR k
RPARENT )
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR x
LSS <
INTCON 0
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR x
GRE >
INTCON 0
RPARENT )
LBRACE {
CONTINUETK continue
SEMICN ;
RBRACE }
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR x
GEQ >=
INTCON 0
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "Basic for and one params function pass!\n"
RPARENT )
SEMICN ;
RBRACE }
IDENFR i
ASSIGN =
INTCON 10
SEMICN ;
IDENFR j
ASSIGN =
INTCON 5
SEMICN ;
IDENFR k
ASSIGN =
INTCON 7
SEMICN ;
IFTK if
LPARENT (
IDENFR f5
LPARENT (
IDENFR i
COMMA ,
IDENFR j
COMMA ,
IDENFR k
RPARENT )
EQL ==
IDENFR i
RPARENT )
PRINTFTK printf
LPARENT (
STRCON "Basic for and multiple params function pass!\n"
RPARENT )
SEMICN ;
IDENFR x
ASSIGN =
INTCON 0
SEMICN ;
IDENFR f6
LPARENT (
IDENFR c
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "Recursive Success, count = %d\n"
COMMA ,
IDENFR x
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "This C level file include decl, if, for ,continue, break, basic LOrExp. No block\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "Pass Success!"
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
CONSTTK const
INTTK int
IDENFR c
ASSIGN =
INTCON 10
SEMICN ;
INTTK int
IDENFR x
SEMICN ;
VOIDTK void
IDENFR f1
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR i
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
INTCON 5
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IDENFR x
ASSIGN =
IDENFR x
PLUS +
INTCON 1
SEMICN ;
RBRACE }
RBRACE }
INTTK int
IDENFR f2
LPARENT (
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR x
GRE >
INTCON 0
RPARENT )
LBRACE {
RETURNTK return
MINU -
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
RETURNTK return
INTCON 1
SEMICN ;
RBRACE }
RETURNTK return
IDENFR x
SEMICN ;
RBRACE }
VOIDTK void
IDENFR f3
LPARENT (
INTTK int
IDENFR a
RPARENT )
LBRACE {
IDENFR x
ASSIGN =
IDENFR a
SEMICN ;
RBRACE }
INTTK int
IDENFR f4
LPARENT (
INTTK int
IDENFR a
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR a
GRE >
INTCON 0
RPARENT )
RETURNTK return
PLUS +
IDENFR a
SEMICN ;
RETURNTK return
MINU -
IDENFR a
SEMICN ;
RBRACE }
INTTK int
IDENFR f5
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
COMMA ,
INTTK int
IDENFR c
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR a
GRE >
IDENFR b
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR a
GRE >
IDENFR c
RPARENT )
RETURNTK return
IDENFR a
SEMICN ;
ELSETK else
RETURNTK return
IDENFR c
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR b
GRE >
IDENFR c
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR b
GRE >
IDENFR a
RPARENT )
RETURNTK return
IDENFR b
SEMICN ;
ELSETK else
RETURNTK return
IDENFR a
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR c
GRE >
IDENFR a
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR c
GRE >
IDENFR b
RPARENT )
RETURNTK return
IDENFR c
SEMICN ;
ELSETK else
RETURNTK return
IDENFR b
SEMICN ;
RBRACE }
RETURNTK return
IDENFR f4
LPARENT (
IDENFR a
RPARENT )
SEMICN ;
RBRACE }
INTTK int
IDENFR f6
LPARENT (
INTTK int
IDENFR a
RPARENT )
LBRACE {
IDENFR x
ASSIGN =
IDENFR x
PLUS +
IDENFR a
SEMICN ;
IFTK if
LPARENT (
IDENFR a
EQL ==
INTCON 0
RPARENT )
LBRACE {
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
RETURNTK return
IDENFR f6
LPARENT (
IDENFR a
MINU -
INTCON 1
RPARENT )
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "21373457\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR i
COMMA ,
IDENFR j
ASSIGN =
INTCON 5
COMMA ,
IDENFR k
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
INTCON 5
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 5
RPARENT )
PRINTFTK printf
LPARENT (
STRCON "Empty for pass!\n"
RPARENT )
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
INTCON 2
SEMICN ;
RPARENT )
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 2
SEMICN ;
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 4
RPARENT )
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
IDENFR i
LSS <
INTCON 5
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
LSS <
INTCON 5
RPARENT )
CONTINUETK continue
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 2
SEMICN ;
RBRACE }
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 5
SEMICN ;
SEMICN ;
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 6
RPARENT )
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
IDENFR i
LSS <
INTCON 7
SEMICN ;
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 8
RPARENT )
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
SEMICN ;
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 10
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "One stmt for pass!\n"
RPARENT )
SEMICN ;
BREAKTK break
SEMICN ;
RBRACE }
RBRACE }
IDENFR f1
LPARENT (
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR x
EQL ==
INTCON 5
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR f2
LPARENT (
RPARENT )
EQL ==
MINU -
INTCON 1
RPARENT )
PRINTFTK printf
LPARENT (
STRCON "Basic for and no params function pass!\n"
RPARENT )
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "Please input 5 number (no zero)\n"
RPARENT )
SEMICN ;
IDENFR x
ASSIGN =
MINU -
INTCON 1
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
MULT *
IDENFR i
LSS <
IDENFR j
MULT *
IDENFR j
DIV /
LPARENT (
INTCON 5
MINU -
INTCON 4
RPARENT )
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IDENFR k
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR f3
LPARENT (
IDENFR f4
LPARENT (
IDENFR k
RPARENT )
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR x
LSS <
INTCON 0
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR x
GRE >
INTCON 0
RPARENT )
LBRACE {
CONTINUETK continue
SEMICN ;
RBRACE }
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR x
GEQ >=
INTCON 0
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "Basic for and one params function pass!\n"
RPARENT )
SEMICN ;
RBRACE }
IDENFR i
ASSIGN =
INTCON 10
SEMICN ;
IDENFR j
ASSIGN =
INTCON 5
SEMICN ;
IDENFR k
ASSIGN =
INTCON 7
SEMICN ;
IFTK if
LPARENT (
IDENFR f5
LPARENT (
IDENFR i
COMMA ,
IDENFR j
COMMA ,
IDENFR k
RPARENT )
EQL ==
IDENFR i
RPARENT )
PRINTFTK printf
LPARENT (
STRCON "Basic for and multiple params function pass!\n"
RPARENT )
SEMICN ;
IDENFR x
ASSIGN =
INTCON 0
SEMICN ;
IDENFR f6
LPARENT (
IDENFR c
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "Recursive Success, count = %d\n"
COMMA ,
IDENFR x
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "This C level file include decl, if, for ,continue, break, basic LOrExp. No block\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "Pass Success!"
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
INTCON 1
RBRACE }
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
IFTK if
LPARENT (
NOT !
IDENFR i
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
IFTK if
LPARENT (
NOT !
IDENFR i
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
IFTK if
LPARENT (
NOT !
IDENFR i
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
IFTK if
LPARENT (
NOT !
IDENFR i
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
IFTK if
LPARENT (
NOT !
IDENFR i
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
IFTK if
LPARENT (
NOT !
IDENFR i
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
IFTK if
LPARENT (
NOT !
IDENFR i
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
IFTK if
LPARENT (
NOT !
IDENFR i
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
IFTK if
LPARENT (
NOT !
IDENFR i
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
IFTK if
LPARENT (
NOT !
IDENFR i
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
IFTK if
LPARENT (
NOT !
IDENFR i
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
IFTK if
LPARENT (
NOT !
IDENFR i
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
IFTK if
LPARENT (
NOT !
IDENFR i
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
IFTK if
LPARENT (
NOT !
IDENFR i
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
IFTK if
LPARENT (
NOT !
IDENFR i
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
IFTK if
LPARENT (
NOT !
IDENFR i
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
IFTK if
LPARENT (
NOT !
IDENFR i
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
IFTK if
LPARENT (
NOT !
IDENFR i
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
IFTK if
LPARENT (
NOT !
IDENFR i
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
IFTK if
LPARENT (
NOT !
IDENFR i
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
IFTK if
LPARENT (
NOT !
IDENFR i
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
IFTK if
LPARENT (
NOT !
IDENFR i
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
IFTK if
LPARENT (
NOT !
IDENFR i
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
IFTK if
LPARENT (
NOT !
IDENFR i
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
IFTK if
LPARENT (
NOT !
IDENFR i
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
IFTK if
LPARENT (
NOT !
IDENFR i
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
IFTK if
LPARENT (
NOT !
IDENFR i
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
PLUS +
MINU -
PLUS +
INTCON 1
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
PLUS +
MINU -
PLUS +
INTCON 1
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
PLUS +
MINU -
PLUS +
INTCON 1
SEMICN ;
RBRACE }
CONSTTK const
INTTK int
IDENFR ci
ASSIGN =
INTCON 1
SEMICN ;
CONSTTK const
INTTK int
IDENFR ciexp
ASSIGN =
INTCON 1
PLUS +
INTCON 1
MULT *
INTCON 1
DIV /
INTCON 1
MOD %
INTCON 1
MINU -
INTCON 1
SEMICN ;
CONSTTK const
INTTK int
IDENFR ca
ASSIGN =
INTCON 1
COMMA ,
IDENFR cb
ASSIGN =
INTCON 2
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
MINU -
PLUS +
INTCON 1
SEMICN ;
INTTK int
IDENFR iexp
ASSIGN =
INTCON 1
PLUS +
INTCON 1
MULT *
INTCON 1
DIV /
INTCON 1
MOD %
INTCON 1
MINU -
INTCON 1
SEMICN ;
INTTK int
IDENFR a
ASSIGN =
INTCON 1
COMMA ,
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
VOIDTK void
IDENFR funv
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
RPARENT )
LBRACE {
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "funv\n"
RPARENT )
SEMICN ;
RBRACE }
RBRACE }
INTTK int
IDENFR funi
LPARENT (
INTTK int
IDENFR a
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "funi\n"
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR funvnop
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR ma1
COMMA ,
IDENFR ma2
COMMA ,
IDENFR ma3
COMMA ,
IDENFR ma4
SEMICN ;
IDENFR ma1
ASSIGN =
INTCON 1
SEMICN ;
IDENFR ma2
ASSIGN =
INTCON 1
PLUS +
INTCON 1
SEMICN ;
IDENFR ma3
ASSIGN =
INTCON 1
SEMICN ;
IDENFR ma4
ASSIGN =
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR ma1
NEQ !=
IDENFR ma2
RPARENT )
LBRACE {
INTTK int
IDENFR mif1
ASSIGN =
INTCON 1
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR mif1
RPARENT )
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR ma1
EQL ==
IDENFR ma3
RPARENT )
LBRACE {
IDENFR funi
LPARENT (
IDENFR ma1
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR ma1
NEQ !=
IDENFR ma3
RPARENT )
LBRACE {
IDENFR funvnop
LPARENT (
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR ma1
GEQ >=
IDENFR ma3
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR ma2
LEQ <=
IDENFR ma3
RPARENT )
LBRACE {
IDENFR funvnop
LPARENT (
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR ma1
GRE >
IDENFR ma3
RPARENT )
LBRACE {
IDENFR funvnop
LPARENT (
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR ma2
LSS <
IDENFR ma3
RPARENT )
LBRACE {
IDENFR funvnop
LPARENT (
RPARENT )
SEMICN ;
RBRACE }
IDENFR funvnop
LPARENT (
RPARENT )
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
IDENFR ma1
EQL ==
IDENFR ma4
SEMICN ;
RPARENT )
LBRACE {
IDENFR ma4
ASSIGN =
INTCON 2
SEMICN ;
CONTINUETK continue
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
IDENFR ma1
EQL ==
IDENFR ma4
SEMICN ;
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "try\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "try\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "try\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "try\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "try\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "try\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "try\n"
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
VOIDTK void
IDENFR funv
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
RPARENT )
LBRACE {
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "funv\n"
RPARENT )
SEMICN ;
RBRACE }
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR ma1
COMMA ,
IDENFR ma2
COMMA ,
IDENFR ma3
COMMA ,
IDENFR ma4
SEMICN ;
IDENFR ma1
ASSIGN =
INTCON 1
SEMICN ;
IDENFR ma2
ASSIGN =
INTCON 1
PLUS +
INTCON 1
SEMICN ;
IDENFR ma3
ASSIGN =
INTCON 1
SEMICN ;
IDENFR ma4
ASSIGN =
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR ma1
NEQ !=
IDENFR ma2
RPARENT )
LBRACE {
INTTK int
IDENFR mif1
ASSIGN =
INTCON 1
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR mif1
RPARENT )
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR ma1
EQL ==
IDENFR ma3
RPARENT )
LBRACE {
IDENFR funi
LPARENT (
IDENFR ma1
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR ma1
NEQ !=
IDENFR ma3
RPARENT )
LBRACE {
IDENFR funvnop
LPARENT (
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR ma1
GEQ >=
IDENFR ma3
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR ma2
LEQ <=
IDENFR ma3
RPARENT )
LBRACE {
IDENFR funvnop
LPARENT (
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR ma1
GRE >
IDENFR ma3
RPARENT )
LBRACE {
IDENFR funvnop
LPARENT (
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR ma2
LSS <
IDENFR ma3
RPARENT )
LBRACE {
IDENFR funvnop
LPARENT (
RPARENT )
SEMICN ;
RBRACE }
IDENFR funvnop
LPARENT (
RPARENT )
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
IDENFR ma1
EQL ==
IDENFR ma4
SEMICN ;
RPARENT )
LBRACE {
IDENFR ma4
ASSIGN =
INTCON 2
SEMICN ;
CONTINUETK continue
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
IDENFR ma1
EQL ==
IDENFR ma4
SEMICN ;
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "try\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "try\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "try\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "try\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "try\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "try\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "try\n"
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
CONSTTK const
INTTK int
IDENFR ci
ASSIGN =
INTCON 1
SEMICN ;
CONSTTK const
INTTK int
IDENFR ciexp
ASSIGN =
INTCON 1
PLUS +
INTCON 1
MULT *
INTCON 1
DIV /
INTCON 1
MOD %
INTCON 1
MINU -
INTCON 1
SEMICN ;
CONSTTK const
INTTK int
IDENFR ca
ASSIGN =
INTCON 1
COMMA ,
IDENFR cb
ASSIGN =
INTCON 2
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
MINU -
PLUS +
INTCON 1
SEMICN ;
INTTK int
IDENFR iexp
ASSIGN =
INTCON 1
PLUS +
INTCON 1
MULT *
INTCON 1
DIV /
INTCON 1
MOD %
INTCON 1
MINU -
INTCON 1
SEMICN ;
INTTK int
IDENFR a
ASSIGN =
INTCON 1
COMMA ,
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
VOIDTK void
IDENFR funv
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
RPARENT )
LBRACE {
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "funv\n"
RPARENT )
SEMICN ;
RBRACE }
RBRACE }
INTTK int
IDENFR funi
LPARENT (
INTTK int
IDENFR a
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "funi\n"
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR funvnop
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR ma1
COMMA ,
IDENFR ma2
COMMA ,
IDENFR ma3
COMMA ,
IDENFR ma4
SEMICN ;
IDENFR ma1
ASSIGN =
INTCON 1
SEMICN ;
IDENFR ma2
ASSIGN =
INTCON 1
PLUS +
INTCON 1
SEMICN ;
IDENFR ma3
ASSIGN =
INTCON 1
SEMICN ;
IDENFR ma4
ASSIGN =
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR ma1
NEQ !=
IDENFR ma2
RPARENT )
LBRACE {
INTTK int
IDENFR mif1
ASSIGN =
INTCON 1
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR mif1
RPARENT )
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR ma1
EQL ==
IDENFR ma3
RPARENT )
LBRACE {
IDENFR funi
LPARENT (
IDENFR ma1
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR ma1
NEQ !=
IDENFR ma3
RPARENT )
LBRACE {
IDENFR funvnop
LPARENT (
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR ma1
GEQ >=
IDENFR ma3
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR ma2
LEQ <=
IDENFR ma3
RPARENT )
LBRACE {
IDENFR funvnop
LPARENT (
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR ma1
GRE >
IDENFR ma3
RPARENT )
LBRACE {
IDENFR funvnop
LPARENT (
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR ma2
LSS <
IDENFR ma3
RPARENT )
LBRACE {
IDENFR funvnop
LPARENT (
RPARENT )
SEMICN ;
RBRACE }
IDENFR funvnop
LPARENT (
RPARENT )
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
IDENFR ma1
EQL ==
IDENFR ma4
SEMICN ;
RPARENT )
LBRACE {
IDENFR ma4
ASSIGN =
INTCON 2
SEMICN ;
CONTINUETK continue
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
IDENFR ma1
EQL ==
IDENFR ma4
SEMICN ;
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "try\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "try\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "try\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "try\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "try\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "try\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "try\n"
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
CONSTTK const
INTTK int
IDENFR ci
ASSIGN =
INTCON 1
SEMICN ;
CONSTTK const
INTTK int
IDENFR ciexp
ASSIGN =
INTCON 1
PLUS +
INTCON 1
MULT *
INTCON 1
DIV /
INTCON 1
MOD %
INTCON 1
MINU -
INTCON 1
SEMICN ;
CONSTTK const
INTTK int
IDENFR ca
ASSIGN =
INTCON 1
COMMA ,
IDENFR cb
ASSIGN =
INTCON 2
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
MINU -
PLUS +
INTCON 1
SEMICN ;
INTTK int
IDENFR iexp
ASSIGN =
INTCON 1
PLUS +
INTCON 1
MULT *
INTCON 1
DIV /
INTCON 1
MOD %
INTCON 1
MINU -
INTCON 1
SEMICN ;
INTTK int
IDENFR a
ASSIGN =
INTCON 1
COMMA ,
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
VOIDTK void
IDENFR funv
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
RPARENT )
LBRACE {
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "funv\n"
RPARENT )
SEMICN ;
RBRACE }
RBRACE }
INTTK int
IDENFR funi
LPARENT (
INTTK int
IDENFR a
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "funi\n"
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR funvnop
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR ma1
COMMA ,
IDENFR ma2
COMMA ,
IDENFR ma3
COMMA ,
IDENFR ma4
SEMICN ;
IDENFR ma1
ASSIGN =
INTCON 1
SEMICN ;
IDENFR ma2
ASSIGN =
INTCON 1
PLUS +
INTCON 1
SEMICN ;
IDENFR ma3
ASSIGN =
INTCON 1
SEMICN ;
IDENFR ma4
ASSIGN =
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR ma1
NEQ !=
IDENFR ma2
RPARENT )
LBRACE {
INTTK int
IDENFR mif1
ASSIGN =
INTCON 1
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR mif1
RPARENT )
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR ma1
EQL ==
IDENFR ma3
RPARENT )
LBRACE {
IDENFR funi
LPARENT (
IDENFR ma1
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR ma1
NEQ !=
IDENFR ma3
RPARENT )
LBRACE {
IDENFR funvnop
LPARENT (
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR ma1
GEQ >=
IDENFR ma3
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR ma2
LEQ <=
IDENFR ma3
RPARENT )
LBRACE {
IDENFR funvnop
LPARENT (
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR ma1
GRE >
IDENFR ma3
RPARENT )
LBRACE {
IDENFR funvnop
LPARENT (
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR ma2
LSS <
IDENFR ma3
RPARENT )
LBRACE {
IDENFR funvnop
LPARENT (
RPARENT )
SEMICN ;
RBRACE }
IDENFR funvnop
LPARENT (
RPARENT )
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
IDENFR ma1
EQL ==
IDENFR ma4
SEMICN ;
RPARENT )
LBRACE {
IDENFR ma4
ASSIGN =
INTCON 2
SEMICN ;
CONTINUETK continue
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
IDENFR ma1
EQL ==
IDENFR ma4
SEMICN ;
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "try\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "try\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "try\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "try\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "try\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "try\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "try\n"
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
CONSTTK const
INTTK int
IDENFR ci
ASSIGN =
INTCON 1
SEMICN ;
CONSTTK const
INTTK int
IDENFR ciexp
ASSIGN =
INTCON 1
PLUS +
INTCON 1
MULT *
INTCON 1
DIV /
INTCON 1
MOD %
INTCON 1
MINU -
INTCON 1
SEMICN ;
CONSTTK const
INTTK int
IDENFR ca
ASSIGN =
INTCON 1
COMMA ,
IDENFR cb
ASSIGN =
INTCON 2
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
MINU -
PLUS +
INTCON 1
SEMICN ;
INTTK int
IDENFR iexp
ASSIGN =
INTCON 1
PLUS +
INTCON 1
MULT *
INTCON 1
DIV /
INTCON 1
MOD %
INTCON 1
MINU -
INTCON 1
SEMICN ;
INTTK int
IDENFR a
ASSIGN =
INTCON 1
COMMA ,
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
VOIDTK void
IDENFR funv
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
RPARENT )
LBRACE {
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "funv\n"
RPARENT )
SEMICN ;
RBRACE }
RBRACE }
INTTK int
IDENFR funi
LPARENT (
INTTK int
IDENFR a
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "funi\n"
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR funvnop
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR ma1
COMMA ,
IDENFR ma2
COMMA ,
IDENFR ma3
COMMA ,
IDENFR ma4
SEMICN ;
IDENFR ma1
ASSIGN =
INTCON 1
SEMICN ;
IDENFR ma2
ASSIGN =
INTCON 1
PLUS +
INTCON 1
SEMICN ;
IDENFR ma3
ASSIGN =
INTCON 1
SEMICN ;
IDENFR ma4
ASSIGN =
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR ma1
NEQ !=
IDENFR ma2
RPARENT )
LBRACE {
INTTK int
IDENFR mif1
ASSIGN =
INTCON 1
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR mif1
RPARENT )
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR ma1
EQL ==
IDENFR ma3
RPARENT )
LBRACE {
IDENFR funi
LPARENT (
IDENFR ma1
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR ma1
NEQ !=
IDENFR ma3
RPARENT )
LBRACE {
IDENFR funvnop
LPARENT (
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR ma1
GEQ >=
IDENFR ma3
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR ma2
LEQ <=
IDENFR ma3
RPARENT )
LBRACE {
IDENFR funvnop
LPARENT (
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR ma1
GRE >
IDENFR ma3
RPARENT )
LBRACE {
IDENFR funvnop
LPARENT (
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR ma2
LSS <
IDENFR ma3
RPARENT )
LBRACE {
IDENFR funvnop
LPARENT (
RPARENT )
SEMICN ;
RBRACE }
IDENFR funvnop
LPARENT (
RPARENT )
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
IDENFR ma1
EQL ==
IDENFR ma4
SEMICN ;
RPARENT )
LBRACE {
IDENFR ma4
ASSIGN =
INTCON 2
SEMICN ;
CONTINUETK continue
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
IDENFR ma1
EQL ==
IDENFR ma4
SEMICN ;
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "try\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "try\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "try\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "try\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "try\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "try\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "try\n"
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
CONSTTK const
INTTK int
IDENFR ci
ASSIGN =
INTCON 1
SEMICN ;
CONSTTK const
INTTK int
IDENFR ciexp
ASSIGN =
INTCON 1
PLUS +
INTCON 1
MULT *
INTCON 1
DIV /
INTCON 1
MOD %
INTCON 1
MINU -
INTCON 1
SEMICN ;
CONSTTK const
INTTK int
IDENFR ca
ASSIGN =
INTCON 1
COMMA ,
IDENFR cb
ASSIGN =
INTCON 2
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
MINU -
PLUS +
INTCON 1
SEMICN ;
INTTK int
IDENFR iexp
ASSIGN =
INTCON 1
PLUS +
INTCON 1
MULT *
INTCON 1
DIV /
INTCON 1
MOD %
INTCON 1
MINU -
INTCON 1
SEMICN ;
INTTK int
IDENFR a
ASSIGN =
INTCON 1
COMMA ,
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
VOIDTK void
IDENFR funv
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
RPARENT )
LBRACE {
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "funv\n"
RPARENT )
SEMICN ;
RBRACE }
RBRACE }
INTTK int
IDENFR funi
LPARENT (
INTTK int
IDENFR a
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "funi\n"
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR funvnop
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR ma1
COMMA ,
IDENFR ma2
COMMA ,
IDENFR ma3
COMMA ,
IDENFR ma4
SEMICN ;
IDENFR ma1
ASSIGN =
INTCON 1
SEMICN ;
IDENFR ma2
ASSIGN =
INTCON 1
PLUS +
INTCON 1
SEMICN ;
IDENFR ma3
ASSIGN =
INTCON 1
SEMICN ;
IDENFR ma4
ASSIGN =
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR ma1
NEQ !=
IDENFR ma2
RPARENT )
LBRACE {
INTTK int
IDENFR mif1
ASSIGN =
INTCON 1
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR mif1
RPARENT )
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR ma1
EQL ==
IDENFR ma3
RPARENT )
LBRACE {
IDENFR funi
LPARENT (
IDENFR ma1
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR ma1
NEQ !=
IDENFR ma3
RPARENT )
LBRACE {
IDENFR funvnop
LPARENT (
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR ma1
GEQ >=
IDENFR ma3
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR ma2
LEQ <=
IDENFR ma3
RPARENT )
LBRACE {
IDENFR funvnop
LPARENT (
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR ma1
GRE >
IDENFR ma3
RPARENT )
LBRACE {
IDENFR funvnop
LPARENT (
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR ma2
LSS <
IDENFR ma3
RPARENT )
LBRACE {
IDENFR funvnop
LPARENT (
RPARENT )
SEMICN ;
RBRACE }
IDENFR funvnop
LPARENT (
RPARENT )
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
IDENFR ma1
EQL ==
IDENFR ma4
SEMICN ;
RPARENT )
LBRACE {
IDENFR ma4
ASSIGN =
INTCON 2
SEMICN ;
CONTINUETK continue
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
IDENFR ma1
EQL ==
IDENFR ma4
SEMICN ;
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "try\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "try\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "try\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "try\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "try\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "try\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "try\n"
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
CONSTTK const
INTTK int
IDENFR ci
ASSIGN =
INTCON 1
SEMICN ;
CONSTTK const
INTTK int
IDENFR ciexp
ASSIGN =
INTCON 1
PLUS +
INTCON 1
MULT *
INTCON 1
DIV /
INTCON 1
MOD %
INTCON 1
MINU -
INTCON 1
SEMICN ;
CONSTTK const
INTTK int
IDENFR ca
ASSIGN =
INTCON 1
COMMA ,
IDENFR cb
ASSIGN =
INTCON 2
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
MINU -
PLUS +
INTCON 1
SEMICN ;
INTTK int
IDENFR iexp
ASSIGN =
INTCON 1
PLUS +
INTCON 1
MULT *
INTCON 1
DIV /
INTCON 1
MOD %
INTCON 1
MINU -
INTCON 1
SEMICN ;
INTTK int
IDENFR a
ASSIGN =
INTCON 1
COMMA ,
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
VOIDTK void
IDENFR funv
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
RPARENT )
LBRACE {
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "funv\n"
RPARENT )
SEMICN ;
RBRACE }
RBRACE }
INTTK int
IDENFR funi
LPARENT (
INTTK int
IDENFR a
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "funi\n"
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR funvnop
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR ma1
COMMA ,
IDENFR ma2
COMMA ,
IDENFR ma3
COMMA ,
IDENFR ma4
SEMICN ;
IDENFR ma1
ASSIGN =
INTCON 1
SEMICN ;
IDENFR ma2
ASSIGN =
INTCON 1
PLUS +
INTCON 1
SEMICN ;
IDENFR ma3
ASSIGN =
INTCON 1
SEMICN ;
IDENFR ma4
ASSIGN =
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR ma1
NEQ !=
IDENFR ma2
RPARENT )
LBRACE {
INTTK int
IDENFR mif1
ASSIGN =
INTCON 1
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR mif1
RPARENT )
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR ma1
EQL ==
IDENFR ma3
RPARENT )
LBRACE {
IDENFR funi
LPARENT (
IDENFR ma1
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR ma1
NEQ !=
IDENFR ma3
RPARENT )
LBRACE {
IDENFR funvnop
LPARENT (
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR ma1
GEQ >=
IDENFR ma3
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR ma2
LEQ <=
IDENFR ma3
RPARENT )
LBRACE {
IDENFR funvnop
LPARENT (
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR ma1
GRE >
IDENFR ma3
RPARENT )
LBRACE {
IDENFR funvnop
LPARENT (
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR ma2
LSS <
IDENFR ma3
RPARENT )
LBRACE {
IDENFR funvnop
LPARENT (
RPARENT )
SEMICN ;
RBRACE }
IDENFR funvnop
LPARENT (
RPARENT )
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
IDENFR ma1
EQL ==
IDENFR ma4
SEMICN ;
RPARENT )
LBRACE {
IDENFR ma4
ASSIGN =
INTCON 2
SEMICN ;
CONTINUETK continue
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
IDENFR ma1
EQL ==
IDENFR ma4
SEMICN ;
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "try\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "try\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "try\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "try\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "try\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "try\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "try\n"
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
CONSTTK const
INTTK int
IDENFR ci
ASSIGN =
INTCON 1
SEMICN ;
CONSTTK const
INTTK int
IDENFR ciexp
ASSIGN =
INTCON 1
PLUS +
INTCON 1
MULT *
INTCON 1
DIV /
INTCON 1
MOD %
INTCON 1
MINU -
INTCON 1
SEMICN ;
CONSTTK const
INTTK int
IDENFR ca
ASSIGN =
INTCON 1
COMMA ,
IDENFR cb
ASSIGN =
INTCON 2
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
MINU -
PLUS +
INTCON 1
SEMICN ;
INTTK int
IDENFR iexp
ASSIGN =
INTCON 1
PLUS +
INTCON 1
MULT *
INTCON 1
DIV /
INTCON 1
MOD %
INTCON 1
MINU -
INTCON 1
SEMICN ;
INTTK int
IDENFR a
ASSIGN =
INTCON 1
COMMA ,
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
VOIDTK void
IDENFR funv
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
RPARENT )
LBRACE {
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "funv\n"
RPARENT )
SEMICN ;
RBRACE }
RBRACE }
INTTK int
IDENFR funi
LPARENT (
INTTK int
IDENFR a
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "funi\n"
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR funvnop
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR ma1
COMMA ,
IDENFR ma2
COMMA ,
IDENFR ma3
COMMA ,
IDENFR ma4
SEMICN ;
IDENFR ma1
ASSIGN =
INTCON 1
SEMICN ;
IDENFR ma2
ASSIGN =
INTCON 1
PLUS +
INTCON 1
SEMICN ;
IDENFR ma3
ASSIGN =
INTCON 1
SEMICN ;
IDENFR ma4
ASSIGN =
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR ma1
NEQ !=
IDENFR ma2
RPARENT )
LBRACE {
INTTK int
IDENFR mif1
ASSIGN =
INTCON 1
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR mif1
RPARENT )
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR ma1
EQL ==
IDENFR ma3
RPARENT )
LBRACE {
IDENFR funi
LPARENT (
IDENFR ma1
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR ma1
NEQ !=
IDENFR ma3
RPARENT )
LBRACE {
IDENFR funvnop
LPARENT (
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR ma1
GEQ >=
IDENFR ma3
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR ma2
LEQ <=
IDENFR ma3
RPARENT )
LBRACE {
IDENFR funvnop
LPARENT (
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR ma1
GRE >
IDENFR ma3
RPARENT )
LBRACE {
IDENFR funvnop
LPARENT (
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR ma2
LSS <
IDENFR ma3
RPARENT )
LBRACE {
IDENFR funvnop
LPARENT (
RPARENT )
SEMICN ;
RBRACE }
IDENFR funvnop
LPARENT (
RPARENT )
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
IDENFR ma1
EQL ==
IDENFR ma4
SEMICN ;
RPARENT )
LBRACE {
IDENFR ma4
ASSIGN =
INTCON 2
SEMICN ;
CONTINUETK continue
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
IDENFR ma1
EQL ==
IDENFR ma4
SEMICN ;
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "try\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "try\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "try\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "try\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "try\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "try\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "try\n"
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
CONSTTK const
INTTK int
IDENFR ci
ASSIGN =
INTCON 1
SEMICN ;
CONSTTK const
INTTK int
IDENFR ciexp
ASSIGN =
INTCON 1
PLUS +
INTCON 1
MULT *
INTCON 1
DIV /
INTCON 1
MOD %
INTCON 1
MINU -
INTCON 1
SEMICN ;
CONSTTK const
INTTK int
IDENFR ca
ASSIGN =
INTCON 1
COMMA ,
IDENFR cb
ASSIGN =
INTCON 2
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
MINU -
PLUS +
INTCON 1
SEMICN ;
INTTK int
IDENFR iexp
ASSIGN =
INTCON 1
PLUS +
INTCON 1
MULT *
INTCON 1
DIV /
INTCON 1
MOD %
INTCON 1
MINU -
INTCON 1
SEMICN ;
INTTK int
IDENFR a
ASSIGN =
INTCON 1
COMMA ,
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
VOIDTK void
IDENFR funv
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
RPARENT )
LBRACE {
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "funv\n"
RPARENT )
SEMICN ;
RBRACE }
RBRACE }
INTTK int
IDENFR funi
LPARENT (
INTTK int
IDENFR a
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "funi\n"
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR funvnop
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR ma1
COMMA ,
IDENFR ma2
COMMA ,
IDENFR ma3
COMMA ,
IDENFR ma4
SEMICN ;
IDENFR ma1
ASSIGN =
INTCON 1
SEMICN ;
IDENFR ma2
ASSIGN =
INTCON 1
PLUS +
INTCON 1
SEMICN ;
IDENFR ma3
ASSIGN =
INTCON 1
SEMICN ;
IDENFR ma4
ASSIGN =
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR ma1
NEQ !=
IDENFR ma2
RPARENT )
LBRACE {
INTTK int
IDENFR mif1
ASSIGN =
INTCON 1
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR mif1
RPARENT )
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR ma1
EQL ==
IDENFR ma3
RPARENT )
LBRACE {
IDENFR funi
LPARENT (
IDENFR ma1
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR ma1
NEQ !=
IDENFR ma3
RPARENT )
LBRACE {
IDENFR funvnop
LPARENT (
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR ma1
GEQ >=
IDENFR ma3
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR ma2
LEQ <=
IDENFR ma3
RPARENT )
LBRACE {
IDENFR funvnop
LPARENT (
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR ma1
GRE >
IDENFR ma3
RPARENT )
LBRACE {
IDENFR funvnop
LPARENT (
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR ma2
LSS <
IDENFR ma3
RPARENT )
LBRACE {
IDENFR funvnop
LPARENT (
RPARENT )
SEMICN ;
RBRACE }
IDENFR funvnop
LPARENT (
RPARENT )
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
IDENFR ma1
EQL ==
IDENFR ma4
SEMICN ;
RPARENT )
LBRACE {
IDENFR ma4
ASSIGN =
INTCON 2
SEMICN ;
CONTINUETK continue
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
IDENFR ma1
EQL ==
IDENFR ma4
SEMICN ;
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "try\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "try\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "try\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "try\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "try\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "try\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "try\n"
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
CONSTTK const
INTTK int
IDENFR ci
ASSIGN =
INTCON 1
SEMICN ;
CONSTTK const
INTTK int
IDENFR ciexp
ASSIGN =
INTCON 1
PLUS +
INTCON 1
MULT *
INTCON 1
DIV /
INTCON 1
MOD %
INTCON 1
MINU -
INTCON 1
SEMICN ;
CONSTTK const
INTTK int
IDENFR ca
ASSIGN =
INTCON 1
COMMA ,
IDENFR cb
ASSIGN =
INTCON 2
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
MINU -
PLUS +
INTCON 1
SEMICN ;
INTTK int
IDENFR iexp
ASSIGN =
INTCON 1
PLUS +
INTCON 1
MULT *
INTCON 1
DIV /
INTCON 1
MOD %
INTCON 1
MINU -
INTCON 1
SEMICN ;
INTTK int
IDENFR a
ASSIGN =
INTCON 1
COMMA ,
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
VOIDTK void
IDENFR funv
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
RPARENT )
LBRACE {
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "funv\n"
RPARENT )
SEMICN ;
RBRACE }
RBRACE }
INTTK int
IDENFR funi
LPARENT (
INTTK int
IDENFR a
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "funi\n"
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR funvnop
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR ma1
COMMA ,
IDENFR ma2
COMMA ,
IDENFR ma3
COMMA ,
IDENFR ma4
SEMICN ;
IDENFR ma1
ASSIGN =
INTCON 1
SEMICN ;
IDENFR ma2
ASSIGN =
INTCON 1
PLUS +
INTCON 1
SEMICN ;
IDENFR ma3
ASSIGN =
INTCON 1
SEMICN ;
IDENFR ma4
ASSIGN =
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR ma1
NEQ !=
IDENFR ma2
RPARENT )
LBRACE {
INTTK int
IDENFR mif1
ASSIGN =
INTCON 1
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR mif1
RPARENT )
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR ma1
EQL ==
IDENFR ma3
RPARENT )
LBRACE {
IDENFR funi
LPARENT (
IDENFR ma1
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR ma1
NEQ !=
IDENFR ma3
RPARENT )
LBRACE {
IDENFR funvnop
LPARENT (
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR ma1
GEQ >=
IDENFR ma3
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR ma2
LEQ <=
IDENFR ma3
RPARENT )
LBRACE {
IDENFR funvnop
LPARENT (
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR ma1
GRE >
IDENFR ma3
RPARENT )
LBRACE {
IDENFR funvnop
LPARENT (
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR ma2
LSS <
IDENFR ma3
RPARENT )
LBRACE {
IDENFR funvnop
LPARENT (
RPARENT )
SEMICN ;
RBRACE }
IDENFR funvnop
LPARENT (
RPARENT )
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
IDENFR ma1
EQL ==
IDENFR ma4
SEMICN ;
RPARENT )
LBRACE {
IDENFR ma4
ASSIGN =
INTCON 2
SEMICN ;
CONTINUETK continue
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
IDENFR ma1
EQL ==
IDENFR ma4
SEMICN ;
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "try\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "try\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "try\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "try\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "try\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "try\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "try\n"
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
CONSTTK const
INTTK int
IDENFR ci
ASSIGN =
INTCON 1
SEMICN ;
CONSTTK const
INTTK int
IDENFR ciexp
ASSIGN =
INTCON 1
PLUS +
INTCON 1
MULT *
INTCON 1
DIV /
INTCON 1
MOD %
INTCON 1
MINU -
INTCON 1
SEMICN ;
CONSTTK const
INTTK int
IDENFR ca
ASSIGN =
INTCON 1
COMMA ,
IDENFR cb
ASSIGN =
INTCON 2
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
MINU -
PLUS +
INTCON 1
SEMICN ;
INTTK int
IDENFR iexp
ASSIGN =
INTCON 1
PLUS +
INTCON 1
MULT *
INTCON 1
DIV /
INTCON 1
MOD %
INTCON 1
MINU -
INTCON 1
SEMICN ;
INTTK int
IDENFR a
ASSIGN =
INTCON 1
COMMA ,
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
VOIDTK void
IDENFR funv
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
RPARENT )
LBRACE {
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "funv\n"
RPARENT )
SEMICN ;
RBRACE }
RBRACE }
INTTK int
IDENFR funi
LPARENT (
INTTK int
IDENFR a
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "funi\n"
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR funvnop
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR ma1
COMMA ,
IDENFR ma2
COMMA ,
IDENFR ma3
COMMA ,
IDENFR ma4
SEMICN ;
IDENFR ma1
ASSIGN =
INTCON 1
SEMICN ;
IDENFR ma2
ASSIGN =
INTCON 1
PLUS +
INTCON 1
SEMICN ;
IDENFR ma3
ASSIGN =
INTCON 1
SEMICN ;
IDENFR ma4
ASSIGN =
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR ma1
NEQ !=
IDENFR ma2
RPARENT )
LBRACE {
INTTK int
IDENFR mif1
ASSIGN =
INTCON 1
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR mif1
RPARENT )
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR ma1
EQL ==
IDENFR ma3
RPARENT )
LBRACE {
IDENFR funi
LPARENT (
IDENFR ma1
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR ma1
NEQ !=
IDENFR ma3
RPARENT )
LBRACE {
IDENFR funvnop
LPARENT (
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR ma1
GEQ >=
IDENFR ma3
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR ma2
LEQ <=
IDENFR ma3
RPARENT )
LBRACE {
IDENFR funvnop
LPARENT (
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR ma1
GRE >
IDENFR ma3
RPARENT )
LBRACE {
IDENFR funvnop
LPARENT (
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR ma2
LSS <
IDENFR ma3
RPARENT )
LBRACE {
IDENFR funvnop
LPARENT (
RPARENT )
SEMICN ;
RBRACE }
IDENFR funvnop
LPARENT (
RPARENT )
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
IDENFR ma1
EQL ==
IDENFR ma4
SEMICN ;
RPARENT )
LBRACE {
IDENFR ma4
ASSIGN =
INTCON 2
SEMICN ;
CONTINUETK continue
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
IDENFR ma1
EQL ==
IDENFR ma4
SEMICN ;
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "try\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "try\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "try\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "try\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "try\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "try\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "try\n"
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
CONSTTK const
INTTK int
IDENFR ci
ASSIGN =
INTCON 1
SEMICN ;
CONSTTK const
INTTK int
IDENFR ciexp
ASSIGN =
INTCON 1
PLUS +
INTCON 1
MULT *
INTCON 1
DIV /
INTCON 1
MOD %
INTCON 1
MINU -
INTCON 1
SEMICN ;
CONSTTK const
INTTK int
IDENFR ca
ASSIGN =
INTCON 1
COMMA ,
IDENFR cb
ASSIGN =
INTCON 2
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
MINU -
PLUS +
INTCON 1
SEMICN ;
INTTK int
IDENFR iexp
ASSIGN =
INTCON 1
PLUS +
INTCON 1
MULT *
INTCON 1
DIV /
INTCON 1
MOD %
INTCON 1
MINU -
INTCON 1
SEMICN ;
INTTK int
IDENFR a
ASSIGN =
INTCON 1
COMMA ,
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
VOIDTK void
IDENFR funv
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
RPARENT )
LBRACE {
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "funv\n"
RPARENT )
SEMICN ;
RBRACE }
RBRACE }
INTTK int
IDENFR funi
LPARENT (
INTTK int
IDENFR a
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "funi\n"
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR funvnop
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR ma1
COMMA ,
IDENFR ma2
COMMA ,
IDENFR ma3
COMMA ,
IDENFR ma4
SEMICN ;
IDENFR ma1
ASSIGN =
INTCON 1
SEMICN ;
IDENFR ma2
ASSIGN =
INTCON 1
PLUS +
INTCON 1
SEMICN ;
IDENFR ma3
ASSIGN =
INTCON 1
SEMICN ;
IDENFR ma4
ASSIGN =
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR ma1
NEQ !=
IDENFR ma2
RPARENT )
LBRACE {
INTTK int
IDENFR mif1
ASSIGN =
INTCON 1
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR mif1
RPARENT )
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR ma1
EQL ==
IDENFR ma3
RPARENT )
LBRACE {
IDENFR funi
LPARENT (
IDENFR ma1
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR ma1
NEQ !=
IDENFR ma3
RPARENT )
LBRACE {
IDENFR funvnop
LPARENT (
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR ma1
GEQ >=
IDENFR ma3
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR ma2
LEQ <=
IDENFR ma3
RPARENT )
LBRACE {
IDENFR funvnop
LPARENT (
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR ma1
GRE >
IDENFR ma3
RPARENT )
LBRACE {
IDENFR funvnop
LPARENT (
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR ma2
LSS <
IDENFR ma3
RPARENT )
LBRACE {
IDENFR funvnop
LPARENT (
RPARENT )
SEMICN ;
RBRACE }
IDENFR funvnop
LPARENT (
RPARENT )
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
IDENFR ma1
EQL ==
IDENFR ma4
SEMICN ;
RPARENT )
LBRACE {
IDENFR ma4
ASSIGN =
INTCON 2
SEMICN ;
CONTINUETK continue
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
IDENFR ma1
EQL ==
IDENFR ma4
SEMICN ;
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "try\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "try\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "try\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "try\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "try\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "try\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "try\n"
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
CONSTTK const
INTTK int
IDENFR ci
ASSIGN =
INTCON 1
SEMICN ;
CONSTTK const
INTTK int
IDENFR ciexp
ASSIGN =
INTCON 1
PLUS +
INTCON 1
MULT *
INTCON 1
DIV /
INTCON 1
MOD %
INTCON 1
MINU -
INTCON 1
SEMICN ;
CONSTTK const
INTTK int
IDENFR ca
ASSIGN =
INTCON 1
COMMA ,
IDENFR cb
ASSIGN =
INTCON 2
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
MINU -
PLUS +
INTCON 1
SEMICN ;
INTTK int
IDENFR iexp
ASSIGN =
INTCON 1
PLUS +
INTCON 1
MULT *
INTCON 1
DIV /
INTCON 1
MOD %
INTCON 1
MINU -
INTCON 1
SEMICN ;
INTTK int
IDENFR a
ASSIGN =
INTCON 1
COMMA ,
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
VOIDTK void
IDENFR funv
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
RPARENT )
LBRACE {
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "funv\n"
RPARENT )
SEMICN ;
RBRACE }
RBRACE }
INTTK int
IDENFR funi
LPARENT (
INTTK int
IDENFR a
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "funi\n"
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR funvnop
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR ma1
COMMA ,
IDENFR ma2
COMMA ,
IDENFR ma3
COMMA ,
IDENFR ma4
SEMICN ;
IDENFR ma1
ASSIGN =
INTCON 1
SEMICN ;
IDENFR ma2
ASSIGN =
INTCON 1
PLUS +
INTCON 1
SEMICN ;
IDENFR ma3
ASSIGN =
INTCON 1
SEMICN ;
IDENFR ma4
ASSIGN =
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR ma1
NEQ !=
IDENFR ma2
RPARENT )
LBRACE {
INTTK int
IDENFR mif1
ASSIGN =
INTCON 1
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR mif1
RPARENT )
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR ma1
EQL ==
IDENFR ma3
RPARENT )
LBRACE {
IDENFR funi
LPARENT (
IDENFR ma1
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR ma1
NEQ !=
IDENFR ma3
RPARENT )
LBRACE {
IDENFR funvnop
LPARENT (
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR ma1
GEQ >=
IDENFR ma3
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR ma2
LEQ <=
IDENFR ma3
RPARENT )
LBRACE {
IDENFR funvnop
LPARENT (
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR ma1
GRE >
IDENFR ma3
RPARENT )
LBRACE {
IDENFR funvnop
LPARENT (
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR ma2
LSS <
IDENFR ma3
RPARENT )
LBRACE {
IDENFR funvnop
LPARENT (
RPARENT )
SEMICN ;
RBRACE }
IDENFR funvnop
LPARENT (
RPARENT )
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
IDENFR ma1
EQL ==
IDENFR ma4
SEMICN ;
RPARENT )
LBRACE {
IDENFR ma4
ASSIGN =
INTCON 2
SEMICN ;
CONTINUETK continue
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
IDENFR ma1
EQL ==
IDENFR ma4
SEMICN ;
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "try\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "try\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "try\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "try\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "try\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "try\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "try\n"
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
CONSTTK const
INTTK int
IDENFR ci
ASSIGN =
INTCON 1
SEMICN ;
CONSTTK const
INTTK int
IDENFR ciexp
ASSIGN =
INTCON 1
PLUS +
INTCON 1
MULT *
INTCON 1
DIV /
INTCON 1
MOD %
INTCON 1
MINU -
INTCON 1
SEMICN ;
CONSTTK const
INTTK int
IDENFR ca
ASSIGN =
INTCON 1
COMMA ,
IDENFR cb
ASSIGN =
INTCON 2
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
MINU -
PLUS +
INTCON 1
SEMICN ;
INTTK int
IDENFR iexp
ASSIGN =
INTCON 1
PLUS +
INTCON 1
MULT *
INTCON 1
DIV /
INTCON 1
MOD %
INTCON 1
MINU -
INTCON 1
SEMICN ;
INTTK int
IDENFR a
ASSIGN =
INTCON 1
COMMA ,
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
VOIDTK void
IDENFR funv
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
RPARENT )
LBRACE {
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "funv\n"
RPARENT )
SEMICN ;
RBRACE }
RBRACE }
INTTK int
IDENFR funi
LPARENT (
INTTK int
IDENFR a
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "funi\n"
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR funvnop
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR ma1
COMMA ,
IDENFR ma2
COMMA ,
IDENFR ma3
COMMA ,
IDENFR ma4
SEMICN ;
IDENFR ma1
ASSIGN =
INTCON 1
SEMICN ;
IDENFR ma2
ASSIGN =
INTCON 1
PLUS +
INTCON 1
SEMICN ;
IDENFR ma3
ASSIGN =
INTCON 1
SEMICN ;
IDENFR ma4
ASSIGN =
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR ma1
NEQ !=
IDENFR ma2
RPARENT )
LBRACE {
INTTK int
IDENFR mif1
ASSIGN =
INTCON 1
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR mif1
RPARENT )
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR ma1
EQL ==
IDENFR ma3
RPARENT )
LBRACE {
IDENFR funi
LPARENT (
IDENFR ma1
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR ma1
NEQ !=
IDENFR ma3
RPARENT )
LBRACE {
IDENFR funvnop
LPARENT (
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR ma1
GEQ >=
IDENFR ma3
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR ma2
LEQ <=
IDENFR ma3
RPARENT )
LBRACE {
IDENFR funvnop
LPARENT (
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR ma1
GRE >
IDENFR ma3
RPARENT )
LBRACE {
IDENFR funvnop
LPARENT (
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR ma2
LSS <
IDENFR ma3
RPARENT )
LBRACE {
IDENFR funvnop
LPARENT (
RPARENT )
SEMICN ;
RBRACE }
IDENFR funvnop
LPARENT (
RPARENT )
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
IDENFR ma1
EQL ==
IDENFR ma4
SEMICN ;
RPARENT )
LBRACE {
IDENFR ma4
ASSIGN =
INTCON 2
SEMICN ;
CONTINUETK continue
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
IDENFR ma1
EQL ==
IDENFR ma4
SEMICN ;
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "try\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "try\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "try\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "try\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "try\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "try\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "try\n"
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
CONSTTK const
INTTK int
IDENFR ci
ASSIGN =
INTCON 1
SEMICN ;
CONSTTK const
INTTK int
IDENFR ciexp
ASSIGN =
INTCON 1
PLUS +
INTCON 1
MULT *
INTCON 1
DIV /
INTCON 1
MOD %
INTCON 1
MINU -
INTCON 1
SEMICN ;
CONSTTK const
INTTK int
IDENFR ca
ASSIGN =
INTCON 1
COMMA ,
IDENFR cb
ASSIGN =
INTCON 2
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
MINU -
PLUS +
INTCON 1
SEMICN ;
INTTK int
IDENFR iexp
ASSIGN =
INTCON 1
PLUS +
INTCON 1
MULT *
INTCON 1
DIV /
INTCON 1
MOD %
INTCON 1
MINU -
INTCON 1
SEMICN ;
INTTK int
IDENFR a
ASSIGN =
INTCON 1
COMMA ,
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
VOIDTK void
IDENFR funv
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
RPARENT )
LBRACE {
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "funv\n"
RPARENT )
SEMICN ;
RBRACE }
RBRACE }
INTTK int
IDENFR funi
LPARENT (
INTTK int
IDENFR a
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "funi\n"
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR funvnop
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR ma1
COMMA ,
IDENFR ma2
COMMA ,
IDENFR ma3
COMMA ,
IDENFR ma4
SEMICN ;
IDENFR ma1
ASSIGN =
INTCON 1
SEMICN ;
IDENFR ma2
ASSIGN =
INTCON 1
PLUS +
INTCON 1
SEMICN ;
IDENFR ma3
ASSIGN =
INTCON 1
SEMICN ;
IDENFR ma4
ASSIGN =
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR ma1
NEQ !=
IDENFR ma2
RPARENT )
LBRACE {
INTTK int
IDENFR mif1
ASSIGN =
INTCON 1
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR mif1
RPARENT )
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR ma1
EQL ==
IDENFR ma3
RPARENT )
LBRACE {
IDENFR funi
LPARENT (
IDENFR ma1
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR ma1
NEQ !=
IDENFR ma3
RPARENT )
LBRACE {
IDENFR funvnop
LPARENT (
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR ma1
GEQ >=
IDENFR ma3
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR ma2
LEQ <=
IDENFR ma3
RPARENT )
LBRACE {
IDENFR funvnop
LPARENT (
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR ma1
GRE >
IDENFR ma3
RPARENT )
LBRACE {
IDENFR funvnop
LPARENT (
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR ma2
LSS <
IDENFR ma3
RPARENT )
LBRACE {
IDENFR funvnop
LPARENT (
RPARENT )
SEMICN ;
RBRACE }
IDENFR funvnop
LPARENT (
RPARENT )
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
IDENFR ma1
EQL ==
IDENFR ma4
SEMICN ;
RPARENT )
LBRACE {
IDENFR ma4
ASSIGN =
INTCON 2
SEMICN ;
CONTINUETK continue
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
IDENFR ma1
EQL ==
IDENFR ma4
SEMICN ;
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "try\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "try\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "try\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "try\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "try\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "try\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "try\n"
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
IDENFR f
LPARENT (
IDENFR m1
RPARENT )
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
IDENFR f
LPARENT (
IDENFR m1
RPARENT )
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
IDENFR f
LPARENT (
IDENFR m1
RPARENT )
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
IDENFR f
LPARENT (
IDENFR m1
RPARENT )
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
IDENFR f
LPARENT (
IDENFR m1
RPARENT )
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
IDENFR f
LPARENT (
IDENFR m1
RPARENT )
SEMICN ;
RBRACE }
INTTK int
IDENFR ig1
SEMICN ;
INTTK int
IDENFR fuc1
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
INTCON 1
SEMICN ;
RBRACE }
CHARTK char
IDENFR fuc2
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
CHRCON 'a'
SEMICN ;
RBRACE }
VOIDTK void
IDENFR fuc3
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
SEMICN ;
RBRACE }
INTTK int
IDENFR fuc4
LPARENT (
INTTK int
IDENFR a
RPARENT )
LBRACE {
RETURNTK return
INTCON 1
SEMICN ;
RBRACE }
INTTK int
IDENFR fuc5
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
RPARENT )
LBRACE {
RETURNTK return
INTCON 1
SEMICN ;
RBRACE }
INTTK int
IDENFR fuc6
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
RETURNTK return
INTCON 1
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
CONSTTK const
INTTK int
IDENFR i1
ASSIGN =
INTCON 1
SEMICN ;
CONSTTK const
INTTK int
IDENFR i2
ASSIGN =
INTCON 1
COMMA ,
IDENFR i3
ASSIGN =
INTCON 1
SEMICN ;
CONSTTK const
INTTK int
IDENFR ia1
LBRACK [
INTCON 5
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
COMMA ,
INTCON 4
COMMA ,
INTCON 5
RBRACE }
SEMICN ;
CONSTTK const
INTTK int
IDENFR ia2
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
RBRACE }
COMMA ,
IDENFR i4
ASSIGN =
INTCON 2
SEMICN ;
CONSTTK const
CHARTK char
IDENFR c1
ASSIGN =
CHRCON 'a'
SEMICN ;
CONSTTK const
CHARTK char
IDENFR c2
ASSIGN =
CHRCON 'a'
COMMA ,
IDENFR c3
ASSIGN =
CHRCON 'b'
SEMICN ;
CONSTTK const
CHARTK char
IDENFR ca2
LBRACK [
INTCON 5
RBRACK ]
ASSIGN =
STRCON "abcd"
SEMICN ;
CONSTTK const
CHARTK char
IDENFR ca3
LBRACK [
INTCON 5
RBRACK ]
ASSIGN =
STRCON "abcd"
COMMA ,
IDENFR c4
ASSIGN =
CHRCON 'a'
SEMICN ;
INTTK int
IDENFR i5
SEMICN ;
INTTK int
IDENFR i6
COMMA ,
IDENFR i7
SEMICN ;
INTTK int
IDENFR ia3
LBRACK [
INTCON 5
RBRACK ]
SEMICN ;
INTTK int
IDENFR i8
ASSIGN =
INTCON 1
SEMICN ;
INTTK int
IDENFR ia4
LBRACK [
INTCON 5
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
COMMA ,
INTCON 4
COMMA ,
INTCON 5
RBRACE }
SEMICN ;
CHARTK char
IDENFR c5
SEMICN ;
CHARTK char
IDENFR c6
ASSIGN =
CHRCON 'a'
SEMICN ;
CHARTK char
IDENFR c7
COMMA ,
IDENFR c8
ASSIGN =
CHRCON 'a'
SEMICN ;
CHARTK char
IDENFR ca4
LBRACK [
INTCON 5
RBRACK ]
SEMICN ;
CHARTK char
IDENFR ca5
LBRACK [
INTCON 5
RBRACK ]
ASSIGN =
STRCON "abcd"
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "22371144\n"
RPARENT )
SEMICN ;
LBRACE {
RBRACE }
INTTK int
IDENFR testio1
ASSIGN =
INTCON 0
SEMICN ;
CHARTK char
IDENFR testio2
ASSIGN =
INTCON 0
SEMICN ;
IDENFR testio1
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR testio2
ASSIGN =
GETCHARTK getchar
LPARENT (
RPARENT )
SEMICN ;
INTTK int
IDENFR tmp1
ASSIGN =
INTCON 1
PLUS +
INTCON 2
PLUS +
INTCON 3
SEMICN ;
INTTK int
IDENFR tmp2
ASSIGN =
INTCON 1
MULT *
INTCON 2
PLUS +
INTCON 2
MULT *
INTCON 1
SEMICN ;
INTTK int
IDENFR tmp3
ASSIGN =
INTCON 1
PLUS +
INTCON 1
MULT *
INTCON 2
PLUS +
INTCON 1
SEMICN ;
INTTK int
IDENFR tmp4
ASSIGN =
INTCON 3
MULT *
LPARENT (
INTCON 1
PLUS +
INTCON 2
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d %d %d %d\n"
COMMA ,
IDENFR tmp1
COMMA ,
IDENFR tmp2
COMMA ,
IDENFR tmp3
COMMA ,
IDENFR tmp4
RPARENT )
SEMICN ;
INTTK int
IDENFR t1
ASSIGN =
INTCON 1
COMMA ,
IDENFR t2
ASSIGN =
INTCON 1
COMMA ,
IDENFR t3
ASSIGN =
INTCON 1
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR t1
PLUS +
IDENFR t2
MINU -
IDENFR t3
SEMICN ;
IDENFR tmp2
ASSIGN =
IDENFR t1
MULT *
IDENFR t2
PLUS +
IDENFR t3
SEMICN ;
IDENFR tmp3
ASSIGN =
IDENFR t3
PLUS +
IDENFR t1
MULT *
IDENFR t2
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d %d %d %d\n"
COMMA ,
IDENFR tmp1
COMMA ,
IDENFR tmp2
COMMA ,
IDENFR tmp3
COMMA ,
IDENFR tmp4
RPARENT )
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR t1
MOD %
INTCON 4
PLUS +
INTCON 1
SEMICN ;
IDENFR tmp2
ASSIGN =
IDENFR t1
DIV /
INTCON 1
PLUS +
INTCON 0
SEMICN ;
IDENFR tmp3
ASSIGN =
IDENFR t1
MULT *
IDENFR t2
DIV /
IDENFR t3
SEMICN ;
IDENFR tmp4
ASSIGN =
IDENFR t1
MULT *
LPARENT (
IDENFR t2
PLUS +
IDENFR t3
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d %d %d %d\n"
COMMA ,
IDENFR tmp1
COMMA ,
IDENFR tmp2
COMMA ,
IDENFR tmp3
COMMA ,
IDENFR tmp4
RPARENT )
SEMICN ;
IDENFR tmp1
ASSIGN =
PLUS +
IDENFR tmp1
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR fuc4
LPARENT (
IDENFR tmp2
RPARENT )
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR fuc5
LPARENT (
IDENFR tmp1
COMMA ,
IDENFR tmp2
RPARENT )
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR fuc1
LPARENT (
RPARENT )
SEMICN ;
IDENFR tmp1
ASSIGN =
MINU -
IDENFR tmp1
SEMICN ;
IDENFR tmp1
ASSIGN =
MINU -
IDENFR tmp1
SEMICN ;
IDENFR ia4
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR t1
EQL ==
INTCON 1
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR t2
EQL ==
INTCON 0
RPARENT )
LBRACE {
RBRACE }
ELSETK else
LBRACE {
RBRACE }
FORTK for
LPARENT (
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
IDENFR tmp1
LSS <
INTCON 10
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR tmp1
PLUS +
INTCON 1
RPARENT )
LBRACE {
RBRACE }
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
IDENFR tmp1
LSS <
INTCON 10
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR tmp1
PLUS +
INTCON 1
RPARENT )
LBRACE {
RBRACE }
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
FORTK for
LPARENT (
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR tmp1
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR tmp1
EQL ==
INTCON 10
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
RBRACE }
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
IDENFR tmp1
LSS <
INTCON 10
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR tmp1
PLUS +
INTCON 1
RPARENT )
LBRACE {
RBRACE }
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
IDENFR tmp1
LSS <
INTCON 10
SEMICN ;
RPARENT )
LBRACE {
IDENFR tmp1
ASSIGN =
IDENFR tmp1
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
FORTK for
LPARENT (
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
SEMICN ;
RPARENT )
LBRACE {
IDENFR tmp1
ASSIGN =
IDENFR tmp1
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR tmp1
EQL ==
INTCON 10
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
CONTINUETK continue
SEMICN ;
RBRACE }
RBRACE }
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR tmp1
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR tmp1
EQL ==
INTCON 10
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
RBRACE }
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
SEMICN ;
RPARENT )
LBRACE {
IDENFR tmp1
ASSIGN =
IDENFR tmp1
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR tmp1
EQL ==
INTCON 10
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
RBRACE }
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
FORTK for
LPARENT (
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
IDENFR tmp1
LSS <
INTCON 10
SEMICN ;
RPARENT )
LBRACE {
IDENFR tmp1
ASSIGN =
IDENFR tmp1
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IDENFR tmp1
PLUS +
IDENFR tmp2
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR ig1
SEMICN ;
INTTK int
IDENFR fuc1
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
INTCON 1
SEMICN ;
RBRACE }
CHARTK char
IDENFR fuc2
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
CHRCON 'a'
SEMICN ;
RBRACE }
VOIDTK void
IDENFR fuc3
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
SEMICN ;
RBRACE }
INTTK int
IDENFR fuc4
LPARENT (
INTTK int
IDENFR a
RPARENT )
LBRACE {
RETURNTK return
INTCON 1
SEMICN ;
RBRACE }
INTTK int
IDENFR fuc5
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
RPARENT )
LBRACE {
RETURNTK return
INTCON 1
SEMICN ;
RBRACE }
INTTK int
IDENFR fuc6
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
RETURNTK return
INTCON 1
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
CONSTTK const
INTTK int
IDENFR i1
ASSIGN =
INTCON 1
SEMICN ;
CONSTTK const
INTTK int
IDENFR i2
ASSIGN =
INTCON 1
COMMA ,
IDENFR i3
ASSIGN =
INTCON 1
SEMICN ;
CONSTTK const
INTTK int
IDENFR ia1
LBRACK [
INTCON 5
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
COMMA ,
INTCON 4
COMMA ,
INTCON 5
RBRACE }
SEMICN ;
CONSTTK const
INTTK int
IDENFR ia2
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
RBRACE }
COMMA ,
IDENFR i4
ASSIGN =
INTCON 2
SEMICN ;
CONSTTK const
CHARTK char
IDENFR c1
ASSIGN =
CHRCON 'a'
SEMICN ;
CONSTTK const
CHARTK char
IDENFR c2
ASSIGN =
CHRCON 'a'
COMMA ,
IDENFR c3
ASSIGN =
CHRCON 'b'
SEMICN ;
CONSTTK const
CHARTK char
IDENFR ca2
LBRACK [
INTCON 5
RBRACK ]
ASSIGN =
STRCON "abcd"
SEMICN ;
CONSTTK const
CHARTK char
IDENFR ca3
LBRACK [
INTCON 5
RBRACK ]
ASSIGN =
STRCON "abcd"
COMMA ,
IDENFR c4
ASSIGN =
CHRCON 'a'
SEMICN ;
INTTK int
IDENFR i5
SEMICN ;
INTTK int
IDENFR i6
COMMA ,
IDENFR i7
SEMICN ;
INTTK int
IDENFR ia3
LBRACK [
INTCON 5
RBRACK ]
SEMICN ;
INTTK int
IDENFR i8
ASSIGN =
INTCON 1
SEMICN ;
INTTK int
IDENFR ia4
LBRACK [
INTCON 5
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
COMMA ,
INTCON 4
COMMA ,
INTCON 5
RBRACE }
SEMICN ;
CHARTK char
IDENFR c5
SEMICN ;
CHARTK char
IDENFR c6
ASSIGN =
CHRCON 'a'
SEMICN ;
CHARTK char
IDENFR c7
COMMA ,
IDENFR c8
ASSIGN =
CHRCON 'a'
SEMICN ;
CHARTK char
IDENFR ca4
LBRACK [
INTCON 5
RBRACK ]
SEMICN ;
CHARTK char
IDENFR ca5
LBRACK [
INTCON 5
RBRACK ]
ASSIGN =
STRCON "abcd"
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "22371144\n"
RPARENT )
SEMICN ;
LBRACE {
RBRACE }
INTTK int
IDENFR testio1
ASSIGN =
INTCON 0
SEMICN ;
CHARTK char
IDENFR testio2
ASSIGN =
INTCON 0
SEMICN ;
IDENFR testio1
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR testio2
ASSIGN =
GETCHARTK getchar
LPARENT (
RPARENT )
SEMICN ;
INTTK int
IDENFR tmp1
ASSIGN =
INTCON 1
PLUS +
INTCON 2
PLUS +
INTCON 3
SEMICN ;
INTTK int
IDENFR tmp2
ASSIGN =
INTCON 1
MULT *
INTCON 2
PLUS +
INTCON 2
MULT *
INTCON 1
SEMICN ;
INTTK int
IDENFR tmp3
ASSIGN =
INTCON 1
PLUS +
INTCON 1
MULT *
INTCON 2
PLUS +
INTCON 1
SEMICN ;
INTTK int
IDENFR tmp4
ASSIGN =
INTCON 3
MULT *
LPARENT (
INTCON 1
PLUS +
INTCON 2
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d %d %d %d\n"
COMMA ,
IDENFR tmp1
COMMA ,
IDENFR tmp2
COMMA ,
IDENFR tmp3
COMMA ,
IDENFR tmp4
RPARENT )
SEMICN ;
INTTK int
IDENFR t1
ASSIGN =
INTCON 1
COMMA ,
IDENFR t2
ASSIGN =
INTCON 1
COMMA ,
IDENFR t3
ASSIGN =
INTCON 1
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR t1
PLUS +
IDENFR t2
MINU -
IDENFR t3
SEMICN ;
IDENFR tmp2
ASSIGN =
IDENFR t1
MULT *
IDENFR t2
PLUS +
IDENFR t3
SEMICN ;
IDENFR tmp3
ASSIGN =
IDENFR t3
PLUS +
IDENFR t1
MULT *
IDENFR t2
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d %d %d %d\n"
COMMA ,
IDENFR tmp1
COMMA ,
IDENFR tmp2
COMMA ,
IDENFR tmp3
COMMA ,
IDENFR tmp4
RPARENT )
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR t1
MOD %
INTCON 4
PLUS +
INTCON 1
SEMICN ;
IDENFR tmp2
ASSIGN =
IDENFR t1
DIV /
INTCON 1
PLUS +
INTCON 0
SEMICN ;
IDENFR tmp3
ASSIGN =
IDENFR t1
MULT *
IDENFR t2
DIV /
IDENFR t3
SEMICN ;
IDENFR tmp4
ASSIGN =
IDENFR t1
MULT *
LPARENT (
IDENFR t2
PLUS +
IDENFR t3
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d %d %d %d\n"
COMMA ,
IDENFR tmp1
COMMA ,
IDENFR tmp2
COMMA ,
IDENFR tmp3
COMMA ,
IDENFR tmp4
RPARENT )
SEMICN ;
IDENFR tmp1
ASSIGN =
PLUS +
IDENFR tmp1
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR fuc4
LPARENT (
IDENFR tmp2
RPARENT )
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR fuc5
LPARENT (
IDENFR tmp1
COMMA ,
IDENFR tmp2
RPARENT )
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR fuc1
LPARENT (
RPARENT )
SEMICN ;
IDENFR tmp1
ASSIGN =
MINU -
IDENFR tmp1
SEMICN ;
IDENFR tmp1
ASSIGN =
MINU -
IDENFR tmp1
SEMICN ;
IDENFR ia4
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR t1
EQL ==
INTCON 1
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR t2
EQL ==
INTCON 0
RPARENT )
LBRACE {
RBRACE }
ELSETK else
LBRACE {
RBRACE }
FORTK for
LPARENT (
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
IDENFR tmp1
LSS <
INTCON 10
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR tmp1
PLUS +
INTCON 1
RPARENT )
LBRACE {
RBRACE }
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
IDENFR tmp1
LSS <
INTCON 10
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR tmp1
PLUS +
INTCON 1
RPARENT )
LBRACE {
RBRACE }
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
FORTK for
LPARENT (
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR tmp1
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR tmp1
EQL ==
INTCON 10
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
RBRACE }
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
IDENFR tmp1
LSS <
INTCON 10
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR tmp1
PLUS +
INTCON 1
RPARENT )
LBRACE {
RBRACE }
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
IDENFR tmp1
LSS <
INTCON 10
SEMICN ;
RPARENT )
LBRACE {
IDENFR tmp1
ASSIGN =
IDENFR tmp1
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
FORTK for
LPARENT (
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
SEMICN ;
RPARENT )
LBRACE {
IDENFR tmp1
ASSIGN =
IDENFR tmp1
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR tmp1
EQL ==
INTCON 10
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
CONTINUETK continue
SEMICN ;
RBRACE }
RBRACE }
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR tmp1
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR tmp1
EQL ==
INTCON 10
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
RBRACE }
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
SEMICN ;
RPARENT )
LBRACE {
IDENFR tmp1
ASSIGN =
IDENFR tmp1
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR tmp1
EQL ==
INTCON 10
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
RBRACE }
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
FORTK for
LPARENT (
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
IDENFR tmp1
LSS <
INTCON 10
SEMICN ;
RPARENT )
LBRACE {
IDENFR tmp1
ASSIGN =
IDENFR tmp1
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IDENFR tmp1
PLUS +
IDENFR tmp2
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR ig1
SEMICN ;
INTTK int
IDENFR fuc1
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
INTCON 1
SEMICN ;
RBRACE }
CHARTK char
IDENFR fuc2
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
CHRCON 'a'
SEMICN ;
RBRACE }
VOIDTK void
IDENFR fuc3
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
SEMICN ;
RBRACE }
INTTK int
IDENFR fuc4
LPARENT (
INTTK int
IDENFR a
RPARENT )
LBRACE {
RETURNTK return
INTCON 1
SEMICN ;
RBRACE }
INTTK int
IDENFR fuc5
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
RPARENT )
LBRACE {
RETURNTK return
INTCON 1
SEMICN ;
RBRACE }
INTTK int
IDENFR fuc6
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
RETURNTK return
INTCON 1
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
CONSTTK const
INTTK int
IDENFR i1
ASSIGN =
INTCON 1
SEMICN ;
CONSTTK const
INTTK int
IDENFR i2
ASSIGN =
INTCON 1
COMMA ,
IDENFR i3
ASSIGN =
INTCON 1
SEMICN ;
CONSTTK const
INTTK int
IDENFR ia1
LBRACK [
INTCON 5
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
COMMA ,
INTCON 4
COMMA ,
INTCON 5
RBRACE }
SEMICN ;
CONSTTK const
INTTK int
IDENFR ia2
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
RBRACE }
COMMA ,
IDENFR i4
ASSIGN =
INTCON 2
SEMICN ;
CONSTTK const
CHARTK char
IDENFR c1
ASSIGN =
CHRCON 'a'
SEMICN ;
CONSTTK const
CHARTK char
IDENFR c2
ASSIGN =
CHRCON 'a'
COMMA ,
IDENFR c3
ASSIGN =
CHRCON 'b'
SEMICN ;
CONSTTK const
CHARTK char
IDENFR ca2
LBRACK [
INTCON 5
RBRACK ]
ASSIGN =
STRCON "abcd"
SEMICN ;
CONSTTK const
CHARTK char
IDENFR ca3
LBRACK [
INTCON 5
RBRACK ]
ASSIGN =
STRCON "abcd"
COMMA ,
IDENFR c4
ASSIGN =
CHRCON 'a'
SEMICN ;
INTTK int
IDENFR i5
SEMICN ;
INTTK int
IDENFR i6
COMMA ,
IDENFR i7
SEMICN ;
INTTK int
IDENFR ia3
LBRACK [
INTCON 5
RBRACK ]
SEMICN ;
INTTK int
IDENFR i8
ASSIGN =
INTCON 1
SEMICN ;
INTTK int
IDENFR ia4
LBRACK [
INTCON 5
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
COMMA ,
INTCON 4
COMMA ,
INTCON 5
RBRACE }
SEMICN ;
CHARTK char
IDENFR c5
SEMICN ;
CHARTK char
IDENFR c6
ASSIGN =
CHRCON 'a'
SEMICN ;
CHARTK char
IDENFR c7
COMMA ,
IDENFR c8
ASSIGN =
CHRCON 'a'
SEMICN ;
CHARTK char
IDENFR ca4
LBRACK [
INTCON 5
RBRACK ]
SEMICN ;
CHARTK char
IDENFR ca5
LBRACK [
INTCON 5
RBRACK ]
ASSIGN =
STRCON "abcd"
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "22371144\n"
RPARENT )
SEMICN ;
LBRACE {
RBRACE }
INTTK int
IDENFR testio1
ASSIGN =
INTCON 0
SEMICN ;
CHARTK char
IDENFR testio2
ASSIGN =
INTCON 0
SEMICN ;
IDENFR testio1
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR testio2
ASSIGN =
GETCHARTK getchar
LPARENT (
RPARENT )
SEMICN ;
INTTK int
IDENFR tmp1
ASSIGN =
INTCON 1
PLUS +
INTCON 2
PLUS +
INTCON 3
SEMICN ;
INTTK int
IDENFR tmp2
ASSIGN =
INTCON 1
MULT *
INTCON 2
PLUS +
INTCON 2
MULT *
INTCON 1
SEMICN ;
INTTK int
IDENFR tmp3
ASSIGN =
INTCON 1
PLUS +
INTCON 1
MULT *
INTCON 2
PLUS +
INTCON 1
SEMICN ;
INTTK int
IDENFR tmp4
ASSIGN =
INTCON 3
MULT *
LPARENT (
INTCON 1
PLUS +
INTCON 2
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d %d %d %d\n"
COMMA ,
IDENFR tmp1
COMMA ,
IDENFR tmp2
COMMA ,
IDENFR tmp3
COMMA ,
IDENFR tmp4
RPARENT )
SEMICN ;
INTTK int
IDENFR t1
ASSIGN =
INTCON 1
COMMA ,
IDENFR t2
ASSIGN =
INTCON 1
COMMA ,
IDENFR t3
ASSIGN =
INTCON 1
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR t1
PLUS +
IDENFR t2
MINU -
IDENFR t3
SEMICN ;
IDENFR tmp2
ASSIGN =
IDENFR t1
MULT *
IDENFR t2
PLUS +
IDENFR t3
SEMICN ;
IDENFR tmp3
ASSIGN =
IDENFR t3
PLUS +
IDENFR t1
MULT *
IDENFR t2
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d %d %d %d\n"
COMMA ,
IDENFR tmp1
COMMA ,
IDENFR tmp2
COMMA ,
IDENFR tmp3
COMMA ,
IDENFR tmp4
RPARENT )
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR t1
MOD %
INTCON 4
PLUS +
INTCON 1
SEMICN ;
IDENFR tmp2
ASSIGN =
IDENFR t1
DIV /
INTCON 1
PLUS +
INTCON 0
SEMICN ;
IDENFR tmp3
ASSIGN =
IDENFR t1
MULT *
IDENFR t2
DIV /
IDENFR t3
SEMICN ;
IDENFR tmp4
ASSIGN =
IDENFR t1
MULT *
LPARENT (
IDENFR t2
PLUS +
IDENFR t3
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d %d %d %d\n"
COMMA ,
IDENFR tmp1
COMMA ,
IDENFR tmp2
COMMA ,
IDENFR tmp3
COMMA ,
IDENFR tmp4
RPARENT )
SEMICN ;
IDENFR tmp1
ASSIGN =
PLUS +
IDENFR tmp1
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR fuc4
LPARENT (
IDENFR tmp2
RPARENT )
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR fuc5
LPARENT (
IDENFR tmp1
COMMA ,
IDENFR tmp2
RPARENT )
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR fuc1
LPARENT (
RPARENT )
SEMICN ;
IDENFR tmp1
ASSIGN =
MINU -
IDENFR tmp1
SEMICN ;
IDENFR tmp1
ASSIGN =
MINU -
IDENFR tmp1
SEMICN ;
IDENFR ia4
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR t1
EQL ==
INTCON 1
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR t2
EQL ==
INTCON 0
RPARENT )
LBRACE {
RBRACE }
ELSETK else
LBRACE {
RBRACE }
FORTK for
LPARENT (
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
IDENFR tmp1
LSS <
INTCON 10
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR tmp1
PLUS +
INTCON 1
RPARENT )
LBRACE {
RBRACE }
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
IDENFR tmp1
LSS <
INTCON 10
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR tmp1
PLUS +
INTCON 1
RPARENT )
LBRACE {
RBRACE }
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
FORTK for
LPARENT (
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR tmp1
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR tmp1
EQL ==
INTCON 10
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
RBRACE }
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
IDENFR tmp1
LSS <
INTCON 10
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR tmp1
PLUS +
INTCON 1
RPARENT )
LBRACE {
RBRACE }
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
IDENFR tmp1
LSS <
INTCON 10
SEMICN ;
RPARENT )
LBRACE {
IDENFR tmp1
ASSIGN =
IDENFR tmp1
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
FORTK for
LPARENT (
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
SEMICN ;
RPARENT )
LBRACE {
IDENFR tmp1
ASSIGN =
IDENFR tmp1
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR tmp1
EQL ==
INTCON 10
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
CONTINUETK continue
SEMICN ;
RBRACE }
RBRACE }
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR tmp1
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR tmp1
EQL ==
INTCON 10
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
RBRACE }
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
SEMICN ;
RPARENT )
LBRACE {
IDENFR tmp1
ASSIGN =
IDENFR tmp1
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR tmp1
EQL ==
INTCON 10
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
RBRACE }
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
FORTK for
LPARENT (
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
IDENFR tmp1
LSS <
INTCON 10
SEMICN ;
RPARENT )
LBRACE {
IDENFR tmp1
ASSIGN =
IDENFR tmp1
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IDENFR tmp1
PLUS +
IDENFR tmp2
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR ig1
SEMICN ;
INTTK int
IDENFR fuc1
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
INTCON 1
SEMICN ;
RBRACE }
CHARTK char
IDENFR fuc2
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
CHRCON 'a'
SEMICN ;
RBRACE }
VOIDTK void
IDENFR fuc3
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
SEMICN ;
RBRACE }
INTTK int
IDENFR fuc4
LPARENT (
INTTK int
IDENFR a
RPARENT )
LBRACE {
RETURNTK return
INTCON 1
SEMICN ;
RBRACE }
INTTK int
IDENFR fuc5
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
RPARENT )
LBRACE {
RETURNTK return
INTCON 1
SEMICN ;
RBRACE }
INTTK int
IDENFR fuc6
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
RETURNTK return
INTCON 1
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
CONSTTK const
INTTK int
IDENFR i1
ASSIGN =
INTCON 1
SEMICN ;
CONSTTK const
INTTK int
IDENFR i2
ASSIGN =
INTCON 1
COMMA ,
IDENFR i3
ASSIGN =
INTCON 1
SEMICN ;
CONSTTK const
INTTK int
IDENFR ia1
LBRACK [
INTCON 5
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
COMMA ,
INTCON 4
COMMA ,
INTCON 5
RBRACE }
SEMICN ;
CONSTTK const
INTTK int
IDENFR ia2
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
RBRACE }
COMMA ,
IDENFR i4
ASSIGN =
INTCON 2
SEMICN ;
CONSTTK const
CHARTK char
IDENFR c1
ASSIGN =
CHRCON 'a'
SEMICN ;
CONSTTK const
CHARTK char
IDENFR c2
ASSIGN =
CHRCON 'a'
COMMA ,
IDENFR c3
ASSIGN =
CHRCON 'b'
SEMICN ;
CONSTTK const
CHARTK char
IDENFR ca2
LBRACK [
INTCON 5
RBRACK ]
ASSIGN =
STRCON "abcd"
SEMICN ;
CONSTTK const
CHARTK char
IDENFR ca3
LBRACK [
INTCON 5
RBRACK ]
ASSIGN =
STRCON "abcd"
COMMA ,
IDENFR c4
ASSIGN =
CHRCON 'a'
SEMICN ;
INTTK int
IDENFR i5
SEMICN ;
INTTK int
IDENFR i6
COMMA ,
IDENFR i7
SEMICN ;
INTTK int
IDENFR ia3
LBRACK [
INTCON 5
RBRACK ]
SEMICN ;
INTTK int
IDENFR i8
ASSIGN =
INTCON 1
SEMICN ;
INTTK int
IDENFR ia4
LBRACK [
INTCON 5
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
COMMA ,
INTCON 4
COMMA ,
INTCON 5
RBRACE }
SEMICN ;
CHARTK char
IDENFR c5
SEMICN ;
CHARTK char
IDENFR c6
ASSIGN =
CHRCON 'a'
SEMICN ;
CHARTK char
IDENFR c7
COMMA ,
IDENFR c8
ASSIGN =
CHRCON 'a'
SEMICN ;
CHARTK char
IDENFR ca4
LBRACK [
INTCON 5
RBRACK ]
SEMICN ;
CHARTK char
IDENFR ca5
LBRACK [
INTCON 5
RBRACK ]
ASSIGN =
STRCON "abcd"
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "22371144\n"
RPARENT )
SEMICN ;
LBRACE {
RBRACE }
INTTK int
IDENFR testio1
ASSIGN =
INTCON 0
SEMICN ;
CHARTK char
IDENFR testio2
ASSIGN =
INTCON 0
SEMICN ;
IDENFR testio1
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR testio2
ASSIGN =
GETCHARTK getchar
LPARENT (
RPARENT )
SEMICN ;
INTTK int
IDENFR tmp1
ASSIGN =
INTCON 1
PLUS +
INTCON 2
PLUS +
INTCON 3
SEMICN ;
INTTK int
IDENFR tmp2
ASSIGN =
INTCON 1
MULT *
INTCON 2
PLUS +
INTCON 2
MULT *
INTCON 1
SEMICN ;
INTTK int
IDENFR tmp3
ASSIGN =
INTCON 1
PLUS +
INTCON 1
MULT *
INTCON 2
PLUS +
INTCON 1
SEMICN ;
INTTK int
IDENFR tmp4
ASSIGN =
INTCON 3
MULT *
LPARENT (
INTCON 1
PLUS +
INTCON 2
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d %d %d %d\n"
COMMA ,
IDENFR tmp1
COMMA ,
IDENFR tmp2
COMMA ,
IDENFR tmp3
COMMA ,
IDENFR tmp4
RPARENT )
SEMICN ;
INTTK int
IDENFR t1
ASSIGN =
INTCON 1
COMMA ,
IDENFR t2
ASSIGN =
INTCON 1
COMMA ,
IDENFR t3
ASSIGN =
INTCON 1
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR t1
PLUS +
IDENFR t2
MINU -
IDENFR t3
SEMICN ;
IDENFR tmp2
ASSIGN =
IDENFR t1
MULT *
IDENFR t2
PLUS +
IDENFR t3
SEMICN ;
IDENFR tmp3
ASSIGN =
IDENFR t3
PLUS +
IDENFR t1
MULT *
IDENFR t2
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d %d %d %d\n"
COMMA ,
IDENFR tmp1
COMMA ,
IDENFR tmp2
COMMA ,
IDENFR tmp3
COMMA ,
IDENFR tmp4
RPARENT )
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR t1
MOD %
INTCON 4
PLUS +
INTCON 1
SEMICN ;
IDENFR tmp2
ASSIGN =
IDENFR t1
DIV /
INTCON 1
PLUS +
INTCON 0
SEMICN ;
IDENFR tmp3
ASSIGN =
IDENFR t1
MULT *
IDENFR t2
DIV /
IDENFR t3
SEMICN ;
IDENFR tmp4
ASSIGN =
IDENFR t1
MULT *
LPARENT (
IDENFR t2
PLUS +
IDENFR t3
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d %d %d %d\n"
COMMA ,
IDENFR tmp1
COMMA ,
IDENFR tmp2
COMMA ,
IDENFR tmp3
COMMA ,
IDENFR tmp4
RPARENT )
SEMICN ;
IDENFR tmp1
ASSIGN =
PLUS +
IDENFR tmp1
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR fuc4
LPARENT (
IDENFR tmp2
RPARENT )
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR fuc5
LPARENT (
IDENFR tmp1
COMMA ,
IDENFR tmp2
RPARENT )
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR fuc1
LPARENT (
RPARENT )
SEMICN ;
IDENFR tmp1
ASSIGN =
MINU -
IDENFR tmp1
SEMICN ;
IDENFR tmp1
ASSIGN =
MINU -
IDENFR tmp1
SEMICN ;
IDENFR ia4
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR t1
EQL ==
INTCON 1
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR t2
EQL ==
INTCON 0
RPARENT )
LBRACE {
RBRACE }
ELSETK else
LBRACE {
RBRACE }
FORTK for
LPARENT (
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
IDENFR tmp1
LSS <
INTCON 10
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR tmp1
PLUS +
INTCON 1
RPARENT )
LBRACE {
RBRACE }
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
IDENFR tmp1
LSS <
INTCON 10
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR tmp1
PLUS +
INTCON 1
RPARENT )
LBRACE {
RBRACE }
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
FORTK for
LPARENT (
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR tmp1
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR tmp1
EQL ==
INTCON 10
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
RBRACE }
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
IDENFR tmp1
LSS <
INTCON 10
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR tmp1
PLUS +
INTCON 1
RPARENT )
LBRACE {
RBRACE }
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
IDENFR tmp1
LSS <
INTCON 10
SEMICN ;
RPARENT )
LBRACE {
IDENFR tmp1
ASSIGN =
IDENFR tmp1
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
FORTK for
LPARENT (
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
SEMICN ;
RPARENT )
LBRACE {
IDENFR tmp1
ASSIGN =
IDENFR tmp1
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR tmp1
EQL ==
INTCON 10
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
CONTINUETK continue
SEMICN ;
RBRACE }
RBRACE }
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR tmp1
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR tmp1
EQL ==
INTCON 10
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
RBRACE }
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
SEMICN ;
RPARENT )
LBRACE {
IDENFR tmp1
ASSIGN =
IDENFR tmp1
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR tmp1
EQL ==
INTCON 10
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
RBRACE }
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
FORTK for
LPARENT (
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
IDENFR tmp1
LSS <
INTCON 10
SEMICN ;
RPARENT )
LBRACE {
IDENFR tmp1
ASSIGN =
IDENFR tmp1
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IDENFR tmp1
PLUS +
IDENFR tmp2
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR ig1
SEMICN ;
INTTK int
IDENFR fuc1
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
INTCON 1
SEMICN ;
RBRACE }
CHARTK char
IDENFR fuc2
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
CHRCON 'a'
SEMICN ;
RBRACE }
VOIDTK void
IDENFR fuc3
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
SEMICN ;
RBRACE }
INTTK int
IDENFR fuc4
LPARENT (
INTTK int
IDENFR a
RPARENT )
LBRACE {
RETURNTK return
INTCON 1
SEMICN ;
RBRACE }
INTTK int
IDENFR fuc5
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
RPARENT )
LBRACE {
RETURNTK return
INTCON 1
SEMICN ;
RBRACE }
INTTK int
IDENFR fuc6
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
RETURNTK return
INTCON 1
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
CONSTTK const
INTTK int
IDENFR i1
ASSIGN =
INTCON 1
SEMICN ;
CONSTTK const
INTTK int
IDENFR i2
ASSIGN =
INTCON 1
COMMA ,
IDENFR i3
ASSIGN =
INTCON 1
SEMICN ;
CONSTTK const
INTTK int
IDENFR ia1
LBRACK [
INTCON 5
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
COMMA ,
INTCON 4
COMMA ,
INTCON 5
RBRACE }
SEMICN ;
CONSTTK const
INTTK int
IDENFR ia2
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
RBRACE }
COMMA ,
IDENFR i4
ASSIGN =
INTCON 2
SEMICN ;
CONSTTK const
CHARTK char
IDENFR c1
ASSIGN =
CHRCON 'a'
SEMICN ;
CONSTTK const
CHARTK char
IDENFR c2
ASSIGN =
CHRCON 'a'
COMMA ,
IDENFR c3
ASSIGN =
CHRCON 'b'
SEMICN ;
CONSTTK const
CHARTK char
IDENFR ca2
LBRACK [
INTCON 5
RBRACK ]
ASSIGN =
STRCON "abcd"
SEMICN ;
CONSTTK const
CHARTK char
IDENFR ca3
LBRACK [
INTCON 5
RBRACK ]
ASSIGN =
STRCON "abcd"
COMMA ,
IDENFR c4
ASSIGN =
CHRCON 'a'
SEMICN ;
INTTK int
IDENFR i5
SEMICN ;
INTTK int
IDENFR i6
COMMA ,
IDENFR i7
SEMICN ;
INTTK int
IDENFR ia3
LBRACK [
INTCON 5
RBRACK ]
SEMICN ;
INTTK int
IDENFR i8
ASSIGN =
INTCON 1
SEMICN ;
INTTK int
IDENFR ia4
LBRACK [
INTCON 5
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
COMMA ,
INTCON 4
COMMA ,
INTCON 5
RBRACE }
SEMICN ;
CHARTK char
IDENFR c5
SEMICN ;
CHARTK char
IDENFR c6
ASSIGN =
CHRCON 'a'
SEMICN ;
CHARTK char
IDENFR c7
COMMA ,
IDENFR c8
ASSIGN =
CHRCON 'a'
SEMICN ;
CHARTK char
IDENFR ca4
LBRACK [
INTCON 5
RBRACK ]
SEMICN ;
CHARTK char
IDENFR ca5
LBRACK [
INTCON 5
RBRACK ]
ASSIGN =
STRCON "abcd"
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "22371144\n"
RPARENT )
SEMICN ;
LBRACE {
RBRACE }
INTTK int
IDENFR testio1
ASSIGN =
INTCON 0
SEMICN ;
CHARTK char
IDENFR testio2
ASSIGN =
INTCON 0
SEMICN ;
IDENFR testio1
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR testio2
ASSIGN =
GETCHARTK getchar
LPARENT (
RPARENT )
SEMICN ;
INTTK int
IDENFR tmp1
ASSIGN =
INTCON 1
PLUS +
INTCON 2
PLUS +
INTCON 3
SEMICN ;
INTTK int
IDENFR tmp2
ASSIGN =
INTCON 1
MULT *
INTCON 2
PLUS +
INTCON 2
MULT *
INTCON 1
SEMICN ;
INTTK int
IDENFR tmp3
ASSIGN =
INTCON 1
PLUS +
INTCON 1
MULT *
INTCON 2
PLUS +
INTCON 1
SEMICN ;
INTTK int
IDENFR tmp4
ASSIGN =
INTCON 3
MULT *
LPARENT (
INTCON 1
PLUS +
INTCON 2
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d %d %d %d\n"
COMMA ,
IDENFR tmp1
COMMA ,
IDENFR tmp2
COMMA ,
IDENFR tmp3
COMMA ,
IDENFR tmp4
RPARENT )
SEMICN ;
INTTK int
IDENFR t1
ASSIGN =
INTCON 1
COMMA ,
IDENFR t2
ASSIGN =
INTCON 1
COMMA ,
IDENFR t3
ASSIGN =
INTCON 1
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR t1
PLUS +
IDENFR t2
MINU -
IDENFR t3
SEMICN ;
IDENFR tmp2
ASSIGN =
IDENFR t1
MULT *
IDENFR t2
PLUS +
IDENFR t3
SEMICN ;
IDENFR tmp3
ASSIGN =
IDENFR t3
PLUS +
IDENFR t1
MULT *
IDENFR t2
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d %d %d %d\n"
COMMA ,
IDENFR tmp1
COMMA ,
IDENFR tmp2
COMMA ,
IDENFR tmp3
COMMA ,
IDENFR tmp4
RPARENT )
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR t1
MOD %
INTCON 4
PLUS +
INTCON 1
SEMICN ;
IDENFR tmp2
ASSIGN =
IDENFR t1
DIV /
INTCON 1
PLUS +
INTCON 0
SEMICN ;
IDENFR tmp3
ASSIGN =
IDENFR t1
MULT *
IDENFR t2
DIV /
IDENFR t3
SEMICN ;
IDENFR tmp4
ASSIGN =
IDENFR t1
MULT *
LPARENT (
IDENFR t2
PLUS +
IDENFR t3
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d %d %d %d\n"
COMMA ,
IDENFR tmp1
COMMA ,
IDENFR tmp2
COMMA ,
IDENFR tmp3
COMMA ,
IDENFR tmp4
RPARENT )
SEMICN ;
IDENFR tmp1
ASSIGN =
PLUS +
IDENFR tmp1
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR fuc4
LPARENT (
IDENFR tmp2
RPARENT )
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR fuc5
LPARENT (
IDENFR tmp1
COMMA ,
IDENFR tmp2
RPARENT )
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR fuc1
LPARENT (
RPARENT )
SEMICN ;
IDENFR tmp1
ASSIGN =
MINU -
IDENFR tmp1
SEMICN ;
IDENFR tmp1
ASSIGN =
MINU -
IDENFR tmp1
SEMICN ;
IDENFR ia4
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR t1
EQL ==
INTCON 1
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR t2
EQL ==
INTCON 0
RPARENT )
LBRACE {
RBRACE }
ELSETK else
LBRACE {
RBRACE }
FORTK for
LPARENT (
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
IDENFR tmp1
LSS <
INTCON 10
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR tmp1
PLUS +
INTCON 1
RPARENT )
LBRACE {
RBRACE }
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
IDENFR tmp1
LSS <
INTCON 10
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR tmp1
PLUS +
INTCON 1
RPARENT )
LBRACE {
RBRACE }
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
FORTK for
LPARENT (
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR tmp1
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR tmp1
EQL ==
INTCON 10
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
RBRACE }
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
IDENFR tmp1
LSS <
INTCON 10
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR tmp1
PLUS +
INTCON 1
RPARENT )
LBRACE {
RBRACE }
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
IDENFR tmp1
LSS <
INTCON 10
SEMICN ;
RPARENT )
LBRACE {
IDENFR tmp1
ASSIGN =
IDENFR tmp1
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
FORTK for
LPARENT (
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
SEMICN ;
RPARENT )
LBRACE {
IDENFR tmp1
ASSIGN =
IDENFR tmp1
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR tmp1
EQL ==
INTCON 10
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
CONTINUETK continue
SEMICN ;
RBRACE }
RBRACE }
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR tmp1
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR tmp1
EQL ==
INTCON 10
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
RBRACE }
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
SEMICN ;
RPARENT )
LBRACE {
IDENFR tmp1
ASSIGN =
IDENFR tmp1
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR tmp1
EQL ==
INTCON 10
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
RBRACE }
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
FORTK for
LPARENT (
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
IDENFR tmp1
LSS <
INTCON 10
SEMICN ;
RPARENT )
LBRACE {
IDENFR tmp1
ASSIGN =
IDENFR tmp1
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IDENFR tmp1
PLUS +
IDENFR tmp2
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR ig1
SEMICN ;
INTTK int
IDENFR fuc1
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
INTCON 1
SEMICN ;
RBRACE }
CHARTK char
IDENFR fuc2
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
CHRCON 'a'
SEMICN ;
RBRACE }
VOIDTK void
IDENFR fuc3
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
SEMICN ;
RBRACE }
INTTK int
IDENFR fuc4
LPARENT (
INTTK int
IDENFR a
RPARENT )
LBRACE {
RETURNTK return
INTCON 1
SEMICN ;
RBRACE }
INTTK int
IDENFR fuc5
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
RPARENT )
LBRACE {
RETURNTK return
INTCON 1
SEMICN ;
RBRACE }
INTTK int
IDENFR fuc6
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
RETURNTK return
INTCON 1
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
CONSTTK const
INTTK int
IDENFR i1
ASSIGN =
INTCON 1
SEMICN ;
CONSTTK const
INTTK int
IDENFR i2
ASSIGN =
INTCON 1
COMMA ,
IDENFR i3
ASSIGN =
INTCON 1
SEMICN ;
CONSTTK const
INTTK int
IDENFR ia1
LBRACK [
INTCON 5
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
COMMA ,
INTCON 4
COMMA ,
INTCON 5
RBRACE }
SEMICN ;
CONSTTK const
INTTK int
IDENFR ia2
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
RBRACE }
COMMA ,
IDENFR i4
ASSIGN =
INTCON 2
SEMICN ;
CONSTTK const
CHARTK char
IDENFR c1
ASSIGN =
CHRCON 'a'
SEMICN ;
CONSTTK const
CHARTK char
IDENFR c2
ASSIGN =
CHRCON 'a'
COMMA ,
IDENFR c3
ASSIGN =
CHRCON 'b'
SEMICN ;
CONSTTK const
CHARTK char
IDENFR ca2
LBRACK [
INTCON 5
RBRACK ]
ASSIGN =
STRCON "abcd"
SEMICN ;
CONSTTK const
CHARTK char
IDENFR ca3
LBRACK [
INTCON 5
RBRACK ]
ASSIGN =
STRCON "abcd"
COMMA ,
IDENFR c4
ASSIGN =
CHRCON 'a'
SEMICN ;
INTTK int
IDENFR i5
SEMICN ;
INTTK int
IDENFR i6
COMMA ,
IDENFR i7
SEMICN ;
INTTK int
IDENFR ia3
LBRACK [
INTCON 5
RBRACK ]
SEMICN ;
INTTK int
IDENFR i8
ASSIGN =
INTCON 1
SEMICN ;
INTTK int
IDENFR ia4
LBRACK [
INTCON 5
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
COMMA ,
INTCON 4
COMMA ,
INTCON 5
RBRACE }
SEMICN ;
CHARTK char
IDENFR c5
SEMICN ;
CHARTK char
IDENFR c6
ASSIGN =
CHRCON 'a'
SEMICN ;
CHARTK char
IDENFR c7
COMMA ,
IDENFR c8
ASSIGN =
CHRCON 'a'
SEMICN ;
CHARTK char
IDENFR ca4
LBRACK [
INTCON 5
RBRACK ]
SEMICN ;
CHARTK char
IDENFR ca5
LBRACK [
INTCON 5
RBRACK ]
ASSIGN =
STRCON "abcd"
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "22371144\n"
RPARENT )
SEMICN ;
LBRACE {
RBRACE }
INTTK int
IDENFR testio1
ASSIGN =
INTCON 0
SEMICN ;
CHARTK char
IDENFR testio2
ASSIGN =
INTCON 0
SEMICN ;
IDENFR testio1
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR testio2
ASSIGN =
GETCHARTK getchar
LPARENT (
RPARENT )
SEMICN ;
INTTK int
IDENFR tmp1
ASSIGN =
INTCON 1
PLUS +
INTCON 2
PLUS +
INTCON 3
SEMICN ;
INTTK int
IDENFR tmp2
ASSIGN =
INTCON 1
MULT *
INTCON 2
PLUS +
INTCON 2
MULT *
INTCON 1
SEMICN ;
INTTK int
IDENFR tmp3
ASSIGN =
INTCON 1
PLUS +
INTCON 1
MULT *
INTCON 2
PLUS +
INTCON 1
SEMICN ;
INTTK int
IDENFR tmp4
ASSIGN =
INTCON 3
MULT *
LPARENT (
INTCON 1
PLUS +
INTCON 2
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d %d %d %d\n"
COMMA ,
IDENFR tmp1
COMMA ,
IDENFR tmp2
COMMA ,
IDENFR tmp3
COMMA ,
IDENFR tmp4
RPARENT )
SEMICN ;
INTTK int
IDENFR t1
ASSIGN =
INTCON 1
COMMA ,
IDENFR t2
ASSIGN =
INTCON 1
COMMA ,
IDENFR t3
ASSIGN =
INTCON 1
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR t1
PLUS +
IDENFR t2
MINU -
IDENFR t3
SEMICN ;
IDENFR tmp2
ASSIGN =
IDENFR t1
MULT *
IDENFR t2
PLUS +
IDENFR t3
SEMICN ;
IDENFR tmp3
ASSIGN =
IDENFR t3
PLUS +
IDENFR t1
MULT *
IDENFR t2
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d %d %d %d\n"
COMMA ,
IDENFR tmp1
COMMA ,
IDENFR tmp2
COMMA ,
IDENFR tmp3
COMMA ,
IDENFR tmp4
RPARENT )
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR t1
MOD %
INTCON 4
PLUS +
INTCON 1
SEMICN ;
IDENFR tmp2
ASSIGN =
IDENFR t1
DIV /
INTCON 1
PLUS +
INTCON 0
SEMICN ;
IDENFR tmp3
ASSIGN =
IDENFR t1
MULT *
IDENFR t2
DIV /
IDENFR t3
SEMICN ;
IDENFR tmp4
ASSIGN =
IDENFR t1
MULT *
LPARENT (
IDENFR t2
PLUS +
IDENFR t3
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d %d %d %d\n"
COMMA ,
IDENFR tmp1
COMMA ,
IDENFR tmp2
COMMA ,
IDENFR tmp3
COMMA ,
IDENFR tmp4
RPARENT )
SEMICN ;
IDENFR tmp1
ASSIGN =
PLUS +
IDENFR tmp1
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR fuc4
LPARENT (
IDENFR tmp2
RPARENT )
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR fuc5
LPARENT (
IDENFR tmp1
COMMA ,
IDENFR tmp2
RPARENT )
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR fuc1
LPARENT (
RPARENT )
SEMICN ;
IDENFR tmp1
ASSIGN =
MINU -
IDENFR tmp1
SEMICN ;
IDENFR tmp1
ASSIGN =
MINU -
IDENFR tmp1
SEMICN ;
IDENFR ia4
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR t1
EQL ==
INTCON 1
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR t2
EQL ==
INTCON 0
RPARENT )
LBRACE {
RBRACE }
ELSETK else
LBRACE {
RBRACE }
FORTK for
LPARENT (
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
IDENFR tmp1
LSS <
INTCON 10
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR tmp1
PLUS +
INTCON 1
RPARENT )
LBRACE {
RBRACE }
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
IDENFR tmp1
LSS <
INTCON 10
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR tmp1
PLUS +
INTCON 1
RPARENT )
LBRACE {
RBRACE }
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
FORTK for
LPARENT (
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR tmp1
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR tmp1
EQL ==
INTCON 10
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
RBRACE }
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
IDENFR tmp1
LSS <
INTCON 10
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR tmp1
PLUS +
INTCON 1
RPARENT )
LBRACE {
RBRACE }
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
IDENFR tmp1
LSS <
INTCON 10
SEMICN ;
RPARENT )
LBRACE {
IDENFR tmp1
ASSIGN =
IDENFR tmp1
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
FORTK for
LPARENT (
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
SEMICN ;
RPARENT )
LBRACE {
IDENFR tmp1
ASSIGN =
IDENFR tmp1
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR tmp1
EQL ==
INTCON 10
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
CONTINUETK continue
SEMICN ;
RBRACE }
RBRACE }
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR tmp1
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR tmp1
EQL ==
INTCON 10
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
RBRACE }
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
SEMICN ;
RPARENT )
LBRACE {
IDENFR tmp1
ASSIGN =
IDENFR tmp1
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR tmp1
EQL ==
INTCON 10
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
RBRACE }
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
FORTK for
LPARENT (
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
IDENFR tmp1
LSS <
INTCON 10
SEMICN ;
RPARENT )
LBRACE {
IDENFR tmp1
ASSIGN =
IDENFR tmp1
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IDENFR tmp1
PLUS +
IDENFR tmp2
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR ig1
SEMICN ;
INTTK int
IDENFR fuc1
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
INTCON 1
SEMICN ;
RBRACE }
CHARTK char
IDENFR fuc2
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
CHRCON 'a'
SEMICN ;
RBRACE }
VOIDTK void
IDENFR fuc3
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
SEMICN ;
RBRACE }
INTTK int
IDENFR fuc4
LPARENT (
INTTK int
IDENFR a
RPARENT )
LBRACE {
RETURNTK return
INTCON 1
SEMICN ;
RBRACE }
INTTK int
IDENFR fuc5
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
RPARENT )
LBRACE {
RETURNTK return
INTCON 1
SEMICN ;
RBRACE }
INTTK int
IDENFR fuc6
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
RETURNTK return
INTCON 1
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
CONSTTK const
INTTK int
IDENFR i1
ASSIGN =
INTCON 1
SEMICN ;
CONSTTK const
INTTK int
IDENFR i2
ASSIGN =
INTCON 1
COMMA ,
IDENFR i3
ASSIGN =
INTCON 1
SEMICN ;
CONSTTK const
INTTK int
IDENFR ia1
LBRACK [
INTCON 5
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
COMMA ,
INTCON 4
COMMA ,
INTCON 5
RBRACE }
SEMICN ;
CONSTTK const
INTTK int
IDENFR ia2
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
RBRACE }
COMMA ,
IDENFR i4
ASSIGN =
INTCON 2
SEMICN ;
CONSTTK const
CHARTK char
IDENFR c1
ASSIGN =
CHRCON 'a'
SEMICN ;
CONSTTK const
CHARTK char
IDENFR c2
ASSIGN =
CHRCON 'a'
COMMA ,
IDENFR c3
ASSIGN =
CHRCON 'b'
SEMICN ;
CONSTTK const
CHARTK char
IDENFR ca2
LBRACK [
INTCON 5
RBRACK ]
ASSIGN =
STRCON "abcd"
SEMICN ;
CONSTTK const
CHARTK char
IDENFR ca3
LBRACK [
INTCON 5
RBRACK ]
ASSIGN =
STRCON "abcd"
COMMA ,
IDENFR c4
ASSIGN =
CHRCON 'a'
SEMICN ;
INTTK int
IDENFR i5
SEMICN ;
INTTK int
IDENFR i6
COMMA ,
IDENFR i7
SEMICN ;
INTTK int
IDENFR ia3
LBRACK [
INTCON 5
RBRACK ]
SEMICN ;
INTTK int
IDENFR i8
ASSIGN =
INTCON 1
SEMICN ;
INTTK int
IDENFR ia4
LBRACK [
INTCON 5
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
COMMA ,
INTCON 4
COMMA ,
INTCON 5
RBRACE }
SEMICN ;
CHARTK char
IDENFR c5
SEMICN ;
CHARTK char
IDENFR c6
ASSIGN =
CHRCON 'a'
SEMICN ;
CHARTK char
IDENFR c7
COMMA ,
IDENFR c8
ASSIGN =
CHRCON 'a'
SEMICN ;
CHARTK char
IDENFR ca4
LBRACK [
INTCON 5
RBRACK ]
SEMICN ;
CHARTK char
IDENFR ca5
LBRACK [
INTCON 5
RBRACK ]
ASSIGN =
STRCON "abcd"
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "22371144\n"
RPARENT )
SEMICN ;
LBRACE {
RBRACE }
INTTK int
IDENFR testio1
ASSIGN =
INTCON 0
SEMICN ;
CHARTK char
IDENFR testio2
ASSIGN =
INTCON 0
SEMICN ;
IDENFR testio1
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR testio2
ASSIGN =
GETCHARTK getchar
LPARENT (
RPARENT )
SEMICN ;
INTTK int
IDENFR tmp1
ASSIGN =
INTCON 1
PLUS +
INTCON 2
PLUS +
INTCON 3
SEMICN ;
INTTK int
IDENFR tmp2
ASSIGN =
INTCON 1
MULT *
INTCON 2
PLUS +
INTCON 2
MULT *
INTCON 1
SEMICN ;
INTTK int
IDENFR tmp3
ASSIGN =
INTCON 1
PLUS +
INTCON 1
MULT *
INTCON 2
PLUS +
INTCON 1
SEMICN ;
INTTK int
IDENFR tmp4
ASSIGN =
INTCON 3
MULT *
LPARENT (
INTCON 1
PLUS +
INTCON 2
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d %d %d %d\n"
COMMA ,
IDENFR tmp1
COMMA ,
IDENFR tmp2
COMMA ,
IDENFR tmp3
COMMA ,
IDENFR tmp4
RPARENT )
SEMICN ;
INTTK int
IDENFR t1
ASSIGN =
INTCON 1
COMMA ,
IDENFR t2
ASSIGN =
INTCON 1
COMMA ,
IDENFR t3
ASSIGN =
INTCON 1
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR t1
PLUS +
IDENFR t2
MINU -
IDENFR t3
SEMICN ;
IDENFR tmp2
ASSIGN =
IDENFR t1
MULT *
IDENFR t2
PLUS +
IDENFR t3
SEMICN ;
IDENFR tmp3
ASSIGN =
IDENFR t3
PLUS +
IDENFR t1
MULT *
IDENFR t2
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d %d %d %d\n"
COMMA ,
IDENFR tmp1
COMMA ,
IDENFR tmp2
COMMA ,
IDENFR tmp3
COMMA ,
IDENFR tmp4
RPARENT )
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR t1
MOD %
INTCON 4
PLUS +
INTCON 1
SEMICN ;
IDENFR tmp2
ASSIGN =
IDENFR t1
DIV /
INTCON 1
PLUS +
INTCON 0
SEMICN ;
IDENFR tmp3
ASSIGN =
IDENFR t1
MULT *
IDENFR t2
DIV /
IDENFR t3
SEMICN ;
IDENFR tmp4
ASSIGN =
IDENFR t1
MULT *
LPARENT (
IDENFR t2
PLUS +
IDENFR t3
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d %d %d %d\n"
COMMA ,
IDENFR tmp1
COMMA ,
IDENFR tmp2
COMMA ,
IDENFR tmp3
COMMA ,
IDENFR tmp4
RPARENT )
SEMICN ;
IDENFR tmp1
ASSIGN =
PLUS +
IDENFR tmp1
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR fuc4
LPARENT (
IDENFR tmp2
RPARENT )
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR fuc5
LPARENT (
IDENFR tmp1
COMMA ,
IDENFR tmp2
RPARENT )
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR fuc1
LPARENT (
RPARENT )
SEMICN ;
IDENFR tmp1
ASSIGN =
MINU -
IDENFR tmp1
SEMICN ;
IDENFR tmp1
ASSIGN =
MINU -
IDENFR tmp1
SEMICN ;
IDENFR ia4
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR t1
EQL ==
INTCON 1
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR t2
EQL ==
INTCON 0
RPARENT )
LBRACE {
RBRACE }
ELSETK else
LBRACE {
RBRACE }
FORTK for
LPARENT (
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
IDENFR tmp1
LSS <
INTCON 10
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR tmp1
PLUS +
INTCON 1
RPARENT )
LBRACE {
RBRACE }
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
IDENFR tmp1
LSS <
INTCON 10
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR tmp1
PLUS +
INTCON 1
RPARENT )
LBRACE {
RBRACE }
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
FORTK for
LPARENT (
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR tmp1
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR tmp1
EQL ==
INTCON 10
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
RBRACE }
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
IDENFR tmp1
LSS <
INTCON 10
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR tmp1
PLUS +
INTCON 1
RPARENT )
LBRACE {
RBRACE }
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
IDENFR tmp1
LSS <
INTCON 10
SEMICN ;
RPARENT )
LBRACE {
IDENFR tmp1
ASSIGN =
IDENFR tmp1
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
FORTK for
LPARENT (
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
SEMICN ;
RPARENT )
LBRACE {
IDENFR tmp1
ASSIGN =
IDENFR tmp1
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR tmp1
EQL ==
INTCON 10
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
CONTINUETK continue
SEMICN ;
RBRACE }
RBRACE }
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR tmp1
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR tmp1
EQL ==
INTCON 10
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
RBRACE }
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
SEMICN ;
RPARENT )
LBRACE {
IDENFR tmp1
ASSIGN =
IDENFR tmp1
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR tmp1
EQL ==
INTCON 10
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
RBRACE }
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
FORTK for
LPARENT (
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
IDENFR tmp1
LSS <
INTCON 10
SEMICN ;
RPARENT )
LBRACE {
IDENFR tmp1
ASSIGN =
IDENFR tmp1
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IDENFR tmp1
PLUS +
IDENFR tmp2
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR ia4
LBRACK [
INTCON 5
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
COMMA ,
INTCON 4
COMMA ,
INTCON 5
RBRACE }
SEMICN ;
CHARTK char
IDENFR c5
SEMICN ;
CHARTK char
IDENFR c6
ASSIGN =
CHRCON 'a'
SEMICN ;
CHARTK char
IDENFR c7
COMMA ,
IDENFR c8
ASSIGN =
CHRCON 'a'
SEMICN ;
CHARTK char
IDENFR ca4
LBRACK [
INTCON 5
RBRACK ]
SEMICN ;
CHARTK char
IDENFR ca5
LBRACK [
INTCON 5
RBRACK ]
ASSIGN =
STRCON "abcd"
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "22371144\n"
RPARENT )
SEMICN ;
LBRACE {
RBRACE }
INTTK int
IDENFR testio1
ASSIGN =
INTCON 0
SEMICN ;
CHARTK char
IDENFR testio2
ASSIGN =
INTCON 0
SEMICN ;
IDENFR testio1
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR testio2
ASSIGN =
GETCHARTK getchar
LPARENT (
RPARENT )
SEMICN ;
INTTK int
IDENFR tmp1
ASSIGN =
INTCON 1
PLUS +
INTCON 2
PLUS +
INTCON 3
SEMICN ;
INTTK int
IDENFR tmp2
ASSIGN =
INTCON 1
MULT *
INTCON 2
PLUS +
INTCON 2
MULT *
INTCON 1
SEMICN ;
INTTK int
IDENFR tmp3
ASSIGN =
INTCON 1
PLUS +
INTCON 1
MULT *
INTCON 2
PLUS +
INTCON 1
SEMICN ;
INTTK int
IDENFR tmp4
ASSIGN =
INTCON 3
MULT *
LPARENT (
INTCON 1
PLUS +
INTCON 2
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d %d %d %d\n"
COMMA ,
IDENFR tmp1
COMMA ,
IDENFR tmp2
COMMA ,
IDENFR tmp3
COMMA ,
IDENFR tmp4
RPARENT )
SEMICN ;
INTTK int
IDENFR t1
ASSIGN =
INTCON 1
COMMA ,
IDENFR t2
ASSIGN =
INTCON 1
COMMA ,
IDENFR t3
ASSIGN =
INTCON 1
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR t1
PLUS +
IDENFR t2
MINU -
IDENFR t3
SEMICN ;
IDENFR tmp2
ASSIGN =
IDENFR t1
MULT *
IDENFR t2
PLUS +
IDENFR t3
SEMICN ;
IDENFR tmp3
ASSIGN =
IDENFR t3
PLUS +
IDENFR t1
MULT *
IDENFR t2
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d %d %d %d\n"
COMMA ,
IDENFR tmp1
COMMA ,
IDENFR tmp2
COMMA ,
IDENFR tmp3
COMMA ,
IDENFR tmp4
RPARENT )
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR t1
MOD %
INTCON 4
PLUS +
INTCON 1
SEMICN ;
IDENFR tmp2
ASSIGN =
IDENFR t1
DIV /
INTCON 1
PLUS +
INTCON 0
SEMICN ;
IDENFR tmp3
ASSIGN =
IDENFR t1
MULT *
IDENFR t2
DIV /
IDENFR t3
SEMICN ;
IDENFR tmp4
ASSIGN =
IDENFR t1
MULT *
LPARENT (
IDENFR t2
PLUS +
IDENFR t3
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d %d %d %d\n"
COMMA ,
IDENFR tmp1
COMMA ,
IDENFR tmp2
COMMA ,
IDENFR tmp3
COMMA ,
IDENFR tmp4
RPARENT )
SEMICN ;
IDENFR tmp1
ASSIGN =
PLUS +
IDENFR tmp1
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR fuc4
LPARENT (
IDENFR tmp2
RPARENT )
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR fuc5
LPARENT (
IDENFR tmp1
COMMA ,
IDENFR tmp2
RPARENT )
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR fuc1
LPARENT (
RPARENT )
SEMICN ;
IDENFR tmp1
ASSIGN =
MINU -
IDENFR tmp1
SEMICN ;
IDENFR tmp1
ASSIGN =
MINU -
IDENFR tmp1
SEMICN ;
IDENFR ia4
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR t1
EQL ==
INTCON 1
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR t2
EQL ==
INTCON 0
RPARENT )
LBRACE {
RBRACE }
ELSETK else
LBRACE {
RBRACE }
FORTK for
LPARENT (
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
IDENFR tmp1
LSS <
INTCON 10
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR tmp1
PLUS +
INTCON 1
RPARENT )
LBRACE {
RBRACE }
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
IDENFR tmp1
LSS <
INTCON 10
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR tmp1
PLUS +
INTCON 1
RPARENT )
LBRACE {
RBRACE }
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
FORTK for
LPARENT (
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR tmp1
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR tmp1
EQL ==
INTCON 10
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
RBRACE }
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
IDENFR tmp1
LSS <
INTCON 10
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR tmp1
PLUS +
INTCON 1
RPARENT )
LBRACE {
RBRACE }
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
IDENFR tmp1
LSS <
INTCON 10
SEMICN ;
RPARENT )
LBRACE {
IDENFR tmp1
ASSIGN =
IDENFR tmp1
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
FORTK for
LPARENT (
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
SEMICN ;
RPARENT )
LBRACE {
IDENFR tmp1
ASSIGN =
IDENFR tmp1
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR tmp1
EQL ==
INTCON 10
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
CONTINUETK continue
SEMICN ;
RBRACE }
RBRACE }
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR tmp1
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR tmp1
EQL ==
INTCON 10
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
RBRACE }
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
SEMICN ;
RPARENT )
LBRACE {
IDENFR tmp1
ASSIGN =
IDENFR tmp1
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR tmp1
EQL ==
INTCON 10
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
RBRACE }
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
FORTK for
LPARENT (
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
IDENFR tmp1
LSS <
INTCON 10
SEMICN ;
RPARENT )
LBRACE {
IDENFR tmp1
ASSIGN =
IDENFR tmp1
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IDENFR tmp1
PLUS +
IDENFR tmp2
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR ia4
LBRACK [
INTCON 5
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
COMMA ,
INTCON 4
COMMA ,
INTCON 5
RBRACE }
SEMICN ;
CHARTK char
IDENFR c5
SEMICN ;
CHARTK char
IDENFR c6
ASSIGN =
CHRCON 'a'
SEMICN ;
CHARTK char
IDENFR c7
COMMA ,
IDENFR c8
ASSIGN =
CHRCON 'a'
SEMICN ;
CHARTK char
IDENFR ca4
LBRACK [
INTCON 5
RBRACK ]
SEMICN ;
CHARTK char
IDENFR ca5
LBRACK [
INTCON 5
RBRACK ]
ASSIGN =
STRCON "abcd"
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "22371144\n"
RPARENT )
SEMICN ;
LBRACE {
RBRACE }
INTTK int
IDENFR testio1
ASSIGN =
INTCON 0
SEMICN ;
CHARTK char
IDENFR testio2
ASSIGN =
INTCON 0
SEMICN ;
IDENFR testio1
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR testio2
ASSIGN =
GETCHARTK getchar
LPARENT (
RPARENT )
SEMICN ;
INTTK int
IDENFR tmp1
ASSIGN =
INTCON 1
PLUS +
INTCON 2
PLUS +
INTCON 3
SEMICN ;
INTTK int
IDENFR tmp2
ASSIGN =
INTCON 1
MULT *
INTCON 2
PLUS +
INTCON 2
MULT *
INTCON 1
SEMICN ;
INTTK int
IDENFR tmp3
ASSIGN =
INTCON 1
PLUS +
INTCON 1
MULT *
INTCON 2
PLUS +
INTCON 1
SEMICN ;
INTTK int
IDENFR tmp4
ASSIGN =
INTCON 3
MULT *
LPARENT (
INTCON 1
PLUS +
INTCON 2
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d %d %d %d\n"
COMMA ,
IDENFR tmp1
COMMA ,
IDENFR tmp2
COMMA ,
IDENFR tmp3
COMMA ,
IDENFR tmp4
RPARENT )
SEMICN ;
INTTK int
IDENFR t1
ASSIGN =
INTCON 1
COMMA ,
IDENFR t2
ASSIGN =
INTCON 1
COMMA ,
IDENFR t3
ASSIGN =
INTCON 1
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR t1
PLUS +
IDENFR t2
MINU -
IDENFR t3
SEMICN ;
IDENFR tmp2
ASSIGN =
IDENFR t1
MULT *
IDENFR t2
PLUS +
IDENFR t3
SEMICN ;
IDENFR tmp3
ASSIGN =
IDENFR t3
PLUS +
IDENFR t1
MULT *
IDENFR t2
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d %d %d %d\n"
COMMA ,
IDENFR tmp1
COMMA ,
IDENFR tmp2
COMMA ,
IDENFR tmp3
COMMA ,
IDENFR tmp4
RPARENT )
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR t1
MOD %
INTCON 4
PLUS +
INTCON 1
SEMICN ;
IDENFR tmp2
ASSIGN =
IDENFR t1
DIV /
INTCON 1
PLUS +
INTCON 0
SEMICN ;
IDENFR tmp3
ASSIGN =
IDENFR t1
MULT *
IDENFR t2
DIV /
IDENFR t3
SEMICN ;
IDENFR tmp4
ASSIGN =
IDENFR t1
MULT *
LPARENT (
IDENFR t2
PLUS +
IDENFR t3
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d %d %d %d\n"
COMMA ,
IDENFR tmp1
COMMA ,
IDENFR tmp2
COMMA ,
IDENFR tmp3
COMMA ,
IDENFR tmp4
RPARENT )
SEMICN ;
IDENFR tmp1
ASSIGN =
PLUS +
IDENFR tmp1
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR fuc4
LPARENT (
IDENFR tmp2
RPARENT )
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR fuc5
LPARENT (
IDENFR tmp1
COMMA ,
IDENFR tmp2
RPARENT )
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR fuc1
LPARENT (
RPARENT )
SEMICN ;
IDENFR tmp1
ASSIGN =
MINU -
IDENFR tmp1
SEMICN ;
IDENFR tmp1
ASSIGN =
MINU -
IDENFR tmp1
SEMICN ;
IDENFR ia4
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR t1
EQL ==
INTCON 1
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR t2
EQL ==
INTCON 0
RPARENT )
LBRACE {
RBRACE }
ELSETK else
LBRACE {
RBRACE }
FORTK for
LPARENT (
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
IDENFR tmp1
LSS <
INTCON 10
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR tmp1
PLUS +
INTCON 1
RPARENT )
LBRACE {
RBRACE }
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
IDENFR tmp1
LSS <
INTCON 10
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR tmp1
PLUS +
INTCON 1
RPARENT )
LBRACE {
RBRACE }
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
FORTK for
LPARENT (
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR tmp1
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR tmp1
EQL ==
INTCON 10
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
RBRACE }
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
IDENFR tmp1
LSS <
INTCON 10
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR tmp1
PLUS +
INTCON 1
RPARENT )
LBRACE {
RBRACE }
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
IDENFR tmp1
LSS <
INTCON 10
SEMICN ;
RPARENT )
LBRACE {
IDENFR tmp1
ASSIGN =
IDENFR tmp1
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
FORTK for
LPARENT (
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
SEMICN ;
RPARENT )
LBRACE {
IDENFR tmp1
ASSIGN =
IDENFR tmp1
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR tmp1
EQL ==
INTCON 10
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
CONTINUETK continue
SEMICN ;
RBRACE }
RBRACE }
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR tmp1
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR tmp1
EQL ==
INTCON 10
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
RBRACE }
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
SEMICN ;
RPARENT )
LBRACE {
IDENFR tmp1
ASSIGN =
IDENFR tmp1
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR tmp1
EQL ==
INTCON 10
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
RBRACE }
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
FORTK for
LPARENT (
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
IDENFR tmp1
LSS <
INTCON 10
SEMICN ;
RPARENT )
LBRACE {
IDENFR tmp1
ASSIGN =
IDENFR tmp1
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IDENFR tmp1
PLUS +
IDENFR tmp2
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR ia4
LBRACK [
INTCON 5
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
COMMA ,
INTCON 4
COMMA ,
INTCON 5
RBRACE }
SEMICN ;
CHARTK char
IDENFR c5
SEMICN ;
CHARTK char
IDENFR c6
ASSIGN =
CHRCON 'a'
SEMICN ;
CHARTK char
IDENFR c7
COMMA ,
IDENFR c8
ASSIGN =
CHRCON 'a'
SEMICN ;
CHARTK char
IDENFR ca4
LBRACK [
INTCON 5
RBRACK ]
SEMICN ;
CHARTK char
IDENFR ca5
LBRACK [
INTCON 5
RBRACK ]
ASSIGN =
STRCON "abcd"
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "22371144\n"
RPARENT )
SEMICN ;
LBRACE {
RBRACE }
INTTK int
IDENFR testio1
ASSIGN =
INTCON 0
SEMICN ;
CHARTK char
IDENFR testio2
ASSIGN =
INTCON 0
SEMICN ;
IDENFR testio1
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR testio2
ASSIGN =
GETCHARTK getchar
LPARENT (
RPARENT )
SEMICN ;
INTTK int
IDENFR tmp1
ASSIGN =
INTCON 1
PLUS +
INTCON 2
PLUS +
INTCON 3
SEMICN ;
INTTK int
IDENFR tmp2
ASSIGN =
INTCON 1
MULT *
INTCON 2
PLUS +
INTCON 2
MULT *
INTCON 1
SEMICN ;
INTTK int
IDENFR tmp3
ASSIGN =
INTCON 1
PLUS +
INTCON 1
MULT *
INTCON 2
PLUS +
INTCON 1
SEMICN ;
INTTK int
IDENFR tmp4
ASSIGN =
INTCON 3
MULT *
LPARENT (
INTCON 1
PLUS +
INTCON 2
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d %d %d %d\n"
COMMA ,
IDENFR tmp1
COMMA ,
IDENFR tmp2
COMMA ,
IDENFR tmp3
COMMA ,
IDENFR tmp4
RPARENT )
SEMICN ;
INTTK int
IDENFR t1
ASSIGN =
INTCON 1
COMMA ,
IDENFR t2
ASSIGN =
INTCON 1
COMMA ,
IDENFR t3
ASSIGN =
INTCON 1
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR t1
PLUS +
IDENFR t2
MINU -
IDENFR t3
SEMICN ;
IDENFR tmp2
ASSIGN =
IDENFR t1
MULT *
IDENFR t2
PLUS +
IDENFR t3
SEMICN ;
IDENFR tmp3
ASSIGN =
IDENFR t3
PLUS +
IDENFR t1
MULT *
IDENFR t2
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d %d %d %d\n"
COMMA ,
IDENFR tmp1
COMMA ,
IDENFR tmp2
COMMA ,
IDENFR tmp3
COMMA ,
IDENFR tmp4
RPARENT )
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR t1
MOD %
INTCON 4
PLUS +
INTCON 1
SEMICN ;
IDENFR tmp2
ASSIGN =
IDENFR t1
DIV /
INTCON 1
PLUS +
INTCON 0
SEMICN ;
IDENFR tmp3
ASSIGN =
IDENFR t1
MULT *
IDENFR t2
DIV /
IDENFR t3
SEMICN ;
IDENFR tmp4
ASSIGN =
IDENFR t1
MULT *
LPARENT (
IDENFR t2
PLUS +
IDENFR t3
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d %d %d %d\n"
COMMA ,
IDENFR tmp1
COMMA ,
IDENFR tmp2
COMMA ,
IDENFR tmp3
COMMA ,
IDENFR tmp4
RPARENT )
SEMICN ;
IDENFR tmp1
ASSIGN =
PLUS +
IDENFR tmp1
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR fuc4
LPARENT (
IDENFR tmp2
RPARENT )
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR fuc5
LPARENT (
IDENFR tmp1
COMMA ,
IDENFR tmp2
RPARENT )
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR fuc1
LPARENT (
RPARENT )
SEMICN ;
IDENFR tmp1
ASSIGN =
MINU -
IDENFR tmp1
SEMICN ;
IDENFR tmp1
ASSIGN =
MINU -
IDENFR tmp1
SEMICN ;
IDENFR ia4
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR t1
EQL ==
INTCON 1
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR t2
EQL ==
INTCON 0
RPARENT )
LBRACE {
RBRACE }
ELSETK else
LBRACE {
RBRACE }
FORTK for
LPARENT (
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
IDENFR tmp1
LSS <
INTCON 10
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR tmp1
PLUS +
INTCON 1
RPARENT )
LBRACE {
RBRACE }
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
IDENFR tmp1
LSS <
INTCON 10
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR tmp1
PLUS +
INTCON 1
RPARENT )
LBRACE {
RBRACE }
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
FORTK for
LPARENT (
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR tmp1
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR tmp1
EQL ==
INTCON 10
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
RBRACE }
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
IDENFR tmp1
LSS <
INTCON 10
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR tmp1
PLUS +
INTCON 1
RPARENT )
LBRACE {
RBRACE }
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
IDENFR tmp1
LSS <
INTCON 10
SEMICN ;
RPARENT )
LBRACE {
IDENFR tmp1
ASSIGN =
IDENFR tmp1
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
FORTK for
LPARENT (
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
SEMICN ;
RPARENT )
LBRACE {
IDENFR tmp1
ASSIGN =
IDENFR tmp1
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR tmp1
EQL ==
INTCON 10
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
CONTINUETK continue
SEMICN ;
RBRACE }
RBRACE }
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR tmp1
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR tmp1
EQL ==
INTCON 10
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
RBRACE }
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
SEMICN ;
RPARENT )
LBRACE {
IDENFR tmp1
ASSIGN =
IDENFR tmp1
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR tmp1
EQL ==
INTCON 10
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
RBRACE }
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
FORTK for
LPARENT (
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
IDENFR tmp1
LSS <
INTCON 10
SEMICN ;
RPARENT )
LBRACE {
IDENFR tmp1
ASSIGN =
IDENFR tmp1
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IDENFR tmp1
PLUS +
IDENFR tmp2
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR ia4
LBRACK [
INTCON 5
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
COMMA ,
INTCON 4
COMMA ,
INTCON 5
RBRACE }
SEMICN ;
CHARTK char
IDENFR c5
SEMICN ;
CHARTK char
IDENFR c6
ASSIGN =
CHRCON 'a'
SEMICN ;
CHARTK char
IDENFR c7
COMMA ,
IDENFR c8
ASSIGN =
CHRCON 'a'
SEMICN ;
CHARTK char
IDENFR ca4
LBRACK [
INTCON 5
RBRACK ]
SEMICN ;
CHARTK char
IDENFR ca5
LBRACK [
INTCON 5
RBRACK ]
ASSIGN =
STRCON "abcd"
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "22371144\n"
RPARENT )
SEMICN ;
LBRACE {
RBRACE }
INTTK int
IDENFR testio1
ASSIGN =
INTCON 0
SEMICN ;
CHARTK char
IDENFR testio2
ASSIGN =
INTCON 0
SEMICN ;
IDENFR testio1
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR testio2
ASSIGN =
GETCHARTK getchar
LPARENT (
RPARENT )
SEMICN ;
INTTK int
IDENFR tmp1
ASSIGN =
INTCON 1
PLUS +
INTCON 2
PLUS +
INTCON 3
SEMICN ;
INTTK int
IDENFR tmp2
ASSIGN =
INTCON 1
MULT *
INTCON 2
PLUS +
INTCON 2
MULT *
INTCON 1
SEMICN ;
INTTK int
IDENFR tmp3
ASSIGN =
INTCON 1
PLUS +
INTCON 1
MULT *
INTCON 2
PLUS +
INTCON 1
SEMICN ;
INTTK int
IDENFR tmp4
ASSIGN =
INTCON 3
MULT *
LPARENT (
INTCON 1
PLUS +
INTCON 2
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d %d %d %d\n"
COMMA ,
IDENFR tmp1
COMMA ,
IDENFR tmp2
COMMA ,
IDENFR tmp3
COMMA ,
IDENFR tmp4
RPARENT )
SEMICN ;
INTTK int
IDENFR t1
ASSIGN =
INTCON 1
COMMA ,
IDENFR t2
ASSIGN =
INTCON 1
COMMA ,
IDENFR t3
ASSIGN =
INTCON 1
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR t1
PLUS +
IDENFR t2
MINU -
IDENFR t3
SEMICN ;
IDENFR tmp2
ASSIGN =
IDENFR t1
MULT *
IDENFR t2
PLUS +
IDENFR t3
SEMICN ;
IDENFR tmp3
ASSIGN =
IDENFR t3
PLUS +
IDENFR t1
MULT *
IDENFR t2
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d %d %d %d\n"
COMMA ,
IDENFR tmp1
COMMA ,
IDENFR tmp2
COMMA ,
IDENFR tmp3
COMMA ,
IDENFR tmp4
RPARENT )
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR t1
MOD %
INTCON 4
PLUS +
INTCON 1
SEMICN ;
IDENFR tmp2
ASSIGN =
IDENFR t1
DIV /
INTCON 1
PLUS +
INTCON 0
SEMICN ;
IDENFR tmp3
ASSIGN =
IDENFR t1
MULT *
IDENFR t2
DIV /
IDENFR t3
SEMICN ;
IDENFR tmp4
ASSIGN =
IDENFR t1
MULT *
LPARENT (
IDENFR t2
PLUS +
IDENFR t3
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d %d %d %d\n"
COMMA ,
IDENFR tmp1
COMMA ,
IDENFR tmp2
COMMA ,
IDENFR tmp3
COMMA ,
IDENFR tmp4
RPARENT )
SEMICN ;
IDENFR tmp1
ASSIGN =
PLUS +
IDENFR tmp1
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR fuc4
LPARENT (
IDENFR tmp2
RPARENT )
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR fuc5
LPARENT (
IDENFR tmp1
COMMA ,
IDENFR tmp2
RPARENT )
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR fuc1
LPARENT (
RPARENT )
SEMICN ;
IDENFR tmp1
ASSIGN =
MINU -
IDENFR tmp1
SEMICN ;
IDENFR tmp1
ASSIGN =
MINU -
IDENFR tmp1
SEMICN ;
IDENFR ia4
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR t1
EQL ==
INTCON 1
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR t2
EQL ==
INTCON 0
RPARENT )
LBRACE {
RBRACE }
ELSETK else
LBRACE {
RBRACE }
FORTK for
LPARENT (
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
IDENFR tmp1
LSS <
INTCON 10
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR tmp1
PLUS +
INTCON 1
RPARENT )
LBRACE {
RBRACE }
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
IDENFR tmp1
LSS <
INTCON 10
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR tmp1
PLUS +
INTCON 1
RPARENT )
LBRACE {
RBRACE }
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
FORTK for
LPARENT (
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR tmp1
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR tmp1
EQL ==
INTCON 10
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
RBRACE }
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
IDENFR tmp1
LSS <
INTCON 10
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR tmp1
PLUS +
INTCON 1
RPARENT )
LBRACE {
RBRACE }
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
IDENFR tmp1
LSS <
INTCON 10
SEMICN ;
RPARENT )
LBRACE {
IDENFR tmp1
ASSIGN =
IDENFR tmp1
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
FORTK for
LPARENT (
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
SEMICN ;
RPARENT )
LBRACE {
IDENFR tmp1
ASSIGN =
IDENFR tmp1
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR tmp1
EQL ==
INTCON 10
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
CONTINUETK continue
SEMICN ;
RBRACE }
RBRACE }
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR tmp1
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR tmp1
EQL ==
INTCON 10
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
RBRACE }
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
SEMICN ;
RPARENT )
LBRACE {
IDENFR tmp1
ASSIGN =
IDENFR tmp1
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR tmp1
EQL ==
INTCON 10
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
RBRACE }
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
FORTK for
LPARENT (
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
IDENFR tmp1
LSS <
INTCON 10
SEMICN ;
RPARENT )
LBRACE {
IDENFR tmp1
ASSIGN =
IDENFR tmp1
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IDENFR tmp1
PLUS +
IDENFR tmp2
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR ia4
LBRACK [
INTCON 5
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
COMMA ,
INTCON 4
COMMA ,
INTCON 5
RBRACE }
SEMICN ;
CHARTK char
IDENFR c5
SEMICN ;
CHARTK char
IDENFR c6
ASSIGN =
CHRCON 'a'
SEMICN ;
CHARTK char
IDENFR c7
COMMA ,
IDENFR c8
ASSIGN =
CHRCON 'a'
SEMICN ;
CHARTK char
IDENFR ca4
LBRACK [
INTCON 5
RBRACK ]
SEMICN ;
CHARTK char
IDENFR ca5
LBRACK [
INTCON 5
RBRACK ]
ASSIGN =
STRCON "abcd"
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "22371144\n"
RPARENT )
SEMICN ;
LBRACE {
RBRACE }
INTTK int
IDENFR testio1
ASSIGN =
INTCON 0
SEMICN ;
CHARTK char
IDENFR testio2
ASSIGN =
INTCON 0
SEMICN ;
IDENFR testio1
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR testio2
ASSIGN =
GETCHARTK getchar
LPARENT (
RPARENT )
SEMICN ;
INTTK int
IDENFR tmp1
ASSIGN =
INTCON 1
PLUS +
INTCON 2
PLUS +
INTCON 3
SEMICN ;
INTTK int
IDENFR tmp2
ASSIGN =
INTCON 1
MULT *
INTCON 2
PLUS +
INTCON 2
MULT *
INTCON 1
SEMICN ;
INTTK int
IDENFR tmp3
ASSIGN =
INTCON 1
PLUS +
INTCON 1
MULT *
INTCON 2
PLUS +
INTCON 1
SEMICN ;
INTTK int
IDENFR tmp4
ASSIGN =
INTCON 3
MULT *
LPARENT (
INTCON 1
PLUS +
INTCON 2
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d %d %d %d\n"
COMMA ,
IDENFR tmp1
COMMA ,
IDENFR tmp2
COMMA ,
IDENFR tmp3
COMMA ,
IDENFR tmp4
RPARENT )
SEMICN ;
INTTK int
IDENFR t1
ASSIGN =
INTCON 1
COMMA ,
IDENFR t2
ASSIGN =
INTCON 1
COMMA ,
IDENFR t3
ASSIGN =
INTCON 1
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR t1
PLUS +
IDENFR t2
MINU -
IDENFR t3
SEMICN ;
IDENFR tmp2
ASSIGN =
IDENFR t1
MULT *
IDENFR t2
PLUS +
IDENFR t3
SEMICN ;
IDENFR tmp3
ASSIGN =
IDENFR t3
PLUS +
IDENFR t1
MULT *
IDENFR t2
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d %d %d %d\n"
COMMA ,
IDENFR tmp1
COMMA ,
IDENFR tmp2
COMMA ,
IDENFR tmp3
COMMA ,
IDENFR tmp4
RPARENT )
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR t1
MOD %
INTCON 4
PLUS +
INTCON 1
SEMICN ;
IDENFR tmp2
ASSIGN =
IDENFR t1
DIV /
INTCON 1
PLUS +
INTCON 0
SEMICN ;
IDENFR tmp3
ASSIGN =
IDENFR t1
MULT *
IDENFR t2
DIV /
IDENFR t3
SEMICN ;
IDENFR tmp4
ASSIGN =
IDENFR t1
MULT *
LPARENT (
IDENFR t2
PLUS +
IDENFR t3
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d %d %d %d\n"
COMMA ,
IDENFR tmp1
COMMA ,
IDENFR tmp2
COMMA ,
IDENFR tmp3
COMMA ,
IDENFR tmp4
RPARENT )
SEMICN ;
IDENFR tmp1
ASSIGN =
PLUS +
IDENFR tmp1
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR fuc4
LPARENT (
IDENFR tmp2
RPARENT )
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR fuc5
LPARENT (
IDENFR tmp1
COMMA ,
IDENFR tmp2
RPARENT )
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR fuc1
LPARENT (
RPARENT )
SEMICN ;
IDENFR tmp1
ASSIGN =
MINU -
IDENFR tmp1
SEMICN ;
IDENFR tmp1
ASSIGN =
MINU -
IDENFR tmp1
SEMICN ;
IDENFR ia4
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR t1
EQL ==
INTCON 1
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR t2
EQL ==
INTCON 0
RPARENT )
LBRACE {
RBRACE }
ELSETK else
LBRACE {
RBRACE }
FORTK for
LPARENT (
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
IDENFR tmp1
LSS <
INTCON 10
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR tmp1
PLUS +
INTCON 1
RPARENT )
LBRACE {
RBRACE }
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
IDENFR tmp1
LSS <
INTCON 10
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR tmp1
PLUS +
INTCON 1
RPARENT )
LBRACE {
RBRACE }
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
FORTK for
LPARENT (
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR tmp1
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR tmp1
EQL ==
INTCON 10
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
RBRACE }
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
IDENFR tmp1
LSS <
INTCON 10
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR tmp1
PLUS +
INTCON 1
RPARENT )
LBRACE {
RBRACE }
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
IDENFR tmp1
LSS <
INTCON 10
SEMICN ;
RPARENT )
LBRACE {
IDENFR tmp1
ASSIGN =
IDENFR tmp1
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
FORTK for
LPARENT (
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
SEMICN ;
RPARENT )
LBRACE {
IDENFR tmp1
ASSIGN =
IDENFR tmp1
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR tmp1
EQL ==
INTCON 10
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
CONTINUETK continue
SEMICN ;
RBRACE }
RBRACE }
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR tmp1
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR tmp1
EQL ==
INTCON 10
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
RBRACE }
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
SEMICN ;
RPARENT )
LBRACE {
IDENFR tmp1
ASSIGN =
IDENFR tmp1
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR tmp1
EQL ==
INTCON 10
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
RBRACE }
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
FORTK for
LPARENT (
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
IDENFR tmp1
LSS <
INTCON 10
SEMICN ;
RPARENT )
LBRACE {
IDENFR tmp1
ASSIGN =
IDENFR tmp1
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IDENFR tmp1
PLUS +
IDENFR tmp2
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR ia4
LBRACK [
INTCON 5
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
COMMA ,
INTCON 4
COMMA ,
INTCON 5
RBRACE }
SEMICN ;
CHARTK char
IDENFR c5
SEMICN ;
CHARTK char
IDENFR c6
ASSIGN =
CHRCON 'a'
SEMICN ;
CHARTK char
IDENFR c7
COMMA ,
IDENFR c8
ASSIGN =
CHRCON 'a'
SEMICN ;
CHARTK char
IDENFR ca4
LBRACK [
INTCON 5
RBRACK ]
SEMICN ;
CHARTK char
IDENFR ca5
LBRACK [
INTCON 5
RBRACK ]
ASSIGN =
STRCON "abcd"
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "22371144\n"
RPARENT )
SEMICN ;
LBRACE {
RBRACE }
INTTK int
IDENFR testio1
ASSIGN =
INTCON 0
SEMICN ;
CHARTK char
IDENFR testio2
ASSIGN =
INTCON 0
SEMICN ;
IDENFR testio1
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR testio2
ASSIGN =
GETCHARTK getchar
LPARENT (
RPARENT )
SEMICN ;
INTTK int
IDENFR tmp1
ASSIGN =
INTCON 1
PLUS +
INTCON 2
PLUS +
INTCON 3
SEMICN ;
INTTK int
IDENFR tmp2
ASSIGN =
INTCON 1
MULT *
INTCON 2
PLUS +
INTCON 2
MULT *
INTCON 1
SEMICN ;
INTTK int
IDENFR tmp3
ASSIGN =
INTCON 1
PLUS +
INTCON 1
MULT *
INTCON 2
PLUS +
INTCON 1
SEMICN ;
INTTK int
IDENFR tmp4
ASSIGN =
INTCON 3
MULT *
LPARENT (
INTCON 1
PLUS +
INTCON 2
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d %d %d %d\n"
COMMA ,
IDENFR tmp1
COMMA ,
IDENFR tmp2
COMMA ,
IDENFR tmp3
COMMA ,
IDENFR tmp4
RPARENT )
SEMICN ;
INTTK int
IDENFR t1
ASSIGN =
INTCON 1
COMMA ,
IDENFR t2
ASSIGN =
INTCON 1
COMMA ,
IDENFR t3
ASSIGN =
INTCON 1
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR t1
PLUS +
IDENFR t2
MINU -
IDENFR t3
SEMICN ;
IDENFR tmp2
ASSIGN =
IDENFR t1
MULT *
IDENFR t2
PLUS +
IDENFR t3
SEMICN ;
IDENFR tmp3
ASSIGN =
IDENFR t3
PLUS +
IDENFR t1
MULT *
IDENFR t2
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d %d %d %d\n"
COMMA ,
IDENFR tmp1
COMMA ,
IDENFR tmp2
COMMA ,
IDENFR tmp3
COMMA ,
IDENFR tmp4
RPARENT )
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR t1
MOD %
INTCON 4
PLUS +
INTCON 1
SEMICN ;
IDENFR tmp2
ASSIGN =
IDENFR t1
DIV /
INTCON 1
PLUS +
INTCON 0
SEMICN ;
IDENFR tmp3
ASSIGN =
IDENFR t1
MULT *
IDENFR t2
DIV /
IDENFR t3
SEMICN ;
IDENFR tmp4
ASSIGN =
IDENFR t1
MULT *
LPARENT (
IDENFR t2
PLUS +
IDENFR t3
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d %d %d %d\n"
COMMA ,
IDENFR tmp1
COMMA ,
IDENFR tmp2
COMMA ,
IDENFR tmp3
COMMA ,
IDENFR tmp4
RPARENT )
SEMICN ;
IDENFR tmp1
ASSIGN =
PLUS +
IDENFR tmp1
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR fuc4
LPARENT (
IDENFR tmp2
RPARENT )
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR fuc5
LPARENT (
IDENFR tmp1
COMMA ,
IDENFR tmp2
RPARENT )
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR fuc1
LPARENT (
RPARENT )
SEMICN ;
IDENFR tmp1
ASSIGN =
MINU -
IDENFR tmp1
SEMICN ;
IDENFR tmp1
ASSIGN =
MINU -
IDENFR tmp1
SEMICN ;
IDENFR ia4
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR t1
EQL ==
INTCON 1
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR t2
EQL ==
INTCON 0
RPARENT )
LBRACE {
RBRACE }
ELSETK else
LBRACE {
RBRACE }
FORTK for
LPARENT (
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
IDENFR tmp1
LSS <
INTCON 10
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR tmp1
PLUS +
INTCON 1
RPARENT )
LBRACE {
RBRACE }
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
IDENFR tmp1
LSS <
INTCON 10
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR tmp1
PLUS +
INTCON 1
RPARENT )
LBRACE {
RBRACE }
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
FORTK for
LPARENT (
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR tmp1
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR tmp1
EQL ==
INTCON 10
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
RBRACE }
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
IDENFR tmp1
LSS <
INTCON 10
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR tmp1
PLUS +
INTCON 1
RPARENT )
LBRACE {
RBRACE }
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
IDENFR tmp1
LSS <
INTCON 10
SEMICN ;
RPARENT )
LBRACE {
IDENFR tmp1
ASSIGN =
IDENFR tmp1
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
FORTK for
LPARENT (
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
SEMICN ;
RPARENT )
LBRACE {
IDENFR tmp1
ASSIGN =
IDENFR tmp1
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR tmp1
EQL ==
INTCON 10
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
CONTINUETK continue
SEMICN ;
RBRACE }
RBRACE }
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR tmp1
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR tmp1
EQL ==
INTCON 10
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
RBRACE }
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
SEMICN ;
RPARENT )
LBRACE {
IDENFR tmp1
ASSIGN =
IDENFR tmp1
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR tmp1
EQL ==
INTCON 10
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
RBRACE }
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
FORTK for
LPARENT (
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
IDENFR tmp1
LSS <
INTCON 10
SEMICN ;
RPARENT )
LBRACE {
IDENFR tmp1
ASSIGN =
IDENFR tmp1
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IDENFR tmp1
PLUS +
IDENFR tmp2
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR ia4
LBRACK [
INTCON 5
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
COMMA ,
INTCON 4
COMMA ,
INTCON 5
RBRACE }
SEMICN ;
CHARTK char
IDENFR c5
SEMICN ;
CHARTK char
IDENFR c6
ASSIGN =
CHRCON 'a'
SEMICN ;
CHARTK char
IDENFR c7
COMMA ,
IDENFR c8
ASSIGN =
CHRCON 'a'
SEMICN ;
CHARTK char
IDENFR ca4
LBRACK [
INTCON 5
RBRACK ]
SEMICN ;
CHARTK char
IDENFR ca5
LBRACK [
INTCON 5
RBRACK ]
ASSIGN =
STRCON "abcd"
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "22371144\n"
RPARENT )
SEMICN ;
LBRACE {
RBRACE }
INTTK int
IDENFR testio1
ASSIGN =
INTCON 0
SEMICN ;
CHARTK char
IDENFR testio2
ASSIGN =
INTCON 0
SEMICN ;
IDENFR testio1
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR testio2
ASSIGN =
GETCHARTK getchar
LPARENT (
RPARENT )
SEMICN ;
INTTK int
IDENFR tmp1
ASSIGN =
INTCON 1
PLUS +
INTCON 2
PLUS +
INTCON 3
SEMICN ;
INTTK int
IDENFR tmp2
ASSIGN =
INTCON 1
MULT *
INTCON 2
PLUS +
INTCON 2
MULT *
INTCON 1
SEMICN ;
INTTK int
IDENFR tmp3
ASSIGN =
INTCON 1
PLUS +
INTCON 1
MULT *
INTCON 2
PLUS +
INTCON 1
SEMICN ;
INTTK int
IDENFR tmp4
ASSIGN =
INTCON 3
MULT *
LPARENT (
INTCON 1
PLUS +
INTCON 2
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d %d %d %d\n"
COMMA ,
IDENFR tmp1
COMMA ,
IDENFR tmp2
COMMA ,
IDENFR tmp3
COMMA ,
IDENFR tmp4
RPARENT )
SEMICN ;
INTTK int
IDENFR t1
ASSIGN =
INTCON 1
COMMA ,
IDENFR t2
ASSIGN =
INTCON 1
COMMA ,
IDENFR t3
ASSIGN =
INTCON 1
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR t1
PLUS +
IDENFR t2
MINU -
IDENFR t3
SEMICN ;
IDENFR tmp2
ASSIGN =
IDENFR t1
MULT *
IDENFR t2
PLUS +
IDENFR t3
SEMICN ;
IDENFR tmp3
ASSIGN =
IDENFR t3
PLUS +
IDENFR t1
MULT *
IDENFR t2
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d %d %d %d\n"
COMMA ,
IDENFR tmp1
COMMA ,
IDENFR tmp2
COMMA ,
IDENFR tmp3
COMMA ,
IDENFR tmp4
RPARENT )
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR t1
MOD %
INTCON 4
PLUS +
INTCON 1
SEMICN ;
IDENFR tmp2
ASSIGN =
IDENFR t1
DIV /
INTCON 1
PLUS +
INTCON 0
SEMICN ;
IDENFR tmp3
ASSIGN =
IDENFR t1
MULT *
IDENFR t2
DIV /
IDENFR t3
SEMICN ;
IDENFR tmp4
ASSIGN =
IDENFR t1
MULT *
LPARENT (
IDENFR t2
PLUS +
IDENFR t3
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d %d %d %d\n"
COMMA ,
IDENFR tmp1
COMMA ,
IDENFR tmp2
COMMA ,
IDENFR tmp3
COMMA ,
IDENFR tmp4
RPARENT )
SEMICN ;
IDENFR tmp1
ASSIGN =
PLUS +
IDENFR tmp1
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR fuc4
LPARENT (
IDENFR tmp2
RPARENT )
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR fuc5
LPARENT (
IDENFR tmp1
COMMA ,
IDENFR tmp2
RPARENT )
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR fuc1
LPARENT (
RPARENT )
SEMICN ;
IDENFR tmp1
ASSIGN =
MINU -
IDENFR tmp1
SEMICN ;
IDENFR tmp1
ASSIGN =
MINU -
IDENFR tmp1
SEMICN ;
IDENFR ia4
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR t1
EQL ==
INTCON 1
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR t2
EQL ==
INTCON 0
RPARENT )
LBRACE {
RBRACE }
ELSETK else
LBRACE {
RBRACE }
FORTK for
LPARENT (
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
IDENFR tmp1
LSS <
INTCON 10
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR tmp1
PLUS +
INTCON 1
RPARENT )
LBRACE {
RBRACE }
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
IDENFR tmp1
LSS <
INTCON 10
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR tmp1
PLUS +
INTCON 1
RPARENT )
LBRACE {
RBRACE }
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
FORTK for
LPARENT (
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR tmp1
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR tmp1
EQL ==
INTCON 10
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
RBRACE }
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
IDENFR tmp1
LSS <
INTCON 10
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR tmp1
PLUS +
INTCON 1
RPARENT )
LBRACE {
RBRACE }
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
IDENFR tmp1
LSS <
INTCON 10
SEMICN ;
RPARENT )
LBRACE {
IDENFR tmp1
ASSIGN =
IDENFR tmp1
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
FORTK for
LPARENT (
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
SEMICN ;
RPARENT )
LBRACE {
IDENFR tmp1
ASSIGN =
IDENFR tmp1
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR tmp1
EQL ==
INTCON 10
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
CONTINUETK continue
SEMICN ;
RBRACE }
RBRACE }
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR tmp1
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR tmp1
EQL ==
INTCON 10
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
RBRACE }
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
SEMICN ;
RPARENT )
LBRACE {
IDENFR tmp1
ASSIGN =
IDENFR tmp1
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR tmp1
EQL ==
INTCON 10
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
RBRACE }
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
FORTK for
LPARENT (
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
IDENFR tmp1
LSS <
INTCON 10
SEMICN ;
RPARENT )
LBRACE {
IDENFR tmp1
ASSIGN =
IDENFR tmp1
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IDENFR tmp1
PLUS +
IDENFR tmp2
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR ia4
LBRACK [
INTCON 5
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
COMMA ,
INTCON 4
COMMA ,
INTCON 5
RBRACE }
SEMICN ;
CHARTK char
IDENFR c5
SEMICN ;
CHARTK char
IDENFR c6
ASSIGN =
CHRCON 'a'
SEMICN ;
CHARTK char
IDENFR c7
COMMA ,
IDENFR c8
ASSIGN =
CHRCON 'a'
SEMICN ;
CHARTK char
IDENFR ca4
LBRACK [
INTCON 5
RBRACK ]
SEMICN ;
CHARTK char
IDENFR ca5
LBRACK [
INTCON 5
RBRACK ]
ASSIGN =
STRCON "abcd"
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "22371144\n"
RPARENT )
SEMICN ;
LBRACE {
RBRACE }
INTTK int
IDENFR testio1
ASSIGN =
INTCON 0
SEMICN ;
CHARTK char
IDENFR testio2
ASSIGN =
INTCON 0
SEMICN ;
IDENFR testio1
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR testio2
ASSIGN =
GETCHARTK getchar
LPARENT (
RPARENT )
SEMICN ;
INTTK int
IDENFR tmp1
ASSIGN =
INTCON 1
PLUS +
INTCON 2
PLUS +
INTCON 3
SEMICN ;
INTTK int
IDENFR tmp2
ASSIGN =
INTCON 1
MULT *
INTCON 2
PLUS +
INTCON 2
MULT *
INTCON 1
SEMICN ;
INTTK int
IDENFR tmp3
ASSIGN =
INTCON 1
PLUS +
INTCON 1
MULT *
INTCON 2
PLUS +
INTCON 1
SEMICN ;
INTTK int
IDENFR tmp4
ASSIGN =
INTCON 3
MULT *
LPARENT (
INTCON 1
PLUS +
INTCON 2
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d %d %d %d\n"
COMMA ,
IDENFR tmp1
COMMA ,
IDENFR tmp2
COMMA ,
IDENFR tmp3
COMMA ,
IDENFR tmp4
RPARENT )
SEMICN ;
INTTK int
IDENFR t1
ASSIGN =
INTCON 1
COMMA ,
IDENFR t2
ASSIGN =
INTCON 1
COMMA ,
IDENFR t3
ASSIGN =
INTCON 1
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR t1
PLUS +
IDENFR t2
MINU -
IDENFR t3
SEMICN ;
IDENFR tmp2
ASSIGN =
IDENFR t1
MULT *
IDENFR t2
PLUS +
IDENFR t3
SEMICN ;
IDENFR tmp3
ASSIGN =
IDENFR t3
PLUS +
IDENFR t1
MULT *
IDENFR t2
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d %d %d %d\n"
COMMA ,
IDENFR tmp1
COMMA ,
IDENFR tmp2
COMMA ,
IDENFR tmp3
COMMA ,
IDENFR tmp4
RPARENT )
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR t1
MOD %
INTCON 4
PLUS +
INTCON 1
SEMICN ;
IDENFR tmp2
ASSIGN =
IDENFR t1
DIV /
INTCON 1
PLUS +
INTCON 0
SEMICN ;
IDENFR tmp3
ASSIGN =
IDENFR t1
MULT *
IDENFR t2
DIV /
IDENFR t3
SEMICN ;
IDENFR tmp4
ASSIGN =
IDENFR t1
MULT *
LPARENT (
IDENFR t2
PLUS +
IDENFR t3
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d %d %d %d\n"
COMMA ,
IDENFR tmp1
COMMA ,
IDENFR tmp2
COMMA ,
IDENFR tmp3
COMMA ,
IDENFR tmp4
RPARENT )
SEMICN ;
IDENFR tmp1
ASSIGN =
PLUS +
IDENFR tmp1
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR fuc4
LPARENT (
IDENFR tmp2
RPARENT )
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR fuc5
LPARENT (
IDENFR tmp1
COMMA ,
IDENFR tmp2
RPARENT )
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR fuc1
LPARENT (
RPARENT )
SEMICN ;
IDENFR tmp1
ASSIGN =
MINU -
IDENFR tmp1
SEMICN ;
IDENFR tmp1
ASSIGN =
MINU -
IDENFR tmp1
SEMICN ;
IDENFR ia4
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR t1
EQL ==
INTCON 1
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR t2
EQL ==
INTCON 0
RPARENT )
LBRACE {
RBRACE }
ELSETK else
LBRACE {
RBRACE }
FORTK for
LPARENT (
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
IDENFR tmp1
LSS <
INTCON 10
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR tmp1
PLUS +
INTCON 1
RPARENT )
LBRACE {
RBRACE }
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
IDENFR tmp1
LSS <
INTCON 10
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR tmp1
PLUS +
INTCON 1
RPARENT )
LBRACE {
RBRACE }
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
FORTK for
LPARENT (
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR tmp1
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR tmp1
EQL ==
INTCON 10
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
RBRACE }
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
IDENFR tmp1
LSS <
INTCON 10
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR tmp1
PLUS +
INTCON 1
RPARENT )
LBRACE {
RBRACE }
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
IDENFR tmp1
LSS <
INTCON 10
SEMICN ;
RPARENT )
LBRACE {
IDENFR tmp1
ASSIGN =
IDENFR tmp1
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
FORTK for
LPARENT (
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
SEMICN ;
RPARENT )
LBRACE {
IDENFR tmp1
ASSIGN =
IDENFR tmp1
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR tmp1
EQL ==
INTCON 10
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
CONTINUETK continue
SEMICN ;
RBRACE }
RBRACE }
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR tmp1
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR tmp1
EQL ==
INTCON 10
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
RBRACE }
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
SEMICN ;
RPARENT )
LBRACE {
IDENFR tmp1
ASSIGN =
IDENFR tmp1
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR tmp1
EQL ==
INTCON 10
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
RBRACE }
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
FORTK for
LPARENT (
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
IDENFR tmp1
LSS <
INTCON 10
SEMICN ;
RPARENT )
LBRACE {
IDENFR tmp1
ASSIGN =
IDENFR tmp1
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IDENFR tmp1
PLUS +
IDENFR tmp2
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR ia4
LBRACK [
INTCON 5
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
COMMA ,
INTCON 4
COMMA ,
INTCON 5
RBRACE }
SEMICN ;
CHARTK char
IDENFR c5
SEMICN ;
CHARTK char
IDENFR c6
ASSIGN =
CHRCON 'a'
SEMICN ;
CHARTK char
IDENFR c7
COMMA ,
IDENFR c8
ASSIGN =
CHRCON 'a'
SEMICN ;
CHARTK char
IDENFR ca4
LBRACK [
INTCON 5
RBRACK ]
SEMICN ;
CHARTK char
IDENFR ca5
LBRACK [
INTCON 5
RBRACK ]
ASSIGN =
STRCON "abcd"
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "22371144\n"
RPARENT )
SEMICN ;
LBRACE {
RBRACE }
INTTK int
IDENFR testio1
ASSIGN =
INTCON 0
SEMICN ;
CHARTK char
IDENFR testio2
ASSIGN =
INTCON 0
SEMICN ;
IDENFR testio1
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR testio2
ASSIGN =
GETCHARTK getchar
LPARENT (
RPARENT )
SEMICN ;
INTTK int
IDENFR tmp1
ASSIGN =
INTCON 1
PLUS +
INTCON 2
PLUS +
INTCON 3
SEMICN ;
INTTK int
IDENFR tmp2
ASSIGN =
INTCON 1
MULT *
INTCON 2
PLUS +
INTCON 2
MULT *
INTCON 1
SEMICN ;
INTTK int
IDENFR tmp3
ASSIGN =
INTCON 1
PLUS +
INTCON 1
MULT *
INTCON 2
PLUS +
INTCON 1
SEMICN ;
INTTK int
IDENFR tmp4
ASSIGN =
INTCON 3
MULT *
LPARENT (
INTCON 1
PLUS +
INTCON 2
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d %d %d %d\n"
COMMA ,
IDENFR tmp1
COMMA ,
IDENFR tmp2
COMMA ,
IDENFR tmp3
COMMA ,
IDENFR tmp4
RPARENT )
SEMICN ;
INTTK int
IDENFR t1
ASSIGN =
INTCON 1
COMMA ,
IDENFR t2
ASSIGN =
INTCON 1
COMMA ,
IDENFR t3
ASSIGN =
INTCON 1
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR t1
PLUS +
IDENFR t2
MINU -
IDENFR t3
SEMICN ;
IDENFR tmp2
ASSIGN =
IDENFR t1
MULT *
IDENFR t2
PLUS +
IDENFR t3
SEMICN ;
IDENFR tmp3
ASSIGN =
IDENFR t3
PLUS +
IDENFR t1
MULT *
IDENFR t2
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d %d %d %d\n"
COMMA ,
IDENFR tmp1
COMMA ,
IDENFR tmp2
COMMA ,
IDENFR tmp3
COMMA ,
IDENFR tmp4
RPARENT )
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR t1
MOD %
INTCON 4
PLUS +
INTCON 1
SEMICN ;
IDENFR tmp2
ASSIGN =
IDENFR t1
DIV /
INTCON 1
PLUS +
INTCON 0
SEMICN ;
IDENFR tmp3
ASSIGN =
IDENFR t1
MULT *
IDENFR t2
DIV /
IDENFR t3
SEMICN ;
IDENFR tmp4
ASSIGN =
IDENFR t1
MULT *
LPARENT (
IDENFR t2
PLUS +
IDENFR t3
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d %d %d %d\n"
COMMA ,
IDENFR tmp1
COMMA ,
IDENFR tmp2
COMMA ,
IDENFR tmp3
COMMA ,
IDENFR tmp4
RPARENT )
SEMICN ;
IDENFR tmp1
ASSIGN =
PLUS +
IDENFR tmp1
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR fuc4
LPARENT (
IDENFR tmp2
RPARENT )
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR fuc5
LPARENT (
IDENFR tmp1
COMMA ,
IDENFR tmp2
RPARENT )
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR fuc1
LPARENT (
RPARENT )
SEMICN ;
IDENFR tmp1
ASSIGN =
MINU -
IDENFR tmp1
SEMICN ;
IDENFR tmp1
ASSIGN =
MINU -
IDENFR tmp1
SEMICN ;
IDENFR ia4
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR t1
EQL ==
INTCON 1
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR t2
EQL ==
INTCON 0
RPARENT )
LBRACE {
RBRACE }
ELSETK else
LBRACE {
RBRACE }
FORTK for
LPARENT (
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
IDENFR tmp1
LSS <
INTCON 10
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR tmp1
PLUS +
INTCON 1
RPARENT )
LBRACE {
RBRACE }
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
IDENFR tmp1
LSS <
INTCON 10
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR tmp1
PLUS +
INTCON 1
RPARENT )
LBRACE {
RBRACE }
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
FORTK for
LPARENT (
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR tmp1
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR tmp1
EQL ==
INTCON 10
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
RBRACE }
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
IDENFR tmp1
LSS <
INTCON 10
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR tmp1
PLUS +
INTCON 1
RPARENT )
LBRACE {
RBRACE }
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
IDENFR tmp1
LSS <
INTCON 10
SEMICN ;
RPARENT )
LBRACE {
IDENFR tmp1
ASSIGN =
IDENFR tmp1
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
FORTK for
LPARENT (
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
SEMICN ;
RPARENT )
LBRACE {
IDENFR tmp1
ASSIGN =
IDENFR tmp1
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR tmp1
EQL ==
INTCON 10
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
CONTINUETK continue
SEMICN ;
RBRACE }
RBRACE }
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR tmp1
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR tmp1
EQL ==
INTCON 10
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
RBRACE }
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
SEMICN ;
RPARENT )
LBRACE {
IDENFR tmp1
ASSIGN =
IDENFR tmp1
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR tmp1
EQL ==
INTCON 10
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
RBRACE }
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
FORTK for
LPARENT (
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
IDENFR tmp1
LSS <
INTCON 10
SEMICN ;
RPARENT )
LBRACE {
IDENFR tmp1
ASSIGN =
IDENFR tmp1
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IDENFR tmp1
PLUS +
IDENFR tmp2
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR ia4
LBRACK [
INTCON 5
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
COMMA ,
INTCON 4
COMMA ,
INTCON 5
RBRACE }
SEMICN ;
CHARTK char
IDENFR c5
SEMICN ;
CHARTK char
IDENFR c6
ASSIGN =
CHRCON 'a'
SEMICN ;
CHARTK char
IDENFR c7
COMMA ,
IDENFR c8
ASSIGN =
CHRCON 'a'
SEMICN ;
CHARTK char
IDENFR ca4
LBRACK [
INTCON 5
RBRACK ]
SEMICN ;
CHARTK char
IDENFR ca5
LBRACK [
INTCON 5
RBRACK ]
ASSIGN =
STRCON "abcd"
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "22371144\n"
RPARENT )
SEMICN ;
LBRACE {
RBRACE }
INTTK int
IDENFR testio1
ASSIGN =
INTCON 0
SEMICN ;
CHARTK char
IDENFR testio2
ASSIGN =
INTCON 0
SEMICN ;
IDENFR testio1
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR testio2
ASSIGN =
GETCHARTK getchar
LPARENT (
RPARENT )
SEMICN ;
INTTK int
IDENFR tmp1
ASSIGN =
INTCON 1
PLUS +
INTCON 2
PLUS +
INTCON 3
SEMICN ;
INTTK int
IDENFR tmp2
ASSIGN =
INTCON 1
MULT *
INTCON 2
PLUS +
INTCON 2
MULT *
INTCON 1
SEMICN ;
INTTK int
IDENFR tmp3
ASSIGN =
INTCON 1
PLUS +
INTCON 1
MULT *
INTCON 2
PLUS +
INTCON 1
SEMICN ;
INTTK int
IDENFR tmp4
ASSIGN =
INTCON 3
MULT *
LPARENT (
INTCON 1
PLUS +
INTCON 2
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d %d %d %d\n"
COMMA ,
IDENFR tmp1
COMMA ,
IDENFR tmp2
COMMA ,
IDENFR tmp3
COMMA ,
IDENFR tmp4
RPARENT )
SEMICN ;
INTTK int
IDENFR t1
ASSIGN =
INTCON 1
COMMA ,
IDENFR t2
ASSIGN =
INTCON 1
COMMA ,
IDENFR t3
ASSIGN =
INTCON 1
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR t1
PLUS +
IDENFR t2
MINU -
IDENFR t3
SEMICN ;
IDENFR tmp2
ASSIGN =
IDENFR t1
MULT *
IDENFR t2
PLUS +
IDENFR t3
SEMICN ;
IDENFR tmp3
ASSIGN =
IDENFR t3
PLUS +
IDENFR t1
MULT *
IDENFR t2
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d %d %d %d\n"
COMMA ,
IDENFR tmp1
COMMA ,
IDENFR tmp2
COMMA ,
IDENFR tmp3
COMMA ,
IDENFR tmp4
RPARENT )
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR t1
MOD %
INTCON 4
PLUS +
INTCON 1
SEMICN ;
IDENFR tmp2
ASSIGN =
IDENFR t1
DIV /
INTCON 1
PLUS +
INTCON 0
SEMICN ;
IDENFR tmp3
ASSIGN =
IDENFR t1
MULT *
IDENFR t2
DIV /
IDENFR t3
SEMICN ;
IDENFR tmp4
ASSIGN =
IDENFR t1
MULT *
LPARENT (
IDENFR t2
PLUS +
IDENFR t3
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d %d %d %d\n"
COMMA ,
IDENFR tmp1
COMMA ,
IDENFR tmp2
COMMA ,
IDENFR tmp3
COMMA ,
IDENFR tmp4
RPARENT )
SEMICN ;
IDENFR tmp1
ASSIGN =
PLUS +
IDENFR tmp1
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR fuc4
LPARENT (
IDENFR tmp2
RPARENT )
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR fuc5
LPARENT (
IDENFR tmp1
COMMA ,
IDENFR tmp2
RPARENT )
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR fuc1
LPARENT (
RPARENT )
SEMICN ;
IDENFR tmp1
ASSIGN =
MINU -
IDENFR tmp1
SEMICN ;
IDENFR tmp1
ASSIGN =
MINU -
IDENFR tmp1
SEMICN ;
IDENFR ia4
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR t1
EQL ==
INTCON 1
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR t2
EQL ==
INTCON 0
RPARENT )
LBRACE {
RBRACE }
ELSETK else
LBRACE {
RBRACE }
FORTK for
LPARENT (
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
IDENFR tmp1
LSS <
INTCON 10
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR tmp1
PLUS +
INTCON 1
RPARENT )
LBRACE {
RBRACE }
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
IDENFR tmp1
LSS <
INTCON 10
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR tmp1
PLUS +
INTCON 1
RPARENT )
LBRACE {
RBRACE }
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
FORTK for
LPARENT (
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR tmp1
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR tmp1
EQL ==
INTCON 10
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
RBRACE }
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
IDENFR tmp1
LSS <
INTCON 10
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR tmp1
PLUS +
INTCON 1
RPARENT )
LBRACE {
RBRACE }
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
IDENFR tmp1
LSS <
INTCON 10
SEMICN ;
RPARENT )
LBRACE {
IDENFR tmp1
ASSIGN =
IDENFR tmp1
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
FORTK for
LPARENT (
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
SEMICN ;
RPARENT )
LBRACE {
IDENFR tmp1
ASSIGN =
IDENFR tmp1
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR tmp1
EQL ==
INTCON 10
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
CONTINUETK continue
SEMICN ;
RBRACE }
RBRACE }
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
SEMICN ;
IDENFR tmp1
ASSIGN =
IDENFR tmp1
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR tmp1
EQL ==
INTCON 10
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
RBRACE }
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
SEMICN ;
RPARENT )
LBRACE {
IDENFR tmp1
ASSIGN =
IDENFR tmp1
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR tmp1
EQL ==
INTCON 10
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
RBRACE }
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
FORTK for
LPARENT (
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
IDENFR tmp1
LSS <
INTCON 10
SEMICN ;
RPARENT )
LBRACE {
IDENFR tmp1
ASSIGN =
IDENFR tmp1
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IDENFR tmp1
PLUS +
IDENFR tmp2
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
IDENFR f
LPARENT (
RPARENT )
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
IDENFR f
LPARENT (
RPARENT )
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
INTCON 10
SEMICN ;
IDENFR i
PLUS +
PLUS +
RPARENT )
LBRACE {
RBRACE }
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
INTCON 10
SEMICN ;
IDENFR i
PLUS +
PLUS +
RPARENT )
LBRACE {
RBRACE }
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
INTCON 10
SEMICN ;
IDENFR i
PLUS +
PLUS +
RPARENT )
LBRACE {
RBRACE }
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
INTCON 10
SEMICN ;
IDENFR i
PLUS +
PLUS +
RPARENT )
LBRACE {
RBRACE }
RBRACE }
CONSTTK const
INTTK int
IDENFR p
ASSIGN =
INTCON 88
SEMICN ;
INTTK int
IDENFR q
ASSIGN =
INTCON 66
COMMA ,
IDENFR r
ASSIGN =
INTCON 155
SEMICN ;
INTTK int
IDENFR s
ASSIGN =
INTCON 15
SEMICN ;
INTTK int
IDENFR max
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR a
GRE >
IDENFR b
RPARENT )
LBRACE {
RETURNTK return
IDENFR a
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
RETURNTK return
IDENFR b
SEMICN ;
RBRACE }
RETURNTK return
IDENFR a
SEMICN ;
RBRACE }
INTTK int
IDENFR min
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR a
LSS <
IDENFR b
RPARENT )
LBRACE {
RETURNTK return
IDENFR a
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
RETURNTK return
IDENFR b
SEMICN ;
RBRACE }
RETURNTK return
IDENFR a
SEMICN ;
RBRACE }
INTTK int
IDENFR scan
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR tmp
ASSIGN =
INTCON 0
SEMICN ;
IDENFR tmp
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
RETURNTK return
IDENFR tmp
PLUS +
INTCON 0
SEMICN ;
RBRACE }
VOIDTK void
IDENFR print
LPARENT (
INTTK int
IDENFR num
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR num
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR noUse
LPARENT (
INTTK int
IDENFR a
RPARENT )
LBRACE {
INTTK int
IDENFR b
ASSIGN =
IDENFR a
SEMICN ;
RBRACE }
INTTK int
IDENFR mid
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
COMMA ,
INTTK int
IDENFR c
RPARENT )
LBRACE {
INTTK int
IDENFR m
ASSIGN =
INTCON 0
SEMICN ;
IFTK if
LPARENT (
IDENFR max
LPARENT (
IDENFR a
COMMA ,
IDENFR b
RPARENT )
EQL ==
IDENFR min
LPARENT (
IDENFR b
COMMA ,
IDENFR c
RPARENT )
RPARENT )
LBRACE {
RETURNTK return
IDENFR b
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IFTK if
LPARENT (
IDENFR max
LPARENT (
IDENFR a
COMMA ,
IDENFR b
RPARENT )
NEQ !=
IDENFR min
LPARENT (
IDENFR a
COMMA ,
IDENFR c
RPARENT )
RPARENT )
RETURNTK return
IDENFR c
SEMICN ;
ELSETK else
RETURNTK return
IDENFR a
SEMICN ;
RBRACE }
RETURNTK return
IDENFR b
SEMICN ;
RBRACE }
INTTK int
IDENFR factorial
LPARENT (
INTTK int
IDENFR n
RPARENT )
LBRACE {
INTTK int
IDENFR i
ASSIGN =
IDENFR n
SEMICN ;
INTTK int
IDENFR ret
ASSIGN =
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR n
GRE >
INTCON 20
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "Your Num is too Big!!!\n"
RPARENT )
SEMICN ;
RETURNTK return
MINU -
INTCON 1
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
IDENFR i
SEMICN ;
RPARENT )
LBRACE {
IDENFR ret
ASSIGN =
IDENFR ret
MULT *
IDENFR i
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
MINU -
INTCON 1
SEMICN ;
RBRACE }
RETURNTK return
IDENFR ret
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR a
ASSIGN =
IDENFR max
LPARENT (
IDENFR min
LPARENT (
IDENFR p
COMMA ,
IDENFR q
RPARENT )
COMMA ,
IDENFR max
LPARENT (
IDENFR s
COMMA ,
IDENFR scan
LPARENT (
RPARENT )
RPARENT )
RPARENT )
SEMICN ;
INTTK int
IDENFR b
ASSIGN =
IDENFR min
LPARENT (
IDENFR r
COMMA ,
IDENFR scan
LPARENT (
RPARENT )
RPARENT )
COMMA ,
IDENFR c
ASSIGN =
INTCON 58
SEMICN ;
CONSTTK const
INTTK int
IDENFR d
ASSIGN =
INTCON 65535
SEMICN ;
INTTK int
IDENFR bool1
ASSIGN =
INTCON 0
COMMA ,
IDENFR bool2
ASSIGN =
INTCON 1
COMMA ,
IDENFR bool3
ASSIGN =
MINU -
INTCON 1
SEMICN ;
INTTK int
IDENFR tmp
ASSIGN =
MINU -
INTCON 10
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "19373022\n"
RPARENT )
SEMICN ;
IDENFR b
ASSIGN =
IDENFR b
PLUS +
IDENFR c
MINU -
IDENFR a
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "b:%d\n"
COMMA ,
IDENFR b
RPARENT )
SEMICN ;
SEMICN ;
LPARENT (
IDENFR bool2
PLUS +
IDENFR bool3
RPARENT )
SEMICN ;
IDENFR bool1
SEMICN ;
IFTK if
LPARENT (
NOT !
IDENFR bool1
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "Bool1 is false!\n"
RPARENT )
SEMICN ;
RBRACE }
INTCON 2147483647
SEMICN ;
LBRACE {
INTTK int
IDENFR tmp
ASSIGN =
INTCON 0
SEMICN ;
IDENFR tmp
ASSIGN =
IDENFR scan
LPARENT (
RPARENT )
SEMICN ;
IDENFR print
LPARENT (
IDENFR tmp
PLUS +
INTCON 10
RPARENT )
SEMICN ;
IDENFR c
ASSIGN =
IDENFR tmp
SEMICN ;
RBRACE }
IDENFR a
ASSIGN =
IDENFR scan
LPARENT (
RPARENT )
SEMICN ;
IDENFR b
ASSIGN =
IDENFR scan
LPARENT (
RPARENT )
SEMICN ;
IDENFR c
ASSIGN =
IDENFR scan
LPARENT (
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR mid
LPARENT (
IDENFR a
COMMA ,
IDENFR b
COMMA ,
IDENFR c
RPARENT )
LEQ <=
IDENFR a
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "Good!,Num is %d\n"
COMMA ,
IDENFR a
PLUS +
IDENFR mid
LPARENT (
IDENFR a
COMMA ,
IDENFR b
COMMA ,
IDENFR c
RPARENT )
DIV /
INTCON 6
MULT *
IDENFR c
MOD %
INTCON 2
MINU -
LPARENT (
IDENFR bool1
MULT *
IDENFR bool3
RPARENT )
RPARENT )
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IFTK if
LPARENT (
IDENFR mid
LPARENT (
IDENFR a
COMMA ,
IDENFR b
COMMA ,
IDENFR c
RPARENT )
LSS <
IDENFR c
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "Oh!?\n"
RPARENT )
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR factorial
LPARENT (
IDENFR mid
LPARENT (
IDENFR a
COMMA ,
IDENFR b
COMMA ,
IDENFR c
RPARENT )
MOD %
IDENFR d
RPARENT )
RPARENT )
SEMICN ;
RBRACE }
RBRACE }
IDENFR noUse
LPARENT (
IDENFR a
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR a
ASSIGN =
IDENFR max
LPARENT (
IDENFR min
LPARENT (
IDENFR p
COMMA ,
IDENFR q
RPARENT )
COMMA ,
IDENFR max
LPARENT (
IDENFR s
COMMA ,
IDENFR scan
LPARENT (
RPARENT )
RPARENT )
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR a
ASSIGN =
IDENFR max
LPARENT (
IDENFR min
LPARENT (
IDENFR p
COMMA ,
IDENFR q
RPARENT )
COMMA ,
IDENFR max
LPARENT (
IDENFR s
COMMA ,
IDENFR scan
LPARENT (
RPARENT )
RPARENT )
RPARENT )
SEMICN ;
INTTK int
IDENFR b
ASSIGN =
IDENFR min
LPARENT (
IDENFR r
COMMA ,
IDENFR scan
LPARENT (
RPARENT )
RPARENT )
COMMA ,
IDENFR c
ASSIGN =
INTCON 58
SEMICN ;
CONSTTK const
INTTK int
IDENFR d
ASSIGN =
INTCON 65535
SEMICN ;
INTTK int
IDENFR bool1
ASSIGN =
INTCON 0
COMMA ,
IDENFR bool2
ASSIGN =
INTCON 1
COMMA ,
IDENFR bool3
ASSIGN =
MINU -
INTCON 1
SEMICN ;
INTTK int
IDENFR tmp
ASSIGN =
MINU -
INTCON 10
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "19373022\n"
RPARENT )
SEMICN ;
IDENFR b
ASSIGN =
IDENFR b
PLUS +
IDENFR c
MINU -
IDENFR a
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "b:%d\n"
COMMA ,
IDENFR b
RPARENT )
SEMICN ;
SEMICN ;
LPARENT (
IDENFR bool2
PLUS +
IDENFR bool3
RPARENT )
SEMICN ;
IDENFR bool1
SEMICN ;
IFTK if
LPARENT (
NOT !
IDENFR bool1
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "Bool1 is false!\n"
RPARENT )
SEMICN ;
RBRACE }
INTCON 2147483647
SEMICN ;
LBRACE {
INTTK int
IDENFR tmp
ASSIGN =
INTCON 0
SEMICN ;
IDENFR tmp
ASSIGN =
IDENFR scan
LPARENT (
RPARENT )
SEMICN ;
IDENFR print
LPARENT (
IDENFR tmp
PLUS +
INTCON 10
RPARENT )
SEMICN ;
IDENFR c
ASSIGN =
IDENFR tmp
SEMICN ;
RBRACE }
IDENFR a
ASSIGN =
IDENFR scan
LPARENT (
RPARENT )
SEMICN ;
IDENFR b
ASSIGN =
IDENFR scan
LPARENT (
RPARENT )
SEMICN ;
IDENFR c
ASSIGN =
IDENFR scan
LPARENT (
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR mid
LPARENT (
IDENFR a
COMMA ,
IDENFR b
COMMA ,
IDENFR c
RPARENT )
LEQ <=
IDENFR a
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "Good!,Num is %d\n"
COMMA ,
IDENFR a
PLUS +
IDENFR mid
LPARENT (
IDENFR a
COMMA ,
IDENFR b
COMMA ,
IDENFR c
RPARENT )
DIV /
INTCON 6
MULT *
IDENFR c
MOD %
INTCON 2
MINU -
LPARENT (
IDENFR bool1
MULT *
IDENFR bool3
RPARENT )
RPARENT )
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IFTK if
LPARENT (
IDENFR mid
LPARENT (
IDENFR a
COMMA ,
IDENFR b
COMMA ,
IDENFR c
RPARENT )
LSS <
IDENFR c
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "Oh!?\n"
RPARENT )
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR factorial
LPARENT (
IDENFR mid
LPARENT (
IDENFR a
COMMA ,
IDENFR b
COMMA ,
IDENFR c
RPARENT )
MOD %
IDENFR d
RPARENT )
RPARENT )
SEMICN ;
RBRACE }
RBRACE }
IDENFR noUse
LPARENT (
IDENFR a
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR a
ASSIGN =
IDENFR max
LPARENT (
IDENFR min
LPARENT (
IDENFR p
COMMA ,
IDENFR q
RPARENT )
COMMA ,
IDENFR max
LPARENT (
IDENFR s
COMMA ,
IDENFR scan
LPARENT (
RPARENT )
RPARENT )
RPARENT )
SEMICN ;
INTTK int
IDENFR b
ASSIGN =
IDENFR min
LPARENT (
IDENFR r
COMMA ,
IDENFR scan
LPARENT (
RPARENT )
RPARENT )
COMMA ,
IDENFR c
ASSIGN =
INTCON 58
SEMICN ;
CONSTTK const
INTTK int
IDENFR d
ASSIGN =
INTCON 65535
SEMICN ;
INTTK int
IDENFR bool1
ASSIGN =
INTCON 0
COMMA ,
IDENFR bool2
ASSIGN =
INTCON 1
COMMA ,
IDENFR bool3
ASSIGN =
MINU -
INTCON 1
SEMICN ;
INTTK int
IDENFR tmp
ASSIGN =
MINU -
INTCON 10
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "19373022\n"
RPARENT )
SEMICN ;
IDENFR b
ASSIGN =
IDENFR b
PLUS +
IDENFR c
MINU -
IDENFR a
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "b:%d\n"
COMMA ,
IDENFR b
RPARENT )
SEMICN ;
SEMICN ;
LPARENT (
IDENFR bool2
PLUS +
IDENFR bool3
RPARENT )
SEMICN ;
IDENFR bool1
SEMICN ;
IFTK if
LPARENT (
NOT !
IDENFR bool1
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "Bool1 is false!\n"
RPARENT )
SEMICN ;
RBRACE }
INTCON 2147483647
SEMICN ;
LBRACE {
INTTK int
IDENFR tmp
ASSIGN =
INTCON 0
SEMICN ;
IDENFR tmp
ASSIGN =
IDENFR scan
LPARENT (
RPARENT )
SEMICN ;
IDENFR print
LPARENT (
IDENFR tmp
PLUS +
INTCON 10
RPARENT )
SEMICN ;
IDENFR c
ASSIGN =
IDENFR tmp
SEMICN ;
RBRACE }
IDENFR a
ASSIGN =
IDENFR scan
LPARENT (
RPARENT )
SEMICN ;
IDENFR b
ASSIGN =
IDENFR scan
LPARENT (
RPARENT )
SEMICN ;
IDENFR c
ASSIGN =
IDENFR scan
LPARENT (
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR mid
LPARENT (
IDENFR a
COMMA ,
IDENFR b
COMMA ,
IDENFR c
RPARENT )
LEQ <=
IDENFR a
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "Good!,Num is %d\n"
COMMA ,
IDENFR a
PLUS +
IDENFR mid
LPARENT (
IDENFR a
COMMA ,
IDENFR b
COMMA ,
IDENFR c
RPARENT )
DIV /
INTCON 6
MULT *
IDENFR c
MOD %
INTCON 2
MINU -
LPARENT (
IDENFR bool1
MULT *
IDENFR bool3
RPARENT )
RPARENT )
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IFTK if
LPARENT (
IDENFR mid
LPARENT (
IDENFR a
COMMA ,
IDENFR b
COMMA ,
IDENFR c
RPARENT )
LSS <
IDENFR c
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "Oh!?\n"
RPARENT )
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR factorial
LPARENT (
IDENFR mid
LPARENT (
IDENFR a
COMMA ,
IDENFR b
COMMA ,
IDENFR c
RPARENT )
MOD %
IDENFR d
RPARENT )
RPARENT )
SEMICN ;
RBRACE }
RBRACE }
IDENFR noUse
LPARENT (
IDENFR a
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR a
ASSIGN =
IDENFR max
LPARENT (
IDENFR min
LPARENT (
IDENFR p
COMMA ,
IDENFR q
RPARENT )
COMMA ,
IDENFR max
LPARENT (
IDENFR s
COMMA ,
IDENFR scan
LPARENT (
RPARENT )
RPARENT )
RPARENT )
SEMICN ;
INTTK int
IDENFR b
ASSIGN =
IDENFR min
LPARENT (
IDENFR r
COMMA ,
IDENFR scan
LPARENT (
RPARENT )
RPARENT )
COMMA ,
IDENFR c
ASSIGN =
INTCON 58
SEMICN ;
CONSTTK const
INTTK int
IDENFR d
ASSIGN =
INTCON 65535
SEMICN ;
INTTK int
IDENFR bool1
ASSIGN =
INTCON 0
COMMA ,
IDENFR bool2
ASSIGN =
INTCON 1
COMMA ,
IDENFR bool3
ASSIGN =
MINU -
INTCON 1
SEMICN ;
INTTK int
IDENFR tmp
ASSIGN =
MINU -
INTCON 10
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "19373022\n"
RPARENT )
SEMICN ;
IDENFR b
ASSIGN =
IDENFR b
PLUS +
IDENFR c
MINU -
IDENFR a
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "b:%d\n"
COMMA ,
IDENFR b
RPARENT )
SEMICN ;
SEMICN ;
LPARENT (
IDENFR bool2
PLUS +
IDENFR bool3
RPARENT )
SEMICN ;
IDENFR bool1
SEMICN ;
IFTK if
LPARENT (
NOT !
IDENFR bool1
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "Bool1 is false!\n"
RPARENT )
SEMICN ;
RBRACE }
INTCON 2147483647
SEMICN ;
LBRACE {
INTTK int
IDENFR tmp
ASSIGN =
INTCON 0
SEMICN ;
IDENFR tmp
ASSIGN =
IDENFR scan
LPARENT (
RPARENT )
SEMICN ;
IDENFR print
LPARENT (
IDENFR tmp
PLUS +
INTCON 10
RPARENT )
SEMICN ;
IDENFR c
ASSIGN =
IDENFR tmp
SEMICN ;
RBRACE }
IDENFR a
ASSIGN =
IDENFR scan
LPARENT (
RPARENT )
SEMICN ;
IDENFR b
ASSIGN =
IDENFR scan
LPARENT (
RPARENT )
SEMICN ;
IDENFR c
ASSIGN =
IDENFR scan
LPARENT (
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR mid
LPARENT (
IDENFR a
COMMA ,
IDENFR b
COMMA ,
IDENFR c
RPARENT )
LEQ <=
IDENFR a
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "Good!,Num is %d\n"
COMMA ,
IDENFR a
PLUS +
IDENFR mid
LPARENT (
IDENFR a
COMMA ,
IDENFR b
COMMA ,
IDENFR c
RPARENT )
DIV /
INTCON 6
MULT *
IDENFR c
MOD %
INTCON 2
MINU -
LPARENT (
IDENFR bool1
MULT *
IDENFR bool3
RPARENT )
RPARENT )
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IFTK if
LPARENT (
IDENFR mid
LPARENT (
IDENFR a
COMMA ,
IDENFR b
COMMA ,
IDENFR c
RPARENT )
LSS <
IDENFR c
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "Oh!?\n"
RPARENT )
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR factorial
LPARENT (
IDENFR mid
LPARENT (
IDENFR a
COMMA ,
IDENFR b
COMMA ,
IDENFR c
RPARENT )
MOD %
IDENFR d
RPARENT )
RPARENT )
SEMICN ;
RBRACE }
RBRACE }
IDENFR noUse
LPARENT (
IDENFR a
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR a
ASSIGN =
IDENFR max
LPARENT (
IDENFR min
LPARENT (
IDENFR p
COMMA ,
IDENFR q
RPARENT )
COMMA ,
IDENFR max
LPARENT (
IDENFR s
COMMA ,
IDENFR scan
LPARENT (
RPARENT )
RPARENT )
RPARENT )
SEMICN ;
INTTK int
IDENFR b
ASSIGN =
IDENFR min
LPARENT (
IDENFR r
COMMA ,
IDENFR scan
LPARENT (
RPARENT )
RPARENT )
COMMA ,
IDENFR c
ASSIGN =
INTCON 58
SEMICN ;
CONSTTK const
INTTK int
IDENFR d
ASSIGN =
INTCON 65535
SEMICN ;
INTTK int
IDENFR bool1
ASSIGN =
INTCON 0
COMMA ,
IDENFR bool2
ASSIGN =
INTCON 1
COMMA ,
IDENFR bool3
ASSIGN =
MINU -
INTCON 1
SEMICN ;
INTTK int
IDENFR tmp
ASSIGN =
MINU -
INTCON 10
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "19373022\n"
RPARENT )
SEMICN ;
IDENFR b
ASSIGN =
IDENFR b
PLUS +
IDENFR c
MINU -
IDENFR a
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "b:%d\n"
COMMA ,
IDENFR b
RPARENT )
SEMICN ;
SEMICN ;
LPARENT (
IDENFR bool2
PLUS +
IDENFR bool3
RPARENT )
SEMICN ;
IDENFR bool1
SEMICN ;
IFTK if
LPARENT (
NOT !
IDENFR bool1
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "Bool1 is false!\n"
RPARENT )
SEMICN ;
RBRACE }
INTCON 2147483647
SEMICN ;
LBRACE {
INTTK int
IDENFR tmp
ASSIGN =
INTCON 0
SEMICN ;
IDENFR tmp
ASSIGN =
IDENFR scan
LPARENT (
RPARENT )
SEMICN ;
IDENFR print
LPARENT (
IDENFR tmp
PLUS +
INTCON 10
RPARENT )
SEMICN ;
IDENFR c
ASSIGN =
IDENFR tmp
SEMICN ;
RBRACE }
IDENFR a
ASSIGN =
IDENFR scan
LPARENT (
RPARENT )
SEMICN ;
IDENFR b
ASSIGN =
IDENFR scan
LPARENT (
RPARENT )
SEMICN ;
IDENFR c
ASSIGN =
IDENFR scan
LPARENT (
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR mid
LPARENT (
IDENFR a
COMMA ,
IDENFR b
COMMA ,
IDENFR c
RPARENT )
LEQ <=
IDENFR a
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "Good!,Num is %d\n"
COMMA ,
IDENFR a
PLUS +
IDENFR mid
LPARENT (
IDENFR a
COMMA ,
IDENFR b
COMMA ,
IDENFR c
RPARENT )
DIV /
INTCON 6
MULT *
IDENFR c
MOD %
INTCON 2
MINU -
LPARENT (
IDENFR bool1
MULT *
IDENFR bool3
RPARENT )
RPARENT )
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IFTK if
LPARENT (
IDENFR mid
LPARENT (
IDENFR a
COMMA ,
IDENFR b
COMMA ,
IDENFR c
RPARENT )
LSS <
IDENFR c
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "Oh!?\n"
RPARENT )
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR factorial
LPARENT (
IDENFR mid
LPARENT (
IDENFR a
COMMA ,
IDENFR b
COMMA ,
IDENFR c
RPARENT )
MOD %
IDENFR d
RPARENT )
RPARENT )
SEMICN ;
RBRACE }
RBRACE }
IDENFR noUse
LPARENT (
IDENFR a
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR a
ASSIGN =
IDENFR max
LPARENT (
IDENFR min
LPARENT (
IDENFR p
COMMA ,
IDENFR q
RPARENT )
COMMA ,
IDENFR max
LPARENT (
IDENFR s
COMMA ,
IDENFR scan
LPARENT (
RPARENT )
RPARENT )
RPARENT )
SEMICN ;
INTTK int
IDENFR b
ASSIGN =
IDENFR min
LPARENT (
IDENFR r
COMMA ,
IDENFR scan
LPARENT (
RPARENT )
RPARENT )
COMMA ,
IDENFR c
ASSIGN =
INTCON 58
SEMICN ;
CONSTTK const
INTTK int
IDENFR d
ASSIGN =
INTCON 65535
SEMICN ;
INTTK int
IDENFR bool1
ASSIGN =
INTCON 0
COMMA ,
IDENFR bool2
ASSIGN =
INTCON 1
COMMA ,
IDENFR bool3
ASSIGN =
MINU -
INTCON 1
SEMICN ;
INTTK int
IDENFR tmp
ASSIGN =
MINU -
INTCON 10
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "19373022\n"
RPARENT )
SEMICN ;
IDENFR b
ASSIGN =
IDENFR b
PLUS +
IDENFR c
MINU -
IDENFR a
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "b:%d\n"
COMMA ,
IDENFR b
RPARENT )
SEMICN ;
SEMICN ;
LPARENT (
IDENFR bool2
PLUS +
IDENFR bool3
RPARENT )
SEMICN ;
IDENFR bool1
SEMICN ;
IFTK if
LPARENT (
NOT !
IDENFR bool1
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "Bool1 is false!\n"
RPARENT )
SEMICN ;
RBRACE }
INTCON 2147483647
SEMICN ;
LBRACE {
INTTK int
IDENFR tmp
ASSIGN =
INTCON 0
SEMICN ;
IDENFR tmp
ASSIGN =
IDENFR scan
LPARENT (
RPARENT )
SEMICN ;
IDENFR print
LPARENT (
IDENFR tmp
PLUS +
INTCON 10
RPARENT )
SEMICN ;
IDENFR c
ASSIGN =
IDENFR tmp
SEMICN ;
RBRACE }
IDENFR a
ASSIGN =
IDENFR scan
LPARENT (
RPARENT )
SEMICN ;
IDENFR b
ASSIGN =
IDENFR scan
LPARENT (
RPARENT )
SEMICN ;
IDENFR c
ASSIGN =
IDENFR scan
LPARENT (
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR mid
LPARENT (
IDENFR a
COMMA ,
IDENFR b
COMMA ,
IDENFR c
RPARENT )
LEQ <=
IDENFR a
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "Good!,Num is %d\n"
COMMA ,
IDENFR a
PLUS +
IDENFR mid
LPARENT (
IDENFR a
COMMA ,
IDENFR b
COMMA ,
IDENFR c
RPARENT )
DIV /
INTCON 6
MULT *
IDENFR c
MOD %
INTCON 2
MINU -
LPARENT (
IDENFR bool1
MULT *
IDENFR bool3
RPARENT )
RPARENT )
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IFTK if
LPARENT (
IDENFR mid
LPARENT (
IDENFR a
COMMA ,
IDENFR b
COMMA ,
IDENFR c
RPARENT )
LSS <
IDENFR c
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "Oh!?\n"
RPARENT )
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR factorial
LPARENT (
IDENFR mid
LPARENT (
IDENFR a
COMMA ,
IDENFR b
COMMA ,
IDENFR c
RPARENT )
MOD %
IDENFR d
RPARENT )
RPARENT )
SEMICN ;
RBRACE }
RBRACE }
IDENFR noUse
LPARENT (
IDENFR a
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR a
ASSIGN =
IDENFR max
LPARENT (
IDENFR min
LPARENT (
IDENFR p
COMMA ,
IDENFR q
RPARENT )
COMMA ,
IDENFR max
LPARENT (
IDENFR s
COMMA ,
IDENFR scan
LPARENT (
RPARENT )
RPARENT )
RPARENT )
SEMICN ;
INTTK int
IDENFR b
ASSIGN =
IDENFR min
LPARENT (
IDENFR r
COMMA ,
IDENFR scan
LPARENT (
RPARENT )
RPARENT )
COMMA ,
IDENFR c
ASSIGN =
INTCON 58
SEMICN ;
CONSTTK const
INTTK int
IDENFR d
ASSIGN =
INTCON 65535
SEMICN ;
INTTK int
IDENFR bool1
ASSIGN =
INTCON 0
COMMA ,
IDENFR bool2
ASSIGN =
INTCON 1
COMMA ,
IDENFR bool3
ASSIGN =
MINU -
INTCON 1
SEMICN ;
INTTK int
IDENFR tmp
ASSIGN =
MINU -
INTCON 10
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "19373022\n"
RPARENT )
SEMICN ;
IDENFR b
ASSIGN =
IDENFR b
PLUS +
IDENFR c
MINU -
IDENFR a
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "b:%d\n"
COMMA ,
IDENFR b
RPARENT )
SEMICN ;
SEMICN ;
LPARENT (
IDENFR bool2
PLUS +
IDENFR bool3
RPARENT )
SEMICN ;
IDENFR bool1
SEMICN ;
IFTK if
LPARENT (
NOT !
IDENFR bool1
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "Bool1 is false!\n"
RPARENT )
SEMICN ;
RBRACE }
INTCON 2147483647
SEMICN ;
LBRACE {
INTTK int
IDENFR tmp
ASSIGN =
INTCON 0
SEMICN ;
IDENFR tmp
ASSIGN =
IDENFR scan
LPARENT (
RPARENT )
SEMICN ;
IDENFR print
LPARENT (
IDENFR tmp
PLUS +
INTCON 10
RPARENT )
SEMICN ;
IDENFR c
ASSIGN =
IDENFR tmp
SEMICN ;
RBRACE }
IDENFR a
ASSIGN =
IDENFR scan
LPARENT (
RPARENT )
SEMICN ;
IDENFR b
ASSIGN =
IDENFR scan
LPARENT (
RPARENT )
SEMICN ;
IDENFR c
ASSIGN =
IDENFR scan
LPARENT (
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR mid
LPARENT (
IDENFR a
COMMA ,
IDENFR b
COMMA ,
IDENFR c
RPARENT )
LEQ <=
IDENFR a
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "Good!,Num is %d\n"
COMMA ,
IDENFR a
PLUS +
IDENFR mid
LPARENT (
IDENFR a
COMMA ,
IDENFR b
COMMA ,
IDENFR c
RPARENT )
DIV /
INTCON 6
MULT *
IDENFR c
MOD %
INTCON 2
MINU -
LPARENT (
IDENFR bool1
MULT *
IDENFR bool3
RPARENT )
RPARENT )
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IFTK if
LPARENT (
IDENFR mid
LPARENT (
IDENFR a
COMMA ,
IDENFR b
COMMA ,
IDENFR c
RPARENT )
LSS <
IDENFR c
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "Oh!?\n"
RPARENT )
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR factorial
LPARENT (
IDENFR mid
LPARENT (
IDENFR a
COMMA ,
IDENFR b
COMMA ,
IDENFR c
RPARENT )
MOD %
IDENFR d
RPARENT )
RPARENT )
SEMICN ;
RBRACE }
RBRACE }
IDENFR noUse
LPARENT (
IDENFR a
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR b
ASSIGN =
IDENFR min
LPARENT (
IDENFR r
COMMA ,
IDENFR scan
LPARENT (
RPARENT )
RPARENT )
COMMA ,
IDENFR c
ASSIGN =
INTCON 58
SEMICN ;
CONSTTK const
INTTK int
IDENFR d
ASSIGN =
INTCON 65535
SEMICN ;
INTTK int
IDENFR bool1
ASSIGN =
INTCON 0
COMMA ,
IDENFR bool2
ASSIGN =
INTCON 1
COMMA ,
IDENFR bool3
ASSIGN =
MINU -
INTCON 1
SEMICN ;
INTTK int
IDENFR tmp
ASSIGN =
MINU -
INTCON 10
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "19373022\n"
RPARENT )
SEMICN ;
IDENFR b
ASSIGN =
IDENFR b
PLUS +
IDENFR c
MINU -
IDENFR a
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "b:%d\n"
COMMA ,
IDENFR b
RPARENT )
SEMICN ;
SEMICN ;
LPARENT (
IDENFR bool2
PLUS +
IDENFR bool3
RPARENT )
SEMICN ;
IDENFR bool1
SEMICN ;
IFTK if
LPARENT (
NOT !
IDENFR bool1
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "Bool1 is false!\n"
RPARENT )
SEMICN ;
RBRACE }
INTCON 2147483647
SEMICN ;
LBRACE {
INTTK int
IDENFR tmp
ASSIGN =
INTCON 0
SEMICN ;
IDENFR tmp
ASSIGN =
IDENFR scan
LPARENT (
RPARENT )
SEMICN ;
IDENFR print
LPARENT (
IDENFR tmp
PLUS +
INTCON 10
RPARENT )
SEMICN ;
IDENFR c
ASSIGN =
IDENFR tmp
SEMICN ;
RBRACE }
IDENFR a
ASSIGN =
IDENFR scan
LPARENT (
RPARENT )
SEMICN ;
IDENFR b
ASSIGN =
IDENFR scan
LPARENT (
RPARENT )
SEMICN ;
IDENFR c
ASSIGN =
IDENFR scan
LPARENT (
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR mid
LPARENT (
IDENFR a
COMMA ,
IDENFR b
COMMA ,
IDENFR c
RPARENT )
LEQ <=
IDENFR a
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "Good!,Num is %d\n"
COMMA ,
IDENFR a
PLUS +
IDENFR mid
LPARENT (
IDENFR a
COMMA ,
IDENFR b
COMMA ,
IDENFR c
RPARENT )
DIV /
INTCON 6
MULT *
IDENFR c
MOD %
INTCON 2
MINU -
LPARENT (
IDENFR bool1
MULT *
IDENFR bool3
RPARENT )
RPARENT )
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IFTK if
LPARENT (
IDENFR mid
LPARENT (
IDENFR a
COMMA ,
IDENFR b
COMMA ,
IDENFR c
RPARENT )
LSS <
IDENFR c
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "Oh!?\n"
RPARENT )
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR factorial
LPARENT (
IDENFR mid
LPARENT (
IDENFR a
COMMA ,
IDENFR b
COMMA ,
IDENFR c
RPARENT )
MOD %
IDENFR d
RPARENT )
RPARENT )
SEMICN ;
RBRACE }
RBRACE }
IDENFR noUse
LPARENT (
IDENFR a
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR b
ASSIGN =
IDENFR min
LPARENT (
IDENFR r
COMMA ,
IDENFR scan
LPARENT (
RPARENT )
RPARENT )
COMMA ,
IDENFR c
ASSIGN =
INTCON 58
SEMICN ;
CONSTTK const
INTTK int
IDENFR d
ASSIGN =
INTCON 65535
SEMICN ;
INTTK int
IDENFR bool1
ASSIGN =
INTCON 0
COMMA ,
IDENFR bool2
ASSIGN =
INTCON 1
COMMA ,
IDENFR bool3
ASSIGN =
MINU -
INTCON 1
SEMICN ;
INTTK int
IDENFR tmp
ASSIGN =
MINU -
INTCON 10
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "19373022\n"
RPARENT )
SEMICN ;
IDENFR b
ASSIGN =
IDENFR b
PLUS +
IDENFR c
MINU -
IDENFR a
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "b:%d\n"
COMMA ,
IDENFR b
RPARENT )
SEMICN ;
SEMICN ;
LPARENT (
IDENFR bool2
PLUS +
IDENFR bool3
RPARENT )
SEMICN ;
IDENFR bool1
SEMICN ;
IFTK if
LPARENT (
NOT !
IDENFR bool1
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "Bool1 is false!\n"
RPARENT )
SEMICN ;
RBRACE }
INTCON 2147483647
SEMICN ;
LBRACE {
INTTK int
IDENFR tmp
ASSIGN =
INTCON 0
SEMICN ;
IDENFR tmp
ASSIGN =
IDENFR scan
LPARENT (
RPARENT )
SEMICN ;
IDENFR print
LPARENT (
IDENFR tmp
PLUS +
INTCON 10
RPARENT )
SEMICN ;
IDENFR c
ASSIGN =
IDENFR tmp
SEMICN ;
RBRACE }
IDENFR a
ASSIGN =
IDENFR scan
LPARENT (
RPARENT )
SEMICN ;
IDENFR b
ASSIGN =
IDENFR scan
LPARENT (
RPARENT )
SEMICN ;
IDENFR c
ASSIGN =
IDENFR scan
LPARENT (
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR mid
LPARENT (
IDENFR a
COMMA ,
IDENFR b
COMMA ,
IDENFR c
RPARENT )
LEQ <=
IDENFR a
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "Good!,Num is %d\n"
COMMA ,
IDENFR a
PLUS +
IDENFR mid
LPARENT (
IDENFR a
COMMA ,
IDENFR b
COMMA ,
IDENFR c
RPARENT )
DIV /
INTCON 6
MULT *
IDENFR c
MOD %
INTCON 2
MINU -
LPARENT (
IDENFR bool1
MULT *
IDENFR bool3
RPARENT )
RPARENT )
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IFTK if
LPARENT (
IDENFR mid
LPARENT (
IDENFR a
COMMA ,
IDENFR b
COMMA ,
IDENFR c
RPARENT )
LSS <
IDENFR c
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "Oh!?\n"
RPARENT )
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR factorial
LPARENT (
IDENFR mid
LPARENT (
IDENFR a
COMMA ,
IDENFR b
COMMA ,
IDENFR c
RPARENT )
MOD %
IDENFR d
RPARENT )
RPARENT )
SEMICN ;
RBRACE }
RBRACE }
IDENFR noUse
LPARENT (
IDENFR a
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR b
ASSIGN =
IDENFR min
LPARENT (
IDENFR r
COMMA ,
IDENFR scan
LPARENT (
RPARENT )
RPARENT )
COMMA ,
IDENFR c
ASSIGN =
INTCON 58
SEMICN ;
CONSTTK const
INTTK int
IDENFR d
ASSIGN =
INTCON 65535
SEMICN ;
INTTK int
IDENFR bool1
ASSIGN =
INTCON 0
COMMA ,
IDENFR bool2
ASSIGN =
INTCON 1
COMMA ,
IDENFR bool3
ASSIGN =
MINU -
INTCON 1
SEMICN ;
INTTK int
IDENFR tmp
ASSIGN =
MINU -
INTCON 10
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "19373022\n"
RPARENT )
SEMICN ;
IDENFR b
ASSIGN =
IDENFR b
PLUS +
IDENFR c
MINU -
IDENFR a
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "b:%d\n"
COMMA ,
IDENFR b
RPARENT )
SEMICN ;
SEMICN ;
LPARENT (
IDENFR bool2
PLUS +
IDENFR bool3
RPARENT )
SEMICN ;
IDENFR bool1
SEMICN ;
IFTK if
LPARENT (
NOT !
IDENFR bool1
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "Bool1 is false!\n"
RPARENT )
SEMICN ;
RBRACE }
INTCON 2147483647
SEMICN ;
LBRACE {
INTTK int
IDENFR tmp
ASSIGN =
INTCON 0
SEMICN ;
IDENFR tmp
ASSIGN =
IDENFR scan
LPARENT (
RPARENT )
SEMICN ;
IDENFR print
LPARENT (
IDENFR tmp
PLUS +
INTCON 10
RPARENT )
SEMICN ;
IDENFR c
ASSIGN =
IDENFR tmp
SEMICN ;
RBRACE }
IDENFR a
ASSIGN =
IDENFR scan
LPARENT (
RPARENT )
SEMICN ;
IDENFR b
ASSIGN =
IDENFR scan
LPARENT (
RPARENT )
SEMICN ;
IDENFR c
ASSIGN =
IDENFR scan
LPARENT (
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR mid
LPARENT (
IDENFR a
COMMA ,
IDENFR b
COMMA ,
IDENFR c
RPARENT )
LEQ <=
IDENFR a
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "Good!,Num is %d\n"
COMMA ,
IDENFR a
PLUS +
IDENFR mid
LPARENT (
IDENFR a
COMMA ,
IDENFR b
COMMA ,
IDENFR c
RPARENT )
DIV /
INTCON 6
MULT *
IDENFR c
MOD %
INTCON 2
MINU -
LPARENT (
IDENFR bool1
MULT *
IDENFR bool3
RPARENT )
RPARENT )
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IFTK if
LPARENT (
IDENFR mid
LPARENT (
IDENFR a
COMMA ,
IDENFR b
COMMA ,
IDENFR c
RPARENT )
LSS <
IDENFR c
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "Oh!?\n"
RPARENT )
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR factorial
LPARENT (
IDENFR mid
LPARENT (
IDENFR a
COMMA ,
IDENFR b
COMMA ,
IDENFR c
RPARENT )
MOD %
IDENFR d
RPARENT )
RPARENT )
SEMICN ;
RBRACE }
RBRACE }
IDENFR noUse
LPARENT (
IDENFR a
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR b
ASSIGN =
IDENFR min
LPARENT (
IDENFR r
COMMA ,
IDENFR scan
LPARENT (
RPARENT )
RPARENT )
COMMA ,
IDENFR c
ASSIGN =
INTCON 58
SEMICN ;
CONSTTK const
INTTK int
IDENFR d
ASSIGN =
INTCON 65535
SEMICN ;
INTTK int
IDENFR bool1
ASSIGN =
INTCON 0
COMMA ,
IDENFR bool2
ASSIGN =
INTCON 1
COMMA ,
IDENFR bool3
ASSIGN =
MINU -
INTCON 1
SEMICN ;
INTTK int
IDENFR tmp
ASSIGN =
MINU -
INTCON 10
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "19373022\n"
RPARENT )
SEMICN ;
IDENFR b
ASSIGN =
IDENFR b
PLUS +
IDENFR c
MINU -
IDENFR a
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "b:%d\n"
COMMA ,
IDENFR b
RPARENT )
SEMICN ;
SEMICN ;
LPARENT (
IDENFR bool2
PLUS +
IDENFR bool3
RPARENT )
SEMICN ;
IDENFR bool1
SEMICN ;
IFTK if
LPARENT (
NOT !
IDENFR bool1
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "Bool1 is false!\n"
RPARENT )
SEMICN ;
RBRACE }
INTCON 2147483647
SEMICN ;
LBRACE {
INTTK int
IDENFR tmp
ASSIGN =
INTCON 0
SEMICN ;
IDENFR tmp
ASSIGN =
IDENFR scan
LPARENT (
RPARENT )
SEMICN ;
IDENFR print
LPARENT (
IDENFR tmp
PLUS +
INTCON 10
RPARENT )
SEMICN ;
IDENFR c
ASSIGN =
IDENFR tmp
SEMICN ;
RBRACE }
IDENFR a
ASSIGN =
IDENFR scan
LPARENT (
RPARENT )
SEMICN ;
IDENFR b
ASSIGN =
IDENFR scan
LPARENT (
RPARENT )
SEMICN ;
IDENFR c
ASSIGN =
IDENFR scan
LPARENT (
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR mid
LPARENT (
IDENFR a
COMMA ,
IDENFR b
COMMA ,
IDENFR c
RPARENT )
LEQ <=
IDENFR a
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "Good!,Num is %d\n"
COMMA ,
IDENFR a
PLUS +
IDENFR mid
LPARENT (
IDENFR a
COMMA ,
IDENFR b
COMMA ,
IDENFR c
RPARENT )
DIV /
INTCON 6
MULT *
IDENFR c
MOD %
INTCON 2
MINU -
LPARENT (
IDENFR bool1
MULT *
IDENFR bool3
RPARENT )
RPARENT )
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IFTK if
LPARENT (
IDENFR mid
LPARENT (
IDENFR a
COMMA ,
IDENFR b
COMMA ,
IDENFR c
RPARENT )
LSS <
IDENFR c
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "Oh!?\n"
RPARENT )
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR factorial
LPARENT (
IDENFR mid
LPARENT (
IDENFR a
COMMA ,
IDENFR b
COMMA ,
IDENFR c
RPARENT )
MOD %
IDENFR d
RPARENT )
RPARENT )
SEMICN ;
RBRACE }
RBRACE }
IDENFR noUse
LPARENT (
IDENFR a
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR b
ASSIGN =
IDENFR min
LPARENT (
IDENFR r
COMMA ,
IDENFR scan
LPARENT (
RPARENT )
RPARENT )
COMMA ,
IDENFR c
ASSIGN =
INTCON 58
SEMICN ;
CONSTTK const
INTTK int
IDENFR d
ASSIGN =
INTCON 65535
SEMICN ;
INTTK int
IDENFR bool1
ASSIGN =
INTCON 0
COMMA ,
IDENFR bool2
ASSIGN =
INTCON 1
COMMA ,
IDENFR bool3
ASSIGN =
MINU -
INTCON 1
SEMICN ;
INTTK int
IDENFR tmp
ASSIGN =
MINU -
INTCON 10
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "19373022\n"
RPARENT )
SEMICN ;
IDENFR b
ASSIGN =
IDENFR b
PLUS +
IDENFR c
MINU -
IDENFR a
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "b:%d\n"
COMMA ,
IDENFR b
RPARENT )
SEMICN ;
SEMICN ;
LPARENT (
IDENFR bool2
PLUS +
IDENFR bool3
RPARENT )
SEMICN ;
IDENFR bool1
SEMICN ;
IFTK if
LPARENT (
NOT !
IDENFR bool1
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "Bool1 is false!\n"
RPARENT )
SEMICN ;
RBRACE }
INTCON 2147483647
SEMICN ;
LBRACE {
INTTK int
IDENFR tmp
ASSIGN =
INTCON 0
SEMICN ;
IDENFR tmp
ASSIGN =
IDENFR scan
LPARENT (
RPARENT )
SEMICN ;
IDENFR print
LPARENT (
IDENFR tmp
PLUS +
INTCON 10
RPARENT )
SEMICN ;
IDENFR c
ASSIGN =
IDENFR tmp
SEMICN ;
RBRACE }
IDENFR a
ASSIGN =
IDENFR scan
LPARENT (
RPARENT )
SEMICN ;
IDENFR b
ASSIGN =
IDENFR scan
LPARENT (
RPARENT )
SEMICN ;
IDENFR c
ASSIGN =
IDENFR scan
LPARENT (
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR mid
LPARENT (
IDENFR a
COMMA ,
IDENFR b
COMMA ,
IDENFR c
RPARENT )
LEQ <=
IDENFR a
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "Good!,Num is %d\n"
COMMA ,
IDENFR a
PLUS +
IDENFR mid
LPARENT (
IDENFR a
COMMA ,
IDENFR b
COMMA ,
IDENFR c
RPARENT )
DIV /
INTCON 6
MULT *
IDENFR c
MOD %
INTCON 2
MINU -
LPARENT (
IDENFR bool1
MULT *
IDENFR bool3
RPARENT )
RPARENT )
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IFTK if
LPARENT (
IDENFR mid
LPARENT (
IDENFR a
COMMA ,
IDENFR b
COMMA ,
IDENFR c
RPARENT )
LSS <
IDENFR c
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "Oh!?\n"
RPARENT )
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR factorial
LPARENT (
IDENFR mid
LPARENT (
IDENFR a
COMMA ,
IDENFR b
COMMA ,
IDENFR c
RPARENT )
MOD %
IDENFR d
RPARENT )
RPARENT )
SEMICN ;
RBRACE }
RBRACE }
IDENFR noUse
LPARENT (
IDENFR a
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR __fact
LPARENT (
INTTK int
IDENFR x
COMMA ,
INTTK int
IDENFR r
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR x
LEQ <=
INTCON 1
RPARENT )
RETURNTK return
IDENFR r
SEMICN ;
ELSETK else
RETURNTK return
IDENFR __fact
LPARENT (
IDENFR x
MINU -
INTCON 1
COMMA ,
LPARENT (
IDENFR r
MULT *
IDENFR x
RPARENT )
MOD %
INTCON 19260817
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR fact
LPARENT (
INTTK int
IDENFR x
RPARENT )
LBRACE {
RETURNTK return
IDENFR __fact
LPARENT (
IDENFR x
COMMA ,
INTCON 1
RPARENT )
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR x
SEMICN ;
IDENFR x
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "fact[%d] = %d\n"
COMMA ,
IDENFR x
COMMA ,
IDENFR fact
LPARENT (
IDENFR x
RPARENT )
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "fact[1] = %d\n"
COMMA ,
IDENFR fact
LPARENT (
INTCON 1
RPARENT )
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "fact[2] = %d\n"
COMMA ,
IDENFR fact
LPARENT (
INTCON 2
RPARENT )
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "fact[3] = %d\n"
COMMA ,
IDENFR fact
LPARENT (
INTCON 3
RPARENT )
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "fact[4] = %d\n"
COMMA ,
IDENFR fact
LPARENT (
INTCON 4
RPARENT )
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "fact[5] = %d\n"
COMMA ,
IDENFR fact
LPARENT (
INTCON 5
RPARENT )
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "fact[6] = %d\n"
COMMA ,
IDENFR fact
LPARENT (
INTCON 6
RPARENT )
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "fact[7] = %d\n"
COMMA ,
IDENFR fact
LPARENT (
INTCON 7
RPARENT )
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "fact[8] = %d\n"
COMMA ,
IDENFR fact
LPARENT (
INTCON 8
RPARENT )
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "fact[%d] = %d\n"
COMMA ,
IDENFR x
COMMA ,
IDENFR fact
LPARENT (
IDENFR x
RPARENT )
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "fact[%d] = %d\n"
COMMA ,
IDENFR x
COMMA ,
IDENFR fact
LPARENT (
IDENFR x
RPARENT )
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "fact[1] = %d\n"
COMMA ,
IDENFR fact
LPARENT (
INTCON 1
RPARENT )
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "fact[2] = %d\n"
COMMA ,
IDENFR fact
LPARENT (
INTCON 2
RPARENT )
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "fact[3] = %d\n"
COMMA ,
IDENFR fact
LPARENT (
INTCON 3
RPARENT )
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "fact[4] = %d\n"
COMMA ,
IDENFR fact
LPARENT (
INTCON 4
RPARENT )
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "fact[5] = %d\n"
COMMA ,
IDENFR fact
LPARENT (
INTCON 5
RPARENT )
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "fact[6] = %d\n"
COMMA ,
IDENFR fact
LPARENT (
INTCON 6
RPARENT )
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "fact[7] = %d\n"
COMMA ,
IDENFR fact
LPARENT (
INTCON 7
RPARENT )
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "fact[8] = %d\n"
COMMA ,
IDENFR fact
LPARENT (
INTCON 8
RPARENT )
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "fact[1] = %d\n"
COMMA ,
IDENFR fact
LPARENT (
INTCON 1
RPARENT )
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "fact[1] = %d\n"
COMMA ,
IDENFR fact
LPARENT (
INTCON 1
RPARENT )
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "fact[1] = %d\n"
COMMA ,
IDENFR fact
LPARENT (
INTCON 1
RPARENT )
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "fact[1] = %d\n"
COMMA ,
IDENFR fact
LPARENT (
INTCON 1
RPARENT )
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "fact[1] = %d\n"
COMMA ,
IDENFR fact
LPARENT (
INTCON 1
RPARENT )
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "fact[1] = %d\n"
COMMA ,
IDENFR fact
LPARENT (
INTCON 1
RPARENT )
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "fact[1] = %d\n"
COMMA ,
IDENFR fact
LPARENT (
INTCON 1
RPARENT )
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "fact[1] = %d\n"
COMMA ,
IDENFR fact
LPARENT (
INTCON 1
RPARENT )
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "fact[1] = %d\n"
COMMA ,
IDENFR fact
LPARENT (
INTCON 1
RPARENT )
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "fact[1] = %d\n"
COMMA ,
IDENFR fact
LPARENT (
INTCON 1
RPARENT )
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "fact[1] = %d\n"
COMMA ,
IDENFR fact
LPARENT (
INTCON 1
RPARENT )
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "fact[1] = %d\n"
COMMA ,
IDENFR fact
LPARENT (
INTCON 1
RPARENT )
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "fact[1] = %d\n"
COMMA ,
IDENFR fact
LPARENT (
INTCON 1
RPARENT )
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "fact[1] = %d\n"
COMMA ,
IDENFR fact
LPARENT (
INTCON 1
RPARENT )
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR a
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
LBRACE {
RBRACE }
SEMICN ;
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
RBRACE }
INTTK int
IDENFR a
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
LBRACE {
RBRACE }
SEMICN ;
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
RBRACE }
CONSTTK const
INTTK int
IDENFR MAXINT
ASSIGN =
INTCON 2147483647
SEMICN ;
INTTK int
IDENFR MININT
ASSIGN =
MINU -
INTCON 2147483648
SEMICN ;
CONSTTK const
CHARTK char
IDENFR MAXCHAR
ASSIGN =
CHRCON '~'
SEMICN ;
CHARTK char
IDENFR MINCHAR
ASSIGN =
CHRCON ' '
SEMICN ;
CONSTTK const
INTTK int
IDENFR ZERO
ASSIGN =
INTCON 0
COMMA ,
IDENFR ONE
ASSIGN =
INTCON 1
COMMA ,
IDENFR TWO
ASSIGN =
INTCON 2
COMMA ,
IDENFR THREE
ASSIGN =
INTCON 3
COMMA ,
IDENFR FOUR
ASSIGN =
INTCON 4
SEMICN ;
CONSTTK const
INTTK int
IDENFR FIVE
ASSIGN =
INTCON 5
SEMICN ;
CONSTTK const
INTTK int
IDENFR SIX
ASSIGN =
INTCON 6
COMMA ,
IDENFR SEVEN
ASSIGN =
INTCON 7
COMMA ,
IDENFR EIGHT
ASSIGN =
INTCON 8
COMMA ,
IDENFR NINE
ASSIGN =
INTCON 8
PLUS +
INTCON 1
COMMA ,
IDENFR TEN
ASSIGN =
INTCON 10
SEMICN ;
CONSTTK const
INTTK int
IDENFR ZERO_TO_TEN
LBRACK [
INTCON 11
RBRACK ]
ASSIGN =
LBRACE {
INTCON 0
COMMA ,
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
COMMA ,
INTCON 4
COMMA ,
INTCON 5
COMMA ,
INTCON 6
COMMA ,
INTCON 7
COMMA ,
INTCON 8
COMMA ,
INTCON 9
COMMA ,
INTCON 10
RBRACE }
SEMICN ;
CONSTTK const
INTTK int
IDENFR NO_USE1
LBRACK [
INTCON 11
RBRACK ]
ASSIGN =
LBRACE {
RBRACE }
SEMICN ;
CONSTTK const
INTTK int
IDENFR NO_USE2
LBRACK [
INTCON 11
RBRACK ]
ASSIGN =
LBRACE {
INTCON 0
COMMA ,
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
RBRACE }
SEMICN ;
CONSTTK const
CHARTK char
IDENFR A
ASSIGN =
CHRCON 'A'
COMMA ,
IDENFR B
ASSIGN =
CHRCON 'B'
COMMA ,
IDENFR C
ASSIGN =
CHRCON 'C'
COMMA ,
IDENFR D
ASSIGN =
CHRCON 'D'
COMMA ,
IDENFR E
ASSIGN =
CHRCON 'E'
SEMICN ;
CONSTTK const
CHARTK char
IDENFR F
ASSIGN =
CHRCON 'F'
SEMICN ;
CONSTTK const
CHARTK char
IDENFR G
ASSIGN =
CHRCON 'G'
COMMA ,
IDENFR H
ASSIGN =
CHRCON 'H'
COMMA ,
IDENFR I
ASSIGN =
CHRCON 'I'
COMMA ,
IDENFR J
ASSIGN =
CHRCON 'J'
SEMICN ;
CONSTTK const
CHARTK char
IDENFR ABCDEFGHIJ
LBRACK [
INTCON 11
RBRACK ]
ASSIGN =
LBRACE {
CHRCON 'A'
COMMA ,
CHRCON 'B'
COMMA ,
CHRCON 'C'
COMMA ,
CHRCON 'D'
COMMA ,
CHRCON 'E'
COMMA ,
CHRCON 'F'
COMMA ,
CHRCON 'G'
COMMA ,
CHRCON 'H'
COMMA ,
CHRCON 'I'
COMMA ,
CHRCON 'J'
RBRACE }
SEMICN ;
CONSTTK const
CHARTK char
IDENFR NO_USE3
LBRACK [
INTCON 11
RBRACK ]
ASSIGN =
LBRACE {
RBRACE }
SEMICN ;
CONSTTK const
CHARTK char
IDENFR NO_USE4
LBRACK [
INTCON 11
RBRACK ]
ASSIGN =
STRCON "NO_USE4"
SEMICN ;
INTTK int
IDENFR fibonacci
LBRACK [
INTCON 15
RBRACK ]
SEMICN ;
VOIDTK void
IDENFR cal_fibonacci
LPARENT (
RPARENT )
LBRACE {
IDENFR fibonacci
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
INTCON 1
SEMICN ;
INTTK int
IDENFR i
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 2
SEMICN ;
IDENFR i
LSS <
INTCON 15
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IDENFR fibonacci
LBRACK [
IDENFR i
RBRACK ]
ASSIGN =
IDENFR fibonacci
LBRACK [
IDENFR i
MINU -
INTCON 1
RBRACK ]
PLUS +
IDENFR fibonacci
LBRACK [
IDENFR i
MINU -
INTCON 2
RBRACK ]
SEMICN ;
RBRACE }
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR print_fibonacci_n
LPARENT (
INTTK int
IDENFR n1
COMMA ,
INTTK int
IDENFR n2
COMMA ,
INTTK int
IDENFR n3
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "Fibonacci Array %d : %d  %d : %d  %d : %d\n"
COMMA ,
IDENFR n1
COMMA ,
IDENFR fibonacci
LBRACK [
IDENFR n1
RBRACK ]
COMMA ,
IDENFR n2
COMMA ,
IDENFR fibonacci
LBRACK [
IDENFR n2
RBRACK ]
COMMA ,
IDENFR n3
COMMA ,
IDENFR fibonacci
LBRACK [
IDENFR n3
RBRACK ]
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
LBRACE {
RBRACE }
LBRACE {
SEMICN ;
SEMICN ;
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "22371298\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR n1
SEMICN ;
IDENFR n1
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
INTTK int
IDENFR n2
SEMICN ;
IDENFR n2
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
INTTK int
IDENFR n3
SEMICN ;
IDENFR n3
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR cal_fibonacci
LPARENT (
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR n1
GRE >
INTCON 14
OR ||
IDENFR n2
GRE >
INTCON 14
OR ||
IDENFR n3
GRE >
INTCON 14
RPARENT )
LBRACE {
RBRACE }
ELSETK else
LBRACE {
IDENFR print_fibonacci_n
LPARENT (
IDENFR n1
COMMA ,
IDENFR n2
COMMA ,
IDENFR n3
RPARENT )
SEMICN ;
RBRACE }
INTTK int
IDENFR max
SEMICN ;
IDENFR max
ASSIGN =
IDENFR MAXINT
SEMICN ;
INTTK int
IDENFR ten
SEMICN ;
IDENFR ten
ASSIGN =
IDENFR ZERO_TO_TEN
LBRACK [
IDENFR TEN
RBRACK ]
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
IDENFR i
LSS <
INTCON 2
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR i
RPARENT )
SEMICN ;
RBRACE }
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 2
SEMICN ;
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 5
OR ||
IDENFR i
LEQ <=
INTCON 6
OR ||
IDENFR i
GEQ >=
INTCON 90
OR ||
IDENFR i
EQL ==
INTCON 100
OR ||
IDENFR i
NEQ !=
INTCON 80
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
RBRACE }
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 2
SEMICN ;
IDENFR i
LEQ <=
INTCON 5
SEMICN ;
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
NEQ !=
INTCON 90
RPARENT )
BREAKTK break
SEMICN ;
RBRACE }
IDENFR i
ASSIGN =
INTCON 100
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
GRE >
INTCON 10
RPARENT )
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
IDENFR i
GRE >
INTCON 50
SEMICN ;
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
GRE >
INTCON 80
AND &&
IDENFR i
LSS <
INTCON 120
OR ||
IDENFR i
EQL ==
INTCON 100
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
CONTINUETK continue
SEMICN ;
RBRACE }
RBRACE }
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 100
SEMICN ;
SEMICN ;
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 100
RPARENT )
BREAKTK break
SEMICN ;
ELSETK else
CONTINUETK continue
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
SEMICN ;
RPARENT )
LBRACE {
IFTK if
LPARENT (
INTCON 1
NEQ !=
INTCON 0
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
RBRACE }
CHARTK char
IDENFR read
SEMICN ;
IDENFR read
ASSIGN =
GETCHARTK getchar
LPARENT (
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "a\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "a\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "a\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "a\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "a\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "a\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "a\n"
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
CONSTTK const
INTTK int
IDENFR MAXINT
ASSIGN =
INTCON 2147483647
SEMICN ;
INTTK int
IDENFR MININT
ASSIGN =
MINU -
INTCON 2147483648
SEMICN ;
CONSTTK const
CHARTK char
IDENFR MAXCHAR
ASSIGN =
CHRCON '~'
SEMICN ;
CHARTK char
IDENFR MINCHAR
ASSIGN =
CHRCON ' '
SEMICN ;
CONSTTK const
INTTK int
IDENFR ZERO
ASSIGN =
INTCON 0
COMMA ,
IDENFR ONE
ASSIGN =
INTCON 1
COMMA ,
IDENFR TWO
ASSIGN =
INTCON 2
COMMA ,
IDENFR THREE
ASSIGN =
INTCON 3
COMMA ,
IDENFR FOUR
ASSIGN =
INTCON 4
SEMICN ;
CONSTTK const
INTTK int
IDENFR FIVE
ASSIGN =
INTCON 5
SEMICN ;
CONSTTK const
INTTK int
IDENFR SIX
ASSIGN =
INTCON 6
COMMA ,
IDENFR SEVEN
ASSIGN =
INTCON 7
COMMA ,
IDENFR EIGHT
ASSIGN =
INTCON 8
COMMA ,
IDENFR NINE
ASSIGN =
INTCON 8
PLUS +
INTCON 1
COMMA ,
IDENFR TEN
ASSIGN =
INTCON 10
SEMICN ;
CONSTTK const
INTTK int
IDENFR ZERO_TO_TEN
LBRACK [
INTCON 11
RBRACK ]
ASSIGN =
LBRACE {
INTCON 0
COMMA ,
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
COMMA ,
INTCON 4
COMMA ,
INTCON 5
COMMA ,
INTCON 6
COMMA ,
INTCON 7
COMMA ,
INTCON 8
COMMA ,
INTCON 9
COMMA ,
INTCON 10
RBRACE }
SEMICN ;
CONSTTK const
INTTK int
IDENFR NO_USE1
LBRACK [
INTCON 11
RBRACK ]
ASSIGN =
LBRACE {
RBRACE }
SEMICN ;
CONSTTK const
INTTK int
IDENFR NO_USE2
LBRACK [
INTCON 11
RBRACK ]
ASSIGN =
LBRACE {
INTCON 0
COMMA ,
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
RBRACE }
SEMICN ;
CONSTTK const
CHARTK char
IDENFR A
ASSIGN =
CHRCON 'A'
COMMA ,
IDENFR B
ASSIGN =
CHRCON 'B'
COMMA ,
IDENFR C
ASSIGN =
CHRCON 'C'
COMMA ,
IDENFR D
ASSIGN =
CHRCON 'D'
COMMA ,
IDENFR E
ASSIGN =
CHRCON 'E'
SEMICN ;
CONSTTK const
CHARTK char
IDENFR F
ASSIGN =
CHRCON 'F'
SEMICN ;
CONSTTK const
CHARTK char
IDENFR G
ASSIGN =
CHRCON 'G'
COMMA ,
IDENFR H
ASSIGN =
CHRCON 'H'
COMMA ,
IDENFR I
ASSIGN =
CHRCON 'I'
COMMA ,
IDENFR J
ASSIGN =
CHRCON 'J'
SEMICN ;
CONSTTK const
CHARTK char
IDENFR ABCDEFGHIJ
LBRACK [
INTCON 11
RBRACK ]
ASSIGN =
LBRACE {
CHRCON 'A'
COMMA ,
CHRCON 'B'
COMMA ,
CHRCON 'C'
COMMA ,
CHRCON 'D'
COMMA ,
CHRCON 'E'
COMMA ,
CHRCON 'F'
COMMA ,
CHRCON 'G'
COMMA ,
CHRCON 'H'
COMMA ,
CHRCON 'I'
COMMA ,
CHRCON 'J'
RBRACE }
SEMICN ;
CONSTTK const
CHARTK char
IDENFR NO_USE3
LBRACK [
INTCON 11
RBRACK ]
ASSIGN =
LBRACE {
RBRACE }
SEMICN ;
CONSTTK const
CHARTK char
IDENFR NO_USE4
LBRACK [
INTCON 11
RBRACK ]
ASSIGN =
STRCON "NO_USE4"
SEMICN ;
INTTK int
IDENFR fibonacci
LBRACK [
INTCON 15
RBRACK ]
SEMICN ;
VOIDTK void
IDENFR cal_fibonacci
LPARENT (
RPARENT )
LBRACE {
IDENFR fibonacci
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
INTCON 1
SEMICN ;
INTTK int
IDENFR i
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 2
SEMICN ;
IDENFR i
LSS <
INTCON 15
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IDENFR fibonacci
LBRACK [
IDENFR i
RBRACK ]
ASSIGN =
IDENFR fibonacci
LBRACK [
IDENFR i
MINU -
INTCON 1
RBRACK ]
PLUS +
IDENFR fibonacci
LBRACK [
IDENFR i
MINU -
INTCON 2
RBRACK ]
SEMICN ;
RBRACE }
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR print_fibonacci_n
LPARENT (
INTTK int
IDENFR n1
COMMA ,
INTTK int
IDENFR n2
COMMA ,
INTTK int
IDENFR n3
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "Fibonacci Array %d : %d  %d : %d  %d : %d\n"
COMMA ,
IDENFR n1
COMMA ,
IDENFR fibonacci
LBRACK [
IDENFR n1
RBRACK ]
COMMA ,
IDENFR n2
COMMA ,
IDENFR fibonacci
LBRACK [
IDENFR n2
RBRACK ]
COMMA ,
IDENFR n3
COMMA ,
IDENFR fibonacci
LBRACK [
IDENFR n3
RBRACK ]
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
LBRACE {
RBRACE }
LBRACE {
SEMICN ;
SEMICN ;
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "22371298\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR n1
SEMICN ;
IDENFR n1
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
INTTK int
IDENFR n2
SEMICN ;
IDENFR n2
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
INTTK int
IDENFR n3
SEMICN ;
IDENFR n3
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR cal_fibonacci
LPARENT (
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR n1
GRE >
INTCON 14
OR ||
IDENFR n2
GRE >
INTCON 14
OR ||
IDENFR n3
GRE >
INTCON 14
RPARENT )
LBRACE {
RBRACE }
ELSETK else
LBRACE {
IDENFR print_fibonacci_n
LPARENT (
IDENFR n1
COMMA ,
IDENFR n2
COMMA ,
IDENFR n3
RPARENT )
SEMICN ;
RBRACE }
INTTK int
IDENFR max
SEMICN ;
IDENFR max
ASSIGN =
IDENFR MAXINT
SEMICN ;
INTTK int
IDENFR ten
SEMICN ;
IDENFR ten
ASSIGN =
IDENFR ZERO_TO_TEN
LBRACK [
IDENFR TEN
RBRACK ]
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
IDENFR i
LSS <
INTCON 2
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR i
RPARENT )
SEMICN ;
RBRACE }
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 2
SEMICN ;
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 5
OR ||
IDENFR i
LEQ <=
INTCON 6
OR ||
IDENFR i
GEQ >=
INTCON 90
OR ||
IDENFR i
EQL ==
INTCON 100
OR ||
IDENFR i
NEQ !=
INTCON 80
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
RBRACE }
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 2
SEMICN ;
IDENFR i
LEQ <=
INTCON 5
SEMICN ;
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
NEQ !=
INTCON 90
RPARENT )
BREAKTK break
SEMICN ;
RBRACE }
IDENFR i
ASSIGN =
INTCON 100
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
GRE >
INTCON 10
RPARENT )
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
IDENFR i
GRE >
INTCON 50
SEMICN ;
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
GRE >
INTCON 80
AND &&
IDENFR i
LSS <
INTCON 120
OR ||
IDENFR i
EQL ==
INTCON 100
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
CONTINUETK continue
SEMICN ;
RBRACE }
RBRACE }
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 100
SEMICN ;
SEMICN ;
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 100
RPARENT )
BREAKTK break
SEMICN ;
ELSETK else
CONTINUETK continue
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
SEMICN ;
RPARENT )
LBRACE {
IFTK if
LPARENT (
INTCON 1
NEQ !=
INTCON 0
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
RBRACE }
CHARTK char
IDENFR read
SEMICN ;
IDENFR read
ASSIGN =
GETCHARTK getchar
LPARENT (
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "a\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "a\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "a\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "a\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "a\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "a\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "a\n"
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
CHARTK char
IDENFR char_b1
ASSIGN =
CHRCON 'b'
COMMA ,
IDENFR char_b2
LBRACK [
INTCON 5
RBRACK ]
ASSIGN =
LBRACE {
CHRCON 'a'
COMMA ,
CHRCON 'b'
COMMA ,
CHRCON 'c'
COMMA ,
CHRCON 'd'
COMMA ,
CHRCON 'e'
RBRACE }
COMMA ,
IDENFR char_b3
LBRACK [
INTCON 10
RBRACK ]
ASSIGN =
STRCON "world!"
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
CHARTK char
IDENFR _buf
LBRACK [
INTCON 1024
RBRACK ]
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
CHARTK char
IDENFR _buf
LBRACK [
INTCON 1024
RBRACK ]
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
CHARTK char
IDENFR _buf
LBRACK [
INTCON 1024
RBRACK ]
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
CHARTK char
IDENFR _buf
LBRACK [
INTCON 1024
RBRACK ]
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
IDENFR char_buf
LBRACK [
INTCON 1024
RBRACK ]
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
IDENFR char_buf
LBRACK [
INTCON 1024
RBRACK ]
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
IDENFR char_buf
LBRACK [
INTCON 1024
RBRACK ]
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
IDENFR char_buf
LBRACK [
INTCON 1024
RBRACK ]
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
IDENFR char_buf
LBRACK [
INTCON 1024
RBRACK ]
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "21371295\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
INTCON 0
PLUS +
INTCON 1
SEMICN ;
SEMICN ;
IFTK if
LPARENT (
IDENFR i
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR a
ASSIGN =
INTCON 1
COMMA ,
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
NOT !
IDENFR a
RPARENT )
LBRACE {
RBRACE }
ELSETK else
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR b
LEQ <=
INTCON 0
RPARENT )
LBRACE {
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
EQL ==
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
AND &&
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
OR ||
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IDENFR a
ASSIGN =
IDENFR a
PLUS +
INTCON 1
MINU -
INTCON 3
MULT *
INTCON 4
DIV /
INTCON 3
MOD %
INTCON 2
SEMICN ;
IDENFR a
ASSIGN =
INTCON 1
PLUS +
INTCON 1
SEMICN ;
IDENFR a
ASSIGN =
PLUS +
MINU -
PLUS +
INTCON 1
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "21371295\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
INTCON 0
PLUS +
INTCON 1
SEMICN ;
SEMICN ;
IFTK if
LPARENT (
IDENFR i
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR a
ASSIGN =
INTCON 1
COMMA ,
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
NOT !
IDENFR a
RPARENT )
LBRACE {
RBRACE }
ELSETK else
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR b
LEQ <=
INTCON 0
RPARENT )
LBRACE {
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
EQL ==
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
AND &&
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
OR ||
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IDENFR a
ASSIGN =
IDENFR a
PLUS +
INTCON 1
MINU -
INTCON 3
MULT *
INTCON 4
DIV /
INTCON 3
MOD %
INTCON 2
SEMICN ;
IDENFR a
ASSIGN =
INTCON 1
PLUS +
INTCON 1
SEMICN ;
IDENFR a
ASSIGN =
PLUS +
MINU -
PLUS +
INTCON 1
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "21371295\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
INTCON 0
PLUS +
INTCON 1
SEMICN ;
SEMICN ;
IFTK if
LPARENT (
IDENFR i
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR a
ASSIGN =
INTCON 1
COMMA ,
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
NOT !
IDENFR a
RPARENT )
LBRACE {
RBRACE }
ELSETK else
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR b
LEQ <=
INTCON 0
RPARENT )
LBRACE {
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
EQL ==
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
AND &&
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
OR ||
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IDENFR a
ASSIGN =
IDENFR a
PLUS +
INTCON 1
MINU -
INTCON 3
MULT *
INTCON 4
DIV /
INTCON 3
MOD %
INTCON 2
SEMICN ;
IDENFR a
ASSIGN =
INTCON 1
PLUS +
INTCON 1
SEMICN ;
IDENFR a
ASSIGN =
PLUS +
MINU -
PLUS +
INTCON 1
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "21371295\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
INTCON 0
PLUS +
INTCON 1
SEMICN ;
SEMICN ;
IFTK if
LPARENT (
IDENFR i
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR a
ASSIGN =
INTCON 1
COMMA ,
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
NOT !
IDENFR a
RPARENT )
LBRACE {
RBRACE }
ELSETK else
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR b
LEQ <=
INTCON 0
RPARENT )
LBRACE {
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
EQL ==
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
AND &&
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
OR ||
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IDENFR a
ASSIGN =
IDENFR a
PLUS +
INTCON 1
MINU -
INTCON 3
MULT *
INTCON 4
DIV /
INTCON 3
MOD %
INTCON 2
SEMICN ;
IDENFR a
ASSIGN =
INTCON 1
PLUS +
INTCON 1
SEMICN ;
IDENFR a
ASSIGN =
PLUS +
MINU -
PLUS +
INTCON 1
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
CONSTTK const
INTTK int
IDENFR const_int_a
ASSIGN =
INTCON 0
CONSTTK const
INTTK int
IDENFR const_int_b1
ASSIGN =
INTCON 1
COMMA ,
IDENFR const_int_b2
LBRACK [
INTCON 5
ASSIGN =
LBRACE {
INTCON 0
COMMA ,
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
COMMA ,
INTCON 4
RBRACE }
CONSTTK const
CHARTK char
IDENFR str
LBRACK [
INTCON 10
ASSIGN =
STRCON "hello!"
CHARTK char
IDENFR char_a
ASSIGN =
CHRCON 'a'
CHARTK char
IDENFR char_b1
ASSIGN =
CHRCON 'b'
COMMA ,
IDENFR char_b2
LBRACK [
INTCON 5
ASSIGN =
LBRACE {
CHRCON 'a'
COMMA ,
CHRCON 'b'
COMMA ,
CHRCON 'c'
COMMA ,
CHRCON 'd'
COMMA ,
CHRCON 'e'
RBRACE }
COMMA ,
IDENFR char_b3
LBRACK [
INTCON 10
ASSIGN =
STRCON "world!"
INTTK int
IDENFR int_b2
LBRACK [
INTCON 5
RBRACK ]
SEMICN ;
VOIDTK void
IDENFR print_int_arr
LPARENT (
INTTK int
IDENFR arr
LBRACK [
COMMA ,
INTTK int
IDENFR n
LBRACE {
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
IDENFR n
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "%d "
COMMA ,
IDENFR arr
LBRACK [
IDENFR i
RPARENT )
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "\n"
RPARENT )
SEMICN ;
RETURNTK return
RBRACE }
VOIDTK void
IDENFR test_stmt_for_break_continue
LPARENT (
LBRACE {
CONTINUETK continue
BREAKTK break
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_stmt_getint_getchar_printf
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
CHARTK char
IDENFR ch
ASSIGN =
CHRCON 'a'
IDENFR a
ASSIGN =
GETINTTK getint
LPARENT (
SEMICN ;
IDENFR ch
ASSIGN =
GETCHARTK getchar
LPARENT (
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "test_stmt_getint_getchar_printf"
PRINTFTK printf
LPARENT (
STRCON "%c%c%c%c%c%c%c\n"
COMMA ,
CHRCON 's'
COMMA ,
CHRCON 'u'
COMMA ,
CHRCON 'c'
COMMA ,
CHRCON 'c'
COMMA ,
CHRCON 'e'
COMMA ,
CHRCON 's'
COMMA ,
CHRCON 's'
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_block
LPARENT (
RPARENT )
LBRACE {
LBRACE {
RBRACE }
LBRACE {
RBRACE }
RETURNTK return
SEMICN ;
RBRACE }
INTTK int
IDENFR add_int
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
LBRACE {
RETURNTK return
IDENFR a
PLUS +
IDENFR b
RBRACE }
CHARTK char
IDENFR read_char
LPARENT (
CHARTK char
IDENFR ch
RPARENT )
LBRACE {
SEMICN ;
RETURNTK return
IDENFR ch
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_Lval_exp
LPARENT (
RPARENT )
LBRACE {
IDENFR const_int_a
IDENFR char_a
IDENFR char_b2
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "test_Lval_exp success!\n"
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_primary_exp
LPARENT (
RPARENT )
LBRACE {
LPARENT (
INTCON 1
RPARENT )
SEMICN ;
IDENFR char_a
SEMICN ;
INTCON 1
SEMICN ;
CHRCON 'a'
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "test_primary_exp success!\n"
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_func_int_arr
LPARENT (
INTTK int
IDENFR a
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
IDENFR a
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
IDENFR a
LBRACK [
INTCON 0
SEMICN ;
IDENFR a
LBRACK [
INTCON 0
RBRACK ]
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_func_mul_int
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
RPARENT )
LBRACE {
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_unary_exp
LPARENT (
RPARENT )
LBRACE {
INTCON 0
SEMICN ;
IDENFR test_func_int
LPARENT (
INTCON 0
RPARENT )
SEMICN ;
IDENFR test_func_int
LPARENT (
IDENFR int_b2
LBRACK [
INTCON 0
RPARENT )
SEMICN ;
IDENFR test_func_int_arr
LPARENT (
IDENFR int_b2
RPARENT )
SEMICN ;
IDENFR test_func_mul_int
LPARENT (
INTCON 0
COMMA ,
INTCON 1
RPARENT )
SEMICN ;
PLUS +
INTCON 1
MINU -
INTCON 1
SEMICN ;
IFTK if
LPARENT (
NOT !
INTCON 1
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "test_unary_exp success!\n"
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_Lexp
LPARENT (
RPARENT )
LBRACE {
INTCON 1
IFTK if
LPARENT (
INTCON 1
AND &&
INTCON 1
IFTK if
LPARENT (
INTCON 1
OR ||
INTCON 1
RPARENT )
IFTK if
LPARENT (
INTCON 1
ERROR_AND &
INTCON 1
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test
LPARENT (
RPARENT )
LBRACE {
IDENFR test_stmt_1_3
LPARENT (
IDENFR test_stmt_for_break_continue
LPARENT (
SEMICN ;
IDENFR test_stmt_getint_getchar_printf
LPARENT (
RPARENT )
RBRACE }
INTTK int
MAINTK main
LPARENT (
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "22371236\n"
RPARENT )
SEMICN ;
IDENFR test
LPARENT (
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
CONSTTK const
INTTK int
IDENFR const_int_a
ASSIGN =
INTCON 0
CONSTTK const
INTTK int
IDENFR const_int_b1
ASSIGN =
INTCON 1
COMMA ,
IDENFR const_int_b2
LBRACK [
INTCON 5
ASSIGN =
LBRACE {
INTCON 0
COMMA ,
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
COMMA ,
INTCON 4
RBRACE }
CONSTTK const
CHARTK char
IDENFR str
LBRACK [
INTCON 10
ASSIGN =
STRCON "hello!"
CHARTK char
IDENFR char_a
ASSIGN =
CHRCON 'a'
CHARTK char
IDENFR char_b1
ASSIGN =
CHRCON 'b'
COMMA ,
IDENFR char_b2
LBRACK [
INTCON 5
ASSIGN =
LBRACE {
CHRCON 'a'
COMMA ,
CHRCON 'b'
COMMA ,
CHRCON 'c'
COMMA ,
CHRCON 'd'
COMMA ,
CHRCON 'e'
RBRACE }
COMMA ,
IDENFR char_b3
LBRACK [
INTCON 10
ASSIGN =
STRCON "world!"
INTTK int
IDENFR int_b2
LBRACK [
INTCON 5
RBRACK ]
SEMICN ;
VOIDTK void
IDENFR print_int_arr
LPARENT (
INTTK int
IDENFR arr
LBRACK [
COMMA ,
INTTK int
IDENFR n
LBRACE {
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
IDENFR n
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "%d "
COMMA ,
IDENFR arr
LBRACK [
IDENFR i
RPARENT )
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "\n"
RPARENT )
SEMICN ;
RETURNTK return
RBRACE }
VOIDTK void
IDENFR test_stmt_for_break_continue
LPARENT (
LBRACE {
CONTINUETK continue
BREAKTK break
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_stmt_getint_getchar_printf
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
CHARTK char
IDENFR ch
ASSIGN =
CHRCON 'a'
IDENFR a
ASSIGN =
GETINTTK getint
LPARENT (
SEMICN ;
IDENFR ch
ASSIGN =
GETCHARTK getchar
LPARENT (
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "test_stmt_getint_getchar_printf"
PRINTFTK printf
LPARENT (
STRCON "%c%c%c%c%c%c%c\n"
COMMA ,
CHRCON 's'
COMMA ,
CHRCON 'u'
COMMA ,
CHRCON 'c'
COMMA ,
CHRCON 'c'
COMMA ,
CHRCON 'e'
COMMA ,
CHRCON 's'
COMMA ,
CHRCON 's'
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_block
LPARENT (
RPARENT )
LBRACE {
LBRACE {
RBRACE }
LBRACE {
RBRACE }
RETURNTK return
SEMICN ;
RBRACE }
INTTK int
IDENFR add_int
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
LBRACE {
RETURNTK return
IDENFR a
PLUS +
IDENFR b
RBRACE }
CHARTK char
IDENFR read_char
LPARENT (
CHARTK char
IDENFR ch
RPARENT )
LBRACE {
SEMICN ;
RETURNTK return
IDENFR ch
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_Lval_exp
LPARENT (
RPARENT )
LBRACE {
IDENFR const_int_a
IDENFR char_a
IDENFR char_b2
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "test_Lval_exp success!\n"
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_primary_exp
LPARENT (
RPARENT )
LBRACE {
LPARENT (
INTCON 1
RPARENT )
SEMICN ;
IDENFR char_a
SEMICN ;
INTCON 1
SEMICN ;
CHRCON 'a'
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "test_primary_exp success!\n"
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_func_int_arr
LPARENT (
INTTK int
IDENFR a
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
IDENFR a
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
IDENFR a
LBRACK [
INTCON 0
SEMICN ;
IDENFR a
LBRACK [
INTCON 0
RBRACK ]
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_func_mul_int
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
RPARENT )
LBRACE {
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_unary_exp
LPARENT (
RPARENT )
LBRACE {
INTCON 0
SEMICN ;
IDENFR test_func_int
LPARENT (
INTCON 0
RPARENT )
SEMICN ;
IDENFR test_func_int
LPARENT (
IDENFR int_b2
LBRACK [
INTCON 0
RPARENT )
SEMICN ;
IDENFR test_func_int_arr
LPARENT (
IDENFR int_b2
RPARENT )
SEMICN ;
IDENFR test_func_mul_int
LPARENT (
INTCON 0
COMMA ,
INTCON 1
RPARENT )
SEMICN ;
PLUS +
INTCON 1
MINU -
INTCON 1
SEMICN ;
IFTK if
LPARENT (
NOT !
INTCON 1
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "test_unary_exp success!\n"
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_Lexp
LPARENT (
RPARENT )
LBRACE {
INTCON 1
IFTK if
LPARENT (
INTCON 1
AND &&
INTCON 1
IFTK if
LPARENT (
INTCON 1
OR ||
INTCON 1
RPARENT )
IFTK if
LPARENT (
INTCON 1
ERROR_AND &
INTCON 1
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test
LPARENT (
RPARENT )
LBRACE {
IDENFR test_stmt_1_3
LPARENT (
IDENFR test_stmt_for_break_continue
LPARENT (
SEMICN ;
IDENFR test_stmt_getint_getchar_printf
LPARENT (
RPARENT )
RBRACE }
INTTK int
MAINTK main
LPARENT (
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "22371236\n"
RPARENT )
SEMICN ;
IDENFR test
LPARENT (
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
CONSTTK const
INTTK int
IDENFR const_int_a
ASSIGN =
INTCON 0
CONSTTK const
INTTK int
IDENFR const_int_a
ASSIGN =
INTCON 0
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
CONSTTK const
INTTK int
IDENFR const_int_a
ASSIGN =
INTCON 0
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
CONSTTK const
INTTK int
IDENFR const_int_a
ASSIGN =
INTCON 0
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
CONSTTK const
INTTK int
IDENFR const_int_a
ASSIGN =
INTCON 0
CONSTTK const
INTTK int
IDENFR const_int_b1
ASSIGN =
INTCON 1
COMMA ,
IDENFR const_int_b2
LBRACK [
INTCON 5
ASSIGN =
LBRACE {
INTCON 0
COMMA ,
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
COMMA ,
INTCON 4
RBRACE }
CONSTTK const
CHARTK char
IDENFR str
LBRACK [
INTCON 10
ASSIGN =
STRCON "hello!"
CHARTK char
IDENFR char_a
ASSIGN =
CHRCON 'a'
CHARTK char
IDENFR char_b1
ASSIGN =
CHRCON 'b'
COMMA ,
IDENFR char_b2
LBRACK [
INTCON 5
ASSIGN =
LBRACE {
CHRCON 'a'
COMMA ,
CHRCON 'b'
COMMA ,
CHRCON 'c'
COMMA ,
CHRCON 'd'
COMMA ,
CHRCON 'e'
RBRACE }
COMMA ,
IDENFR char_b3
LBRACK [
INTCON 10
ASSIGN =
STRCON "world!"
INTTK int
IDENFR int_b2
LBRACK [
INTCON 5
RBRACK ]
SEMICN ;
VOIDTK void
IDENFR print_int_arr
LPARENT (
INTTK int
IDENFR arr
LBRACK [
COMMA ,
INTTK int
IDENFR n
LBRACE {
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
IDENFR n
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "%d "
COMMA ,
IDENFR arr
LBRACK [
IDENFR i
RPARENT )
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "\n"
RPARENT )
SEMICN ;
RETURNTK return
RBRACE }
VOIDTK void
IDENFR test_stmt_for_break_continue
LPARENT (
LBRACE {
CONTINUETK continue
BREAKTK break
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_stmt_getint_getchar_printf
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
CHARTK char
IDENFR ch
ASSIGN =
CHRCON 'a'
IDENFR a
ASSIGN =
GETINTTK getint
LPARENT (
SEMICN ;
IDENFR ch
ASSIGN =
GETCHARTK getchar
LPARENT (
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "test_stmt_getint_getchar_printf"
PRINTFTK printf
LPARENT (
STRCON "%c%c%c%c%c%c%c\n"
COMMA ,
CHRCON 's'
COMMA ,
CHRCON 'u'
COMMA ,
CHRCON 'c'
COMMA ,
CHRCON 'c'
COMMA ,
CHRCON 'e'
COMMA ,
CHRCON 's'
COMMA ,
CHRCON 's'
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_block
LPARENT (
RPARENT )
LBRACE {
LBRACE {
RBRACE }
LBRACE {
RBRACE }
RETURNTK return
SEMICN ;
RBRACE }
INTTK int
IDENFR add_int
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
LBRACE {
RETURNTK return
IDENFR a
PLUS +
IDENFR b
RBRACE }
CHARTK char
IDENFR read_char
LPARENT (
CHARTK char
IDENFR ch
RPARENT )
LBRACE {
SEMICN ;
RETURNTK return
IDENFR ch
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_Lval_exp
LPARENT (
RPARENT )
LBRACE {
IDENFR const_int_a
IDENFR char_a
IDENFR char_b2
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "test_Lval_exp success!\n"
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_primary_exp
LPARENT (
RPARENT )
LBRACE {
LPARENT (
INTCON 1
RPARENT )
SEMICN ;
IDENFR char_a
SEMICN ;
INTCON 1
SEMICN ;
CHRCON 'a'
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "test_primary_exp success!\n"
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_func_int_arr
LPARENT (
INTTK int
IDENFR a
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
IDENFR a
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
IDENFR a
LBRACK [
INTCON 0
SEMICN ;
IDENFR a
LBRACK [
INTCON 0
RBRACK ]
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_func_mul_int
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
RPARENT )
LBRACE {
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_unary_exp
LPARENT (
RPARENT )
LBRACE {
INTCON 0
SEMICN ;
IDENFR test_func_int
LPARENT (
INTCON 0
RPARENT )
SEMICN ;
IDENFR test_func_int
LPARENT (
IDENFR int_b2
LBRACK [
INTCON 0
RPARENT )
SEMICN ;
IDENFR test_func_int_arr
LPARENT (
IDENFR int_b2
RPARENT )
SEMICN ;
IDENFR test_func_mul_int
LPARENT (
INTCON 0
COMMA ,
INTCON 1
RPARENT )
SEMICN ;
PLUS +
INTCON 1
MINU -
INTCON 1
SEMICN ;
IFTK if
LPARENT (
NOT !
INTCON 1
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "test_unary_exp success!\n"
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_Lexp
LPARENT (
RPARENT )
LBRACE {
INTCON 1
IFTK if
LPARENT (
INTCON 1
AND &&
INTCON 1
IFTK if
LPARENT (
INTCON 1
OR ||
INTCON 1
RPARENT )
IFTK if
LPARENT (
INTCON 1
ERROR_AND &
INTCON 1
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test
LPARENT (
RPARENT )
LBRACE {
IDENFR test_stmt_1_3
LPARENT (
IDENFR test_stmt_for_break_continue
LPARENT (
SEMICN ;
IDENFR test_stmt_getint_getchar_printf
LPARENT (
RPARENT )
RBRACE }
INTTK int
MAINTK main
LPARENT (
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "22371236\n"
RPARENT )
SEMICN ;
IDENFR test
LPARENT (
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
CONSTTK const
INTTK int
IDENFR const_int_a
ASSIGN =
INTCON 0
CONSTTK const
INTTK int
IDENFR const_int_b1
ASSIGN =
INTCON 1
COMMA ,
IDENFR const_int_b2
LBRACK [
INTCON 5
ASSIGN =
LBRACE {
INTCON 0
COMMA ,
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
COMMA ,
INTCON 4
RBRACE }
CONSTTK const
CHARTK char
IDENFR str
LBRACK [
INTCON 10
ASSIGN =
STRCON "hello!"
CHARTK char
IDENFR char_a
ASSIGN =
CHRCON 'a'
CHARTK char
IDENFR char_b1
ASSIGN =
CHRCON 'b'
COMMA ,
IDENFR char_b2
LBRACK [
INTCON 5
ASSIGN =
LBRACE {
CHRCON 'a'
COMMA ,
CHRCON 'b'
COMMA ,
CHRCON 'c'
COMMA ,
CHRCON 'd'
COMMA ,
CHRCON 'e'
RBRACE }
COMMA ,
IDENFR char_b3
LBRACK [
INTCON 10
ASSIGN =
STRCON "world!"
INTTK int
IDENFR int_b2
LBRACK [
INTCON 5
RBRACK ]
SEMICN ;
VOIDTK void
IDENFR print_int_arr
LPARENT (
INTTK int
IDENFR arr
LBRACK [
COMMA ,
INTTK int
IDENFR n
LBRACE {
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
IDENFR n
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "%d "
COMMA ,
IDENFR arr
LBRACK [
IDENFR i
RPARENT )
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "\n"
RPARENT )
SEMICN ;
RETURNTK return
RBRACE }
VOIDTK void
IDENFR test_stmt_for_break_continue
LPARENT (
LBRACE {
CONTINUETK continue
BREAKTK break
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_stmt_getint_getchar_printf
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
CHARTK char
IDENFR ch
ASSIGN =
CHRCON 'a'
IDENFR a
ASSIGN =
GETINTTK getint
LPARENT (
SEMICN ;
IDENFR ch
ASSIGN =
GETCHARTK getchar
LPARENT (
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "test_stmt_getint_getchar_printf"
PRINTFTK printf
LPARENT (
STRCON "%c%c%c%c%c%c%c\n"
COMMA ,
CHRCON 's'
COMMA ,
CHRCON 'u'
COMMA ,
CHRCON 'c'
COMMA ,
CHRCON 'c'
COMMA ,
CHRCON 'e'
COMMA ,
CHRCON 's'
COMMA ,
CHRCON 's'
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_block
LPARENT (
RPARENT )
LBRACE {
LBRACE {
RBRACE }
LBRACE {
RBRACE }
RETURNTK return
SEMICN ;
RBRACE }
INTTK int
IDENFR add_int
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
LBRACE {
RETURNTK return
IDENFR a
PLUS +
IDENFR b
RBRACE }
CHARTK char
IDENFR read_char
LPARENT (
CHARTK char
IDENFR ch
RPARENT )
LBRACE {
SEMICN ;
RETURNTK return
IDENFR ch
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_Lval_exp
LPARENT (
RPARENT )
LBRACE {
IDENFR const_int_a
IDENFR char_a
IDENFR char_b2
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "test_Lval_exp success!\n"
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_primary_exp
LPARENT (
RPARENT )
LBRACE {
LPARENT (
INTCON 1
RPARENT )
SEMICN ;
IDENFR char_a
SEMICN ;
INTCON 1
SEMICN ;
CHRCON 'a'
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "test_primary_exp success!\n"
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_func_int_arr
LPARENT (
INTTK int
IDENFR a
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
IDENFR a
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
IDENFR a
LBRACK [
INTCON 0
SEMICN ;
IDENFR a
LBRACK [
INTCON 0
RBRACK ]
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_func_mul_int
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
RPARENT )
LBRACE {
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_unary_exp
LPARENT (
RPARENT )
LBRACE {
INTCON 0
SEMICN ;
IDENFR test_func_int
LPARENT (
INTCON 0
RPARENT )
SEMICN ;
IDENFR test_func_int
LPARENT (
IDENFR int_b2
LBRACK [
INTCON 0
RPARENT )
SEMICN ;
IDENFR test_func_int_arr
LPARENT (
IDENFR int_b2
RPARENT )
SEMICN ;
IDENFR test_func_mul_int
LPARENT (
INTCON 0
COMMA ,
INTCON 1
RPARENT )
SEMICN ;
PLUS +
INTCON 1
MINU -
INTCON 1
SEMICN ;
IFTK if
LPARENT (
NOT !
INTCON 1
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "test_unary_exp success!\n"
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_Lexp
LPARENT (
RPARENT )
LBRACE {
INTCON 1
IFTK if
LPARENT (
INTCON 1
AND &&
INTCON 1
IFTK if
LPARENT (
INTCON 1
OR ||
INTCON 1
RPARENT )
IFTK if
LPARENT (
INTCON 1
ERROR_AND &
INTCON 1
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test
LPARENT (
RPARENT )
LBRACE {
IDENFR test_stmt_1_3
LPARENT (
IDENFR test_stmt_for_break_continue
LPARENT (
SEMICN ;
IDENFR test_stmt_getint_getchar_printf
LPARENT (
RPARENT )
RBRACE }
INTTK int
MAINTK main
LPARENT (
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "22371236\n"
RPARENT )
SEMICN ;
IDENFR test
LPARENT (
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
CONSTTK const
INTTK int
IDENFR const_int_a
ASSIGN =
INTCON 0
CONSTTK const
INTTK int
IDENFR const_int_b1
ASSIGN =
INTCON 1
COMMA ,
IDENFR const_int_b2
LBRACK [
INTCON 5
ASSIGN =
LBRACE {
INTCON 0
COMMA ,
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
COMMA ,
INTCON 4
RBRACE }
CONSTTK const
CHARTK char
IDENFR str
LBRACK [
INTCON 10
ASSIGN =
STRCON "hello!"
CHARTK char
IDENFR char_a
ASSIGN =
CHRCON 'a'
CHARTK char
IDENFR char_b1
ASSIGN =
CHRCON 'b'
COMMA ,
IDENFR char_b2
LBRACK [
INTCON 5
ASSIGN =
LBRACE {
CHRCON 'a'
COMMA ,
CHRCON 'b'
COMMA ,
CHRCON 'c'
COMMA ,
CHRCON 'd'
COMMA ,
CHRCON 'e'
RBRACE }
COMMA ,
IDENFR char_b3
LBRACK [
INTCON 10
ASSIGN =
STRCON "world!"
INTTK int
IDENFR int_b2
LBRACK [
INTCON 5
RBRACK ]
SEMICN ;
VOIDTK void
IDENFR print_int_arr
LPARENT (
INTTK int
IDENFR arr
LBRACK [
COMMA ,
INTTK int
IDENFR n
LBRACE {
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
IDENFR n
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "%d "
COMMA ,
IDENFR arr
LBRACK [
IDENFR i
RPARENT )
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "\n"
RPARENT )
SEMICN ;
RETURNTK return
RBRACE }
VOIDTK void
IDENFR test_stmt_for_break_continue
LPARENT (
LBRACE {
CONTINUETK continue
BREAKTK break
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_stmt_getint_getchar_printf
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
CHARTK char
IDENFR ch
ASSIGN =
CHRCON 'a'
IDENFR a
ASSIGN =
GETINTTK getint
LPARENT (
SEMICN ;
IDENFR ch
ASSIGN =
GETCHARTK getchar
LPARENT (
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "test_stmt_getint_getchar_printf"
PRINTFTK printf
LPARENT (
STRCON "%c%c%c%c%c%c%c\n"
COMMA ,
CHRCON 's'
COMMA ,
CHRCON 'u'
COMMA ,
CHRCON 'c'
COMMA ,
CHRCON 'c'
COMMA ,
CHRCON 'e'
COMMA ,
CHRCON 's'
COMMA ,
CHRCON 's'
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_block
LPARENT (
RPARENT )
LBRACE {
LBRACE {
RBRACE }
LBRACE {
RBRACE }
RETURNTK return
SEMICN ;
RBRACE }
INTTK int
IDENFR add_int
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
LBRACE {
RETURNTK return
IDENFR a
PLUS +
IDENFR b
RBRACE }
CHARTK char
IDENFR read_char
LPARENT (
CHARTK char
IDENFR ch
RPARENT )
LBRACE {
SEMICN ;
RETURNTK return
IDENFR ch
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_Lval_exp
LPARENT (
RPARENT )
LBRACE {
IDENFR const_int_a
IDENFR char_a
IDENFR char_b2
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "test_Lval_exp success!\n"
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_primary_exp
LPARENT (
RPARENT )
LBRACE {
LPARENT (
INTCON 1
RPARENT )
SEMICN ;
IDENFR char_a
SEMICN ;
INTCON 1
SEMICN ;
CHRCON 'a'
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "test_primary_exp success!\n"
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_func_int_arr
LPARENT (
INTTK int
IDENFR a
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
IDENFR a
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
IDENFR a
LBRACK [
INTCON 0
SEMICN ;
IDENFR a
LBRACK [
INTCON 0
RBRACK ]
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_func_mul_int
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
RPARENT )
LBRACE {
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_unary_exp
LPARENT (
RPARENT )
LBRACE {
INTCON 0
SEMICN ;
IDENFR test_func_int
LPARENT (
INTCON 0
RPARENT )
SEMICN ;
IDENFR test_func_int
LPARENT (
IDENFR int_b2
LBRACK [
INTCON 0
RPARENT )
SEMICN ;
IDENFR test_func_int_arr
LPARENT (
IDENFR int_b2
RPARENT )
SEMICN ;
IDENFR test_func_mul_int
LPARENT (
INTCON 0
COMMA ,
INTCON 1
RPARENT )
SEMICN ;
PLUS +
INTCON 1
MINU -
INTCON 1
SEMICN ;
IFTK if
LPARENT (
NOT !
INTCON 1
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "test_unary_exp success!\n"
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_Lexp
LPARENT (
RPARENT )
LBRACE {
INTCON 1
IFTK if
LPARENT (
INTCON 1
AND &&
INTCON 1
IFTK if
LPARENT (
INTCON 1
OR ||
INTCON 1
RPARENT )
IFTK if
LPARENT (
INTCON 1
ERROR_AND &
INTCON 1
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test
LPARENT (
RPARENT )
LBRACE {
IDENFR test_stmt_1_3
LPARENT (
IDENFR test_stmt_for_break_continue
LPARENT (
SEMICN ;
IDENFR test_stmt_getint_getchar_printf
LPARENT (
RPARENT )
RBRACE }
INTTK int
MAINTK main
LPARENT (
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "22371236\n"
RPARENT )
SEMICN ;
IDENFR test
LPARENT (
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
CONSTTK const
INTTK int
IDENFR const_int_a
ASSIGN =
INTCON 0
CONSTTK const
INTTK int
IDENFR const_int_b1
ASSIGN =
INTCON 1
COMMA ,
IDENFR const_int_b2
LBRACK [
INTCON 5
ASSIGN =
LBRACE {
INTCON 0
COMMA ,
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
COMMA ,
INTCON 4
RBRACE }
CONSTTK const
CHARTK char
IDENFR str
LBRACK [
INTCON 10
ASSIGN =
STRCON "hello!"
CHARTK char
IDENFR char_a
ASSIGN =
CHRCON 'a'
CHARTK char
IDENFR char_b1
ASSIGN =
CHRCON 'b'
COMMA ,
IDENFR char_b2
LBRACK [
INTCON 5
ASSIGN =
LBRACE {
CHRCON 'a'
COMMA ,
CHRCON 'b'
COMMA ,
CHRCON 'c'
COMMA ,
CHRCON 'd'
COMMA ,
CHRCON 'e'
RBRACE }
COMMA ,
IDENFR char_b3
LBRACK [
INTCON 10
ASSIGN =
STRCON "world!"
INTTK int
IDENFR int_b2
LBRACK [
INTCON 5
RBRACK ]
SEMICN ;
VOIDTK void
IDENFR print_int_arr
LPARENT (
INTTK int
IDENFR arr
LBRACK [
COMMA ,
INTTK int
IDENFR n
LBRACE {
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
IDENFR n
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "%d "
COMMA ,
IDENFR arr
LBRACK [
IDENFR i
RPARENT )
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "\n"
RPARENT )
SEMICN ;
RETURNTK return
RBRACE }
VOIDTK void
IDENFR test_stmt_for_break_continue
LPARENT (
LBRACE {
CONTINUETK continue
BREAKTK break
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_stmt_getint_getchar_printf
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
CHARTK char
IDENFR ch
ASSIGN =
CHRCON 'a'
IDENFR a
ASSIGN =
GETINTTK getint
LPARENT (
SEMICN ;
IDENFR ch
ASSIGN =
GETCHARTK getchar
LPARENT (
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "test_stmt_getint_getchar_printf"
PRINTFTK printf
LPARENT (
STRCON "%c%c%c%c%c%c%c\n"
COMMA ,
CHRCON 's'
COMMA ,
CHRCON 'u'
COMMA ,
CHRCON 'c'
COMMA ,
CHRCON 'c'
COMMA ,
CHRCON 'e'
COMMA ,
CHRCON 's'
COMMA ,
CHRCON 's'
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_block
LPARENT (
RPARENT )
LBRACE {
LBRACE {
RBRACE }
LBRACE {
RBRACE }
RETURNTK return
SEMICN ;
RBRACE }
INTTK int
IDENFR add_int
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
LBRACE {
RETURNTK return
IDENFR a
PLUS +
IDENFR b
RBRACE }
CHARTK char
IDENFR read_char
LPARENT (
CHARTK char
IDENFR ch
RPARENT )
LBRACE {
SEMICN ;
RETURNTK return
IDENFR ch
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_Lval_exp
LPARENT (
RPARENT )
LBRACE {
IDENFR const_int_a
IDENFR char_a
IDENFR char_b2
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "test_Lval_exp success!\n"
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_primary_exp
LPARENT (
RPARENT )
LBRACE {
LPARENT (
INTCON 1
RPARENT )
SEMICN ;
IDENFR char_a
SEMICN ;
INTCON 1
SEMICN ;
CHRCON 'a'
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "test_primary_exp success!\n"
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_func_int_arr
LPARENT (
INTTK int
IDENFR a
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
IDENFR a
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
IDENFR a
LBRACK [
INTCON 0
SEMICN ;
IDENFR a
LBRACK [
INTCON 0
RBRACK ]
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_func_mul_int
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
RPARENT )
LBRACE {
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_unary_exp
LPARENT (
RPARENT )
LBRACE {
INTCON 0
SEMICN ;
IDENFR test_func_int
LPARENT (
INTCON 0
RPARENT )
SEMICN ;
IDENFR test_func_int
LPARENT (
IDENFR int_b2
LBRACK [
INTCON 0
RPARENT )
SEMICN ;
IDENFR test_func_int_arr
LPARENT (
IDENFR int_b2
RPARENT )
SEMICN ;
IDENFR test_func_mul_int
LPARENT (
INTCON 0
COMMA ,
INTCON 1
RPARENT )
SEMICN ;
PLUS +
INTCON 1
MINU -
INTCON 1
SEMICN ;
IFTK if
LPARENT (
NOT !
INTCON 1
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "test_unary_exp success!\n"
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_Lexp
LPARENT (
RPARENT )
LBRACE {
INTCON 1
IFTK if
LPARENT (
INTCON 1
AND &&
INTCON 1
IFTK if
LPARENT (
INTCON 1
OR ||
INTCON 1
RPARENT )
IFTK if
LPARENT (
INTCON 1
ERROR_AND &
INTCON 1
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test
LPARENT (
RPARENT )
LBRACE {
IDENFR test_stmt_1_3
LPARENT (
IDENFR test_stmt_for_break_continue
LPARENT (
SEMICN ;
IDENFR test_stmt_getint_getchar_printf
LPARENT (
RPARENT )
RBRACE }
INTTK int
MAINTK main
LPARENT (
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "22371236\n"
RPARENT )
SEMICN ;
IDENFR test
LPARENT (
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
CHARTK char
IDENFR char_b1
ASSIGN =
CHRCON 'b'
COMMA ,
IDENFR char_b2
LBRACK [
INTCON 5
ASSIGN =
LBRACE {
CHRCON 'a'
COMMA ,
CHRCON 'b'
COMMA ,
CHRCON 'c'
COMMA ,
CHRCON 'd'
COMMA ,
CHRCON 'e'
RBRACE }
COMMA ,
IDENFR char_b3
LBRACK [
INTCON 10
ASSIGN =
STRCON "world!"
INTTK int
IDENFR int_b2
LBRACK [
INTCON 5
RBRACK ]
SEMICN ;
VOIDTK void
IDENFR print_int_arr
LPARENT (
INTTK int
IDENFR arr
LBRACK [
COMMA ,
INTTK int
IDENFR n
LBRACE {
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
IDENFR n
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "%d "
COMMA ,
IDENFR arr
LBRACK [
IDENFR i
RPARENT )
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "\n"
RPARENT )
SEMICN ;
RETURNTK return
RBRACE }
VOIDTK void
IDENFR test_stmt_for_break_continue
LPARENT (
LBRACE {
CONTINUETK continue
BREAKTK break
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_stmt_getint_getchar_printf
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
CHARTK char
IDENFR ch
ASSIGN =
CHRCON 'a'
IDENFR a
ASSIGN =
GETINTTK getint
LPARENT (
SEMICN ;
IDENFR ch
ASSIGN =
GETCHARTK getchar
LPARENT (
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "test_stmt_getint_getchar_printf"
PRINTFTK printf
LPARENT (
STRCON "%c%c%c%c%c%c%c\n"
COMMA ,
CHRCON 's'
COMMA ,
CHRCON 'u'
COMMA ,
CHRCON 'c'
COMMA ,
CHRCON 'c'
COMMA ,
CHRCON 'e'
COMMA ,
CHRCON 's'
COMMA ,
CHRCON 's'
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_block
LPARENT (
RPARENT )
LBRACE {
LBRACE {
RBRACE }
LBRACE {
RBRACE }
RETURNTK return
SEMICN ;
RBRACE }
INTTK int
IDENFR add_int
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
LBRACE {
RETURNTK return
IDENFR a
PLUS +
IDENFR b
RBRACE }
CHARTK char
IDENFR read_char
LPARENT (
CHARTK char
IDENFR ch
RPARENT )
LBRACE {
SEMICN ;
RETURNTK return
IDENFR ch
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_Lval_exp
LPARENT (
RPARENT )
LBRACE {
IDENFR const_int_a
IDENFR char_a
IDENFR char_b2
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "test_Lval_exp success!\n"
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_primary_exp
LPARENT (
RPARENT )
LBRACE {
LPARENT (
INTCON 1
RPARENT )
SEMICN ;
IDENFR char_a
SEMICN ;
INTCON 1
SEMICN ;
CHRCON 'a'
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "test_primary_exp success!\n"
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_func_int_arr
LPARENT (
INTTK int
IDENFR a
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
IDENFR a
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
IDENFR a
LBRACK [
INTCON 0
SEMICN ;
IDENFR a
LBRACK [
INTCON 0
RBRACK ]
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_func_mul_int
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
RPARENT )
LBRACE {
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_unary_exp
LPARENT (
RPARENT )
LBRACE {
INTCON 0
SEMICN ;
IDENFR test_func_int
LPARENT (
INTCON 0
RPARENT )
SEMICN ;
IDENFR test_func_int
LPARENT (
IDENFR int_b2
LBRACK [
INTCON 0
RPARENT )
SEMICN ;
IDENFR test_func_int_arr
LPARENT (
IDENFR int_b2
RPARENT )
SEMICN ;
IDENFR test_func_mul_int
LPARENT (
INTCON 0
COMMA ,
INTCON 1
RPARENT )
SEMICN ;
PLUS +
INTCON 1
MINU -
INTCON 1
SEMICN ;
IFTK if
LPARENT (
NOT !
INTCON 1
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "test_unary_exp success!\n"
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_Lexp
LPARENT (
RPARENT )
LBRACE {
INTCON 1
IFTK if
LPARENT (
INTCON 1
AND &&
INTCON 1
IFTK if
LPARENT (
INTCON 1
OR ||
INTCON 1
RPARENT )
IFTK if
LPARENT (
INTCON 1
ERROR_AND &
INTCON 1
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test
LPARENT (
RPARENT )
LBRACE {
IDENFR test_stmt_1_3
LPARENT (
IDENFR test_stmt_for_break_continue
LPARENT (
SEMICN ;
IDENFR test_stmt_getint_getchar_printf
LPARENT (
RPARENT )
RBRACE }
INTTK int
MAINTK main
LPARENT (
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "22371236\n"
RPARENT )
SEMICN ;
IDENFR test
LPARENT (
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
CHARTK char
IDENFR char_b1
ASSIGN =
CHRCON 'b'
COMMA ,
IDENFR char_b2
LBRACK [
INTCON 5
ASSIGN =
LBRACE {
CHRCON 'a'
COMMA ,
CHRCON 'b'
COMMA ,
CHRCON 'c'
COMMA ,
CHRCON 'd'
COMMA ,
CHRCON 'e'
RBRACE }
COMMA ,
IDENFR char_b3
LBRACK [
INTCON 10
ASSIGN =
STRCON "world!"
INTTK int
IDENFR int_b2
LBRACK [
INTCON 5
RBRACK ]
SEMICN ;
VOIDTK void
IDENFR print_int_arr
LPARENT (
INTTK int
IDENFR arr
LBRACK [
COMMA ,
INTTK int
IDENFR n
LBRACE {
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
IDENFR n
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "%d "
COMMA ,
IDENFR arr
LBRACK [
IDENFR i
RPARENT )
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "\n"
RPARENT )
SEMICN ;
RETURNTK return
RBRACE }
VOIDTK void
IDENFR test_stmt_for_break_continue
LPARENT (
LBRACE {
CONTINUETK continue
BREAKTK break
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_stmt_getint_getchar_printf
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
CHARTK char
IDENFR ch
ASSIGN =
CHRCON 'a'
IDENFR a
ASSIGN =
GETINTTK getint
LPARENT (
SEMICN ;
IDENFR ch
ASSIGN =
GETCHARTK getchar
LPARENT (
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "test_stmt_getint_getchar_printf"
PRINTFTK printf
LPARENT (
STRCON "%c%c%c%c%c%c%c\n"
COMMA ,
CHRCON 's'
COMMA ,
CHRCON 'u'
COMMA ,
CHRCON 'c'
COMMA ,
CHRCON 'c'
COMMA ,
CHRCON 'e'
COMMA ,
CHRCON 's'
COMMA ,
CHRCON 's'
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_block
LPARENT (
RPARENT )
LBRACE {
LBRACE {
RBRACE }
LBRACE {
RBRACE }
RETURNTK return
SEMICN ;
RBRACE }
INTTK int
IDENFR add_int
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
LBRACE {
RETURNTK return
IDENFR a
PLUS +
IDENFR b
RBRACE }
CHARTK char
IDENFR read_char
LPARENT (
CHARTK char
IDENFR ch
RPARENT )
LBRACE {
SEMICN ;
RETURNTK return
IDENFR ch
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_Lval_exp
LPARENT (
RPARENT )
LBRACE {
IDENFR const_int_a
IDENFR char_a
IDENFR char_b2
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "test_Lval_exp success!\n"
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_primary_exp
LPARENT (
RPARENT )
LBRACE {
LPARENT (
INTCON 1
RPARENT )
SEMICN ;
IDENFR char_a
SEMICN ;
INTCON 1
SEMICN ;
CHRCON 'a'
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "test_primary_exp success!\n"
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_func_int_arr
LPARENT (
INTTK int
IDENFR a
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
IDENFR a
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
IDENFR a
LBRACK [
INTCON 0
SEMICN ;
IDENFR a
LBRACK [
INTCON 0
RBRACK ]
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_func_mul_int
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
RPARENT )
LBRACE {
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_unary_exp
LPARENT (
RPARENT )
LBRACE {
INTCON 0
SEMICN ;
IDENFR test_func_int
LPARENT (
INTCON 0
RPARENT )
SEMICN ;
IDENFR test_func_int
LPARENT (
IDENFR int_b2
LBRACK [
INTCON 0
RPARENT )
SEMICN ;
IDENFR test_func_int_arr
LPARENT (
IDENFR int_b2
RPARENT )
SEMICN ;
IDENFR test_func_mul_int
LPARENT (
INTCON 0
COMMA ,
INTCON 1
RPARENT )
SEMICN ;
PLUS +
INTCON 1
MINU -
INTCON 1
SEMICN ;
IFTK if
LPARENT (
NOT !
INTCON 1
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "test_unary_exp success!\n"
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_Lexp
LPARENT (
RPARENT )
LBRACE {
INTCON 1
IFTK if
LPARENT (
INTCON 1
AND &&
INTCON 1
IFTK if
LPARENT (
INTCON 1
OR ||
INTCON 1
RPARENT )
IFTK if
LPARENT (
INTCON 1
ERROR_AND &
INTCON 1
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test
LPARENT (
RPARENT )
LBRACE {
IDENFR test_stmt_1_3
LPARENT (
IDENFR test_stmt_for_break_continue
LPARENT (
SEMICN ;
IDENFR test_stmt_getint_getchar_printf
LPARENT (
RPARENT )
RBRACE }
INTTK int
MAINTK main
LPARENT (
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "22371236\n"
RPARENT )
SEMICN ;
IDENFR test
LPARENT (
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
VOIDTK void
IDENFR print_int_arr
LPARENT (
INTTK int
IDENFR arr
LBRACK [
COMMA ,
INTTK int
IDENFR n
LBRACE {
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
IDENFR n
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "%d "
COMMA ,
IDENFR arr
LBRACK [
IDENFR i
RPARENT )
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "\n"
RPARENT )
SEMICN ;
RETURNTK return
RBRACE }
VOIDTK void
IDENFR test_stmt_for_break_continue
LPARENT (
LBRACE {
CONTINUETK continue
BREAKTK break
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_stmt_getint_getchar_printf
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
CHARTK char
IDENFR ch
ASSIGN =
CHRCON 'a'
IDENFR a
ASSIGN =
GETINTTK getint
LPARENT (
SEMICN ;
IDENFR ch
ASSIGN =
GETCHARTK getchar
LPARENT (
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "test_stmt_getint_getchar_printf"
PRINTFTK printf
LPARENT (
STRCON "%c%c%c%c%c%c%c\n"
COMMA ,
CHRCON 's'
COMMA ,
CHRCON 'u'
COMMA ,
CHRCON 'c'
COMMA ,
CHRCON 'c'
COMMA ,
CHRCON 'e'
COMMA ,
CHRCON 's'
COMMA ,
CHRCON 's'
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_block
LPARENT (
RPARENT )
LBRACE {
LBRACE {
RBRACE }
LBRACE {
RBRACE }
RETURNTK return
SEMICN ;
RBRACE }
INTTK int
IDENFR add_int
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
LBRACE {
RETURNTK return
IDENFR a
PLUS +
IDENFR b
RBRACE }
CHARTK char
IDENFR read_char
LPARENT (
CHARTK char
IDENFR ch
RPARENT )
LBRACE {
SEMICN ;
RETURNTK return
IDENFR ch
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_Lval_exp
LPARENT (
RPARENT )
LBRACE {
IDENFR const_int_a
IDENFR char_a
IDENFR char_b2
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "test_Lval_exp success!\n"
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_primary_exp
LPARENT (
RPARENT )
LBRACE {
LPARENT (
INTCON 1
RPARENT )
SEMICN ;
IDENFR char_a
SEMICN ;
INTCON 1
SEMICN ;
CHRCON 'a'
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "test_primary_exp success!\n"
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_func_int_arr
LPARENT (
INTTK int
IDENFR a
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
IDENFR a
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
IDENFR a
LBRACK [
INTCON 0
SEMICN ;
IDENFR a
LBRACK [
INTCON 0
RBRACK ]
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_func_mul_int
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
RPARENT )
LBRACE {
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_unary_exp
LPARENT (
RPARENT )
LBRACE {
INTCON 0
SEMICN ;
IDENFR test_func_int
LPARENT (
INTCON 0
RPARENT )
SEMICN ;
IDENFR test_func_int
LPARENT (
IDENFR int_b2
LBRACK [
INTCON 0
RPARENT )
SEMICN ;
IDENFR test_func_int_arr
LPARENT (
IDENFR int_b2
RPARENT )
SEMICN ;
IDENFR test_func_mul_int
LPARENT (
INTCON 0
COMMA ,
INTCON 1
RPARENT )
SEMICN ;
PLUS +
INTCON 1
MINU -
INTCON 1
SEMICN ;
IFTK if
LPARENT (
NOT !
INTCON 1
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "test_unary_exp success!\n"
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_Lexp
LPARENT (
RPARENT )
LBRACE {
INTCON 1
IFTK if
LPARENT (
INTCON 1
AND &&
INTCON 1
IFTK if
LPARENT (
INTCON 1
OR ||
INTCON 1
RPARENT )
IFTK if
LPARENT (
INTCON 1
ERROR_AND &
INTCON 1
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test
LPARENT (
RPARENT )
LBRACE {
IDENFR test_stmt_1_3
LPARENT (
IDENFR test_stmt_for_break_continue
LPARENT (
SEMICN ;
IDENFR test_stmt_getint_getchar_printf
LPARENT (
RPARENT )
RBRACE }
INTTK int
MAINTK main
LPARENT (
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "22371236\n"
RPARENT )
SEMICN ;
IDENFR test
LPARENT (
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
VOIDTK void
IDENFR print_int_arr
LPARENT (
INTTK int
IDENFR arr
LBRACK [
COMMA ,
INTTK int
IDENFR n
LBRACE {
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
IDENFR n
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "%d "
COMMA ,
IDENFR arr
LBRACK [
IDENFR i
RPARENT )
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "\n"
RPARENT )
SEMICN ;
RETURNTK return
RBRACE }
VOIDTK void
IDENFR test_stmt_for_break_continue
LPARENT (
LBRACE {
CONTINUETK continue
BREAKTK break
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_stmt_getint_getchar_printf
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
CHARTK char
IDENFR ch
ASSIGN =
CHRCON 'a'
IDENFR a
ASSIGN =
GETINTTK getint
LPARENT (
SEMICN ;
IDENFR ch
ASSIGN =
GETCHARTK getchar
LPARENT (
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "test_stmt_getint_getchar_printf"
PRINTFTK printf
LPARENT (
STRCON "%c%c%c%c%c%c%c\n"
COMMA ,
CHRCON 's'
COMMA ,
CHRCON 'u'
COMMA ,
CHRCON 'c'
COMMA ,
CHRCON 'c'
COMMA ,
CHRCON 'e'
COMMA ,
CHRCON 's'
COMMA ,
CHRCON 's'
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_block
LPARENT (
RPARENT )
LBRACE {
LBRACE {
RBRACE }
LBRACE {
RBRACE }
RETURNTK return
SEMICN ;
RBRACE }
INTTK int
IDENFR add_int
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
LBRACE {
RETURNTK return
IDENFR a
PLUS +
IDENFR b
RBRACE }
CHARTK char
IDENFR read_char
LPARENT (
CHARTK char
IDENFR ch
RPARENT )
LBRACE {
SEMICN ;
RETURNTK return
IDENFR ch
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_Lval_exp
LPARENT (
RPARENT )
LBRACE {
IDENFR const_int_a
IDENFR char_a
IDENFR char_b2
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "test_Lval_exp success!\n"
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_primary_exp
LPARENT (
RPARENT )
LBRACE {
LPARENT (
INTCON 1
RPARENT )
SEMICN ;
IDENFR char_a
SEMICN ;
INTCON 1
SEMICN ;
CHRCON 'a'
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "test_primary_exp success!\n"
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_func_int_arr
LPARENT (
INTTK int
IDENFR a
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
IDENFR a
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
IDENFR a
LBRACK [
INTCON 0
SEMICN ;
IDENFR a
LBRACK [
INTCON 0
RBRACK ]
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_func_mul_int
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
RPARENT )
LBRACE {
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_unary_exp
LPARENT (
RPARENT )
LBRACE {
INTCON 0
SEMICN ;
IDENFR test_func_int
LPARENT (
INTCON 0
RPARENT )
SEMICN ;
IDENFR test_func_int
LPARENT (
IDENFR int_b2
LBRACK [
INTCON 0
RPARENT )
SEMICN ;
IDENFR test_func_int_arr
LPARENT (
IDENFR int_b2
RPARENT )
SEMICN ;
IDENFR test_func_mul_int
LPARENT (
INTCON 0
COMMA ,
INTCON 1
RPARENT )
SEMICN ;
PLUS +
INTCON 1
MINU -
INTCON 1
SEMICN ;
IFTK if
LPARENT (
NOT !
INTCON 1
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "test_unary_exp success!\n"
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_Lexp
LPARENT (
RPARENT )
LBRACE {
INTCON 1
IFTK if
LPARENT (
INTCON 1
AND &&
INTCON 1
IFTK if
LPARENT (
INTCON 1
OR ||
INTCON 1
RPARENT )
IFTK if
LPARENT (
INTCON 1
ERROR_AND &
INTCON 1
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test
LPARENT (
RPARENT )
LBRACE {
IDENFR test_stmt_1_3
LPARENT (
IDENFR test_stmt_for_break_continue
LPARENT (
SEMICN ;
IDENFR test_stmt_getint_getchar_printf
LPARENT (
RPARENT )
RBRACE }
INTTK int
MAINTK main
LPARENT (
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "22371236\n"
RPARENT )
SEMICN ;
IDENFR test
LPARENT (
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
VOIDTK void
IDENFR print_int_arr
LPARENT (
INTTK int
IDENFR arr
LBRACK [
COMMA ,
INTTK int
IDENFR n
LBRACE {
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
IDENFR n
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "%d "
COMMA ,
IDENFR arr
LBRACK [
IDENFR i
RPARENT )
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "\n"
RPARENT )
SEMICN ;
RETURNTK return
RBRACE }
VOIDTK void
IDENFR test_stmt_for_break_continue
LPARENT (
LBRACE {
CONTINUETK continue
BREAKTK break
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_stmt_getint_getchar_printf
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
CHARTK char
IDENFR ch
ASSIGN =
CHRCON 'a'
IDENFR a
ASSIGN =
GETINTTK getint
LPARENT (
SEMICN ;
IDENFR ch
ASSIGN =
GETCHARTK getchar
LPARENT (
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "test_stmt_getint_getchar_printf"
PRINTFTK printf
LPARENT (
STRCON "%c%c%c%c%c%c%c\n"
COMMA ,
CHRCON 's'
COMMA ,
CHRCON 'u'
COMMA ,
CHRCON 'c'
COMMA ,
CHRCON 'c'
COMMA ,
CHRCON 'e'
COMMA ,
CHRCON 's'
COMMA ,
CHRCON 's'
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_block
LPARENT (
RPARENT )
LBRACE {
LBRACE {
RBRACE }
LBRACE {
RBRACE }
RETURNTK return
SEMICN ;
RBRACE }
INTTK int
IDENFR add_int
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
LBRACE {
RETURNTK return
IDENFR a
PLUS +
IDENFR b
RBRACE }
CHARTK char
IDENFR read_char
LPARENT (
CHARTK char
IDENFR ch
RPARENT )
LBRACE {
SEMICN ;
RETURNTK return
IDENFR ch
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_Lval_exp
LPARENT (
RPARENT )
LBRACE {
IDENFR const_int_a
IDENFR char_a
IDENFR char_b2
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "test_Lval_exp success!\n"
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_primary_exp
LPARENT (
RPARENT )
LBRACE {
LPARENT (
INTCON 1
RPARENT )
SEMICN ;
IDENFR char_a
SEMICN ;
INTCON 1
SEMICN ;
CHRCON 'a'
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "test_primary_exp success!\n"
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_func_int_arr
LPARENT (
INTTK int
IDENFR a
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
IDENFR a
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
IDENFR a
LBRACK [
INTCON 0
SEMICN ;
IDENFR a
LBRACK [
INTCON 0
RBRACK ]
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_func_mul_int
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
RPARENT )
LBRACE {
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_unary_exp
LPARENT (
RPARENT )
LBRACE {
INTCON 0
SEMICN ;
IDENFR test_func_int
LPARENT (
INTCON 0
RPARENT )
SEMICN ;
IDENFR test_func_int
LPARENT (
IDENFR int_b2
LBRACK [
INTCON 0
RPARENT )
SEMICN ;
IDENFR test_func_int_arr
LPARENT (
IDENFR int_b2
RPARENT )
SEMICN ;
IDENFR test_func_mul_int
LPARENT (
INTCON 0
COMMA ,
INTCON 1
RPARENT )
SEMICN ;
PLUS +
INTCON 1
MINU -
INTCON 1
SEMICN ;
IFTK if
LPARENT (
NOT !
INTCON 1
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "test_unary_exp success!\n"
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_Lexp
LPARENT (
RPARENT )
LBRACE {
INTCON 1
IFTK if
LPARENT (
INTCON 1
AND &&
INTCON 1
IFTK if
LPARENT (
INTCON 1
OR ||
INTCON 1
RPARENT )
IFTK if
LPARENT (
INTCON 1
ERROR_AND &
INTCON 1
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test
LPARENT (
RPARENT )
LBRACE {
IDENFR test_stmt_1_3
LPARENT (
IDENFR test_stmt_for_break_continue
LPARENT (
SEMICN ;
IDENFR test_stmt_getint_getchar_printf
LPARENT (
RPARENT )
RBRACE }
INTTK int
MAINTK main
LPARENT (
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "22371236\n"
RPARENT )
SEMICN ;
IDENFR test
LPARENT (
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
VOIDTK void
IDENFR print_int_arr
LPARENT (
INTTK int
IDENFR arr
LBRACK [
COMMA ,
INTTK int
IDENFR n
LBRACE {
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
IDENFR n
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "%d "
COMMA ,
IDENFR arr
LBRACK [
IDENFR i
RPARENT )
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "\n"
RPARENT )
SEMICN ;
RETURNTK return
RBRACE }
VOIDTK void
IDENFR test_stmt_for_break_continue
LPARENT (
LBRACE {
CONTINUETK continue
BREAKTK break
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_stmt_getint_getchar_printf
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
CHARTK char
IDENFR ch
ASSIGN =
CHRCON 'a'
IDENFR a
ASSIGN =
GETINTTK getint
LPARENT (
SEMICN ;
IDENFR ch
ASSIGN =
GETCHARTK getchar
LPARENT (
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "test_stmt_getint_getchar_printf"
PRINTFTK printf
LPARENT (
STRCON "%c%c%c%c%c%c%c\n"
COMMA ,
CHRCON 's'
COMMA ,
CHRCON 'u'
COMMA ,
CHRCON 'c'
COMMA ,
CHRCON 'c'
COMMA ,
CHRCON 'e'
COMMA ,
CHRCON 's'
COMMA ,
CHRCON 's'
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_block
LPARENT (
RPARENT )
LBRACE {
LBRACE {
RBRACE }
LBRACE {
RBRACE }
RETURNTK return
SEMICN ;
RBRACE }
INTTK int
IDENFR add_int
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
LBRACE {
RETURNTK return
IDENFR a
PLUS +
IDENFR b
RBRACE }
CHARTK char
IDENFR read_char
LPARENT (
CHARTK char
IDENFR ch
RPARENT )
LBRACE {
SEMICN ;
RETURNTK return
IDENFR ch
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_Lval_exp
LPARENT (
RPARENT )
LBRACE {
IDENFR const_int_a
IDENFR char_a
IDENFR char_b2
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "test_Lval_exp success!\n"
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_primary_exp
LPARENT (
RPARENT )
LBRACE {
LPARENT (
INTCON 1
RPARENT )
SEMICN ;
IDENFR char_a
SEMICN ;
INTCON 1
SEMICN ;
CHRCON 'a'
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "test_primary_exp success!\n"
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_func_int_arr
LPARENT (
INTTK int
IDENFR a
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
IDENFR a
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
IDENFR a
LBRACK [
INTCON 0
SEMICN ;
IDENFR a
LBRACK [
INTCON 0
RBRACK ]
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_func_mul_int
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
RPARENT )
LBRACE {
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_unary_exp
LPARENT (
RPARENT )
LBRACE {
INTCON 0
SEMICN ;
IDENFR test_func_int
LPARENT (
INTCON 0
RPARENT )
SEMICN ;
IDENFR test_func_int
LPARENT (
IDENFR int_b2
LBRACK [
INTCON 0
RPARENT )
SEMICN ;
IDENFR test_func_int_arr
LPARENT (
IDENFR int_b2
RPARENT )
SEMICN ;
IDENFR test_func_mul_int
LPARENT (
INTCON 0
COMMA ,
INTCON 1
RPARENT )
SEMICN ;
PLUS +
INTCON 1
MINU -
INTCON 1
SEMICN ;
IFTK if
LPARENT (
NOT !
INTCON 1
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "test_unary_exp success!\n"
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_Lexp
LPARENT (
RPARENT )
LBRACE {
INTCON 1
IFTK if
LPARENT (
INTCON 1
AND &&
INTCON 1
IFTK if
LPARENT (
INTCON 1
OR ||
INTCON 1
RPARENT )
IFTK if
LPARENT (
INTCON 1
ERROR_AND &
INTCON 1
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test
LPARENT (
RPARENT )
LBRACE {
IDENFR test_stmt_1_3
LPARENT (
IDENFR test_stmt_for_break_continue
LPARENT (
SEMICN ;
IDENFR test_stmt_getint_getchar_printf
LPARENT (
RPARENT )
RBRACE }
INTTK int
MAINTK main
LPARENT (
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "22371236\n"
RPARENT )
SEMICN ;
IDENFR test
LPARENT (
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
VOIDTK void
IDENFR print_int_arr
LPARENT (
INTTK int
IDENFR arr
LBRACK [
COMMA ,
INTTK int
IDENFR n
LBRACE {
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
IDENFR n
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "%d "
COMMA ,
IDENFR arr
LBRACK [
IDENFR i
RPARENT )
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "\n"
RPARENT )
SEMICN ;
RETURNTK return
RBRACE }
VOIDTK void
IDENFR test_stmt_for_break_continue
LPARENT (
LBRACE {
CONTINUETK continue
BREAKTK break
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_stmt_getint_getchar_printf
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
CHARTK char
IDENFR ch
ASSIGN =
CHRCON 'a'
IDENFR a
ASSIGN =
GETINTTK getint
LPARENT (
SEMICN ;
IDENFR ch
ASSIGN =
GETCHARTK getchar
LPARENT (
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "test_stmt_getint_getchar_printf"
PRINTFTK printf
LPARENT (
STRCON "%c%c%c%c%c%c%c\n"
COMMA ,
CHRCON 's'
COMMA ,
CHRCON 'u'
COMMA ,
CHRCON 'c'
COMMA ,
CHRCON 'c'
COMMA ,
CHRCON 'e'
COMMA ,
CHRCON 's'
COMMA ,
CHRCON 's'
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_block
LPARENT (
RPARENT )
LBRACE {
LBRACE {
RBRACE }
LBRACE {
RBRACE }
RETURNTK return
SEMICN ;
RBRACE }
INTTK int
IDENFR add_int
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
LBRACE {
RETURNTK return
IDENFR a
PLUS +
IDENFR b
RBRACE }
CHARTK char
IDENFR read_char
LPARENT (
CHARTK char
IDENFR ch
RPARENT )
LBRACE {
SEMICN ;
RETURNTK return
IDENFR ch
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_Lval_exp
LPARENT (
RPARENT )
LBRACE {
IDENFR const_int_a
IDENFR char_a
IDENFR char_b2
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "test_Lval_exp success!\n"
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_primary_exp
LPARENT (
RPARENT )
LBRACE {
LPARENT (
INTCON 1
RPARENT )
SEMICN ;
IDENFR char_a
SEMICN ;
INTCON 1
SEMICN ;
CHRCON 'a'
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "test_primary_exp success!\n"
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_func_int_arr
LPARENT (
INTTK int
IDENFR a
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
IDENFR a
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
IDENFR a
LBRACK [
INTCON 0
SEMICN ;
IDENFR a
LBRACK [
INTCON 0
RBRACK ]
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_func_mul_int
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
RPARENT )
LBRACE {
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_unary_exp
LPARENT (
RPARENT )
LBRACE {
INTCON 0
SEMICN ;
IDENFR test_func_int
LPARENT (
INTCON 0
RPARENT )
SEMICN ;
IDENFR test_func_int
LPARENT (
IDENFR int_b2
LBRACK [
INTCON 0
RPARENT )
SEMICN ;
IDENFR test_func_int_arr
LPARENT (
IDENFR int_b2
RPARENT )
SEMICN ;
IDENFR test_func_mul_int
LPARENT (
INTCON 0
COMMA ,
INTCON 1
RPARENT )
SEMICN ;
PLUS +
INTCON 1
MINU -
INTCON 1
SEMICN ;
IFTK if
LPARENT (
NOT !
INTCON 1
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "test_unary_exp success!\n"
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_Lexp
LPARENT (
RPARENT )
LBRACE {
INTCON 1
IFTK if
LPARENT (
INTCON 1
AND &&
INTCON 1
IFTK if
LPARENT (
INTCON 1
OR ||
INTCON 1
RPARENT )
IFTK if
LPARENT (
INTCON 1
ERROR_AND &
INTCON 1
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test
LPARENT (
RPARENT )
LBRACE {
IDENFR test_stmt_1_3
LPARENT (
IDENFR test_stmt_for_break_continue
LPARENT (
SEMICN ;
IDENFR test_stmt_getint_getchar_printf
LPARENT (
RPARENT )
RBRACE }
INTTK int
MAINTK main
LPARENT (
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "22371236\n"
RPARENT )
SEMICN ;
IDENFR test
LPARENT (
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
VOIDTK void
IDENFR print_int_arr
LPARENT (
INTTK int
IDENFR arr
LBRACK [
COMMA ,
INTTK int
IDENFR n
LBRACE {
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
IDENFR n
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "%d "
COMMA ,
IDENFR arr
LBRACK [
IDENFR i
RPARENT )
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "\n"
RPARENT )
SEMICN ;
RETURNTK return
RBRACE }
VOIDTK void
IDENFR test_stmt_for_break_continue
LPARENT (
LBRACE {
CONTINUETK continue
BREAKTK break
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_stmt_getint_getchar_printf
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
CHARTK char
IDENFR ch
ASSIGN =
CHRCON 'a'
IDENFR a
ASSIGN =
GETINTTK getint
LPARENT (
SEMICN ;
IDENFR ch
ASSIGN =
GETCHARTK getchar
LPARENT (
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "test_stmt_getint_getchar_printf"
PRINTFTK printf
LPARENT (
STRCON "%c%c%c%c%c%c%c\n"
COMMA ,
CHRCON 's'
COMMA ,
CHRCON 'u'
COMMA ,
CHRCON 'c'
COMMA ,
CHRCON 'c'
COMMA ,
CHRCON 'e'
COMMA ,
CHRCON 's'
COMMA ,
CHRCON 's'
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_block
LPARENT (
RPARENT )
LBRACE {
LBRACE {
RBRACE }
LBRACE {
RBRACE }
RETURNTK return
SEMICN ;
RBRACE }
INTTK int
IDENFR add_int
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
LBRACE {
RETURNTK return
IDENFR a
PLUS +
IDENFR b
RBRACE }
CHARTK char
IDENFR read_char
LPARENT (
CHARTK char
IDENFR ch
RPARENT )
LBRACE {
SEMICN ;
RETURNTK return
IDENFR ch
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_Lval_exp
LPARENT (
RPARENT )
LBRACE {
IDENFR const_int_a
IDENFR char_a
IDENFR char_b2
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "test_Lval_exp success!\n"
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_primary_exp
LPARENT (
RPARENT )
LBRACE {
LPARENT (
INTCON 1
RPARENT )
SEMICN ;
IDENFR char_a
SEMICN ;
INTCON 1
SEMICN ;
CHRCON 'a'
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "test_primary_exp success!\n"
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_func_int_arr
LPARENT (
INTTK int
IDENFR a
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
IDENFR a
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
IDENFR a
LBRACK [
INTCON 0
SEMICN ;
IDENFR a
LBRACK [
INTCON 0
RBRACK ]
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_func_mul_int
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
RPARENT )
LBRACE {
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_unary_exp
LPARENT (
RPARENT )
LBRACE {
INTCON 0
SEMICN ;
IDENFR test_func_int
LPARENT (
INTCON 0
RPARENT )
SEMICN ;
IDENFR test_func_int
LPARENT (
IDENFR int_b2
LBRACK [
INTCON 0
RPARENT )
SEMICN ;
IDENFR test_func_int_arr
LPARENT (
IDENFR int_b2
RPARENT )
SEMICN ;
IDENFR test_func_mul_int
LPARENT (
INTCON 0
COMMA ,
INTCON 1
RPARENT )
SEMICN ;
PLUS +
INTCON 1
MINU -
INTCON 1
SEMICN ;
IFTK if
LPARENT (
NOT !
INTCON 1
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "test_unary_exp success!\n"
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_Lexp
LPARENT (
RPARENT )
LBRACE {
INTCON 1
IFTK if
LPARENT (
INTCON 1
AND &&
INTCON 1
IFTK if
LPARENT (
INTCON 1
OR ||
INTCON 1
RPARENT )
IFTK if
LPARENT (
INTCON 1
ERROR_AND &
INTCON 1
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test
LPARENT (
RPARENT )
LBRACE {
IDENFR test_stmt_1_3
LPARENT (
IDENFR test_stmt_for_break_continue
LPARENT (
SEMICN ;
IDENFR test_stmt_getint_getchar_printf
LPARENT (
RPARENT )
RBRACE }
INTTK int
MAINTK main
LPARENT (
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "22371236\n"
RPARENT )
SEMICN ;
IDENFR test
LPARENT (
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
VOIDTK void
IDENFR print_int_arr
LPARENT (
INTTK int
IDENFR arr
LBRACK [
COMMA ,
INTTK int
IDENFR n
LBRACE {
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
IDENFR n
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "%d "
COMMA ,
IDENFR arr
LBRACK [
IDENFR i
RPARENT )
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "\n"
RPARENT )
SEMICN ;
RETURNTK return
RBRACE }
VOIDTK void
IDENFR test_stmt_for_break_continue
LPARENT (
LBRACE {
CONTINUETK continue
BREAKTK break
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_stmt_getint_getchar_printf
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
CHARTK char
IDENFR ch
ASSIGN =
CHRCON 'a'
IDENFR a
ASSIGN =
GETINTTK getint
LPARENT (
SEMICN ;
IDENFR ch
ASSIGN =
GETCHARTK getchar
LPARENT (
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "test_stmt_getint_getchar_printf"
PRINTFTK printf
LPARENT (
STRCON "%c%c%c%c%c%c%c\n"
COMMA ,
CHRCON 's'
COMMA ,
CHRCON 'u'
COMMA ,
CHRCON 'c'
COMMA ,
CHRCON 'c'
COMMA ,
CHRCON 'e'
COMMA ,
CHRCON 's'
COMMA ,
CHRCON 's'
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_block
LPARENT (
RPARENT )
LBRACE {
LBRACE {
RBRACE }
LBRACE {
RBRACE }
RETURNTK return
SEMICN ;
RBRACE }
INTTK int
IDENFR add_int
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
LBRACE {
RETURNTK return
IDENFR a
PLUS +
IDENFR b
RBRACE }
CHARTK char
IDENFR read_char
LPARENT (
CHARTK char
IDENFR ch
RPARENT )
LBRACE {
SEMICN ;
RETURNTK return
IDENFR ch
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_Lval_exp
LPARENT (
RPARENT )
LBRACE {
IDENFR const_int_a
IDENFR char_a
IDENFR char_b2
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "test_Lval_exp success!\n"
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_primary_exp
LPARENT (
RPARENT )
LBRACE {
LPARENT (
INTCON 1
RPARENT )
SEMICN ;
IDENFR char_a
SEMICN ;
INTCON 1
SEMICN ;
CHRCON 'a'
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "test_primary_exp success!\n"
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_func_int_arr
LPARENT (
INTTK int
IDENFR a
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
IDENFR a
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
IDENFR a
LBRACK [
INTCON 0
SEMICN ;
IDENFR a
LBRACK [
INTCON 0
RBRACK ]
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_func_mul_int
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
RPARENT )
LBRACE {
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_unary_exp
LPARENT (
RPARENT )
LBRACE {
INTCON 0
SEMICN ;
IDENFR test_func_int
LPARENT (
INTCON 0
RPARENT )
SEMICN ;
IDENFR test_func_int
LPARENT (
IDENFR int_b2
LBRACK [
INTCON 0
RPARENT )
SEMICN ;
IDENFR test_func_int_arr
LPARENT (
IDENFR int_b2
RPARENT )
SEMICN ;
IDENFR test_func_mul_int
LPARENT (
INTCON 0
COMMA ,
INTCON 1
RPARENT )
SEMICN ;
PLUS +
INTCON 1
MINU -
INTCON 1
SEMICN ;
IFTK if
LPARENT (
NOT !
INTCON 1
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "test_unary_exp success!\n"
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_Lexp
LPARENT (
RPARENT )
LBRACE {
INTCON 1
IFTK if
LPARENT (
INTCON 1
AND &&
INTCON 1
IFTK if
LPARENT (
INTCON 1
OR ||
INTCON 1
RPARENT )
IFTK if
LPARENT (
INTCON 1
ERROR_AND &
INTCON 1
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test
LPARENT (
RPARENT )
LBRACE {
IDENFR test_stmt_1_3
LPARENT (
IDENFR test_stmt_for_break_continue
LPARENT (
SEMICN ;
IDENFR test_stmt_getint_getchar_printf
LPARENT (
RPARENT )
RBRACE }
INTTK int
MAINTK main
LPARENT (
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "22371236\n"
RPARENT )
SEMICN ;
IDENFR test
LPARENT (
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
VOIDTK void
IDENFR print_int_arr
LPARENT (
INTTK int
IDENFR arr
LBRACK [
COMMA ,
INTTK int
IDENFR n
LBRACE {
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
IDENFR n
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "%d "
COMMA ,
IDENFR arr
LBRACK [
IDENFR i
RPARENT )
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "\n"
RPARENT )
SEMICN ;
RETURNTK return
RBRACE }
VOIDTK void
IDENFR test_stmt_for_break_continue
LPARENT (
LBRACE {
CONTINUETK continue
BREAKTK break
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_stmt_getint_getchar_printf
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
CHARTK char
IDENFR ch
ASSIGN =
CHRCON 'a'
IDENFR a
ASSIGN =
GETINTTK getint
LPARENT (
SEMICN ;
IDENFR ch
ASSIGN =
GETCHARTK getchar
LPARENT (
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "test_stmt_getint_getchar_printf"
PRINTFTK printf
LPARENT (
STRCON "%c%c%c%c%c%c%c\n"
COMMA ,
CHRCON 's'
COMMA ,
CHRCON 'u'
COMMA ,
CHRCON 'c'
COMMA ,
CHRCON 'c'
COMMA ,
CHRCON 'e'
COMMA ,
CHRCON 's'
COMMA ,
CHRCON 's'
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_block
LPARENT (
RPARENT )
LBRACE {
LBRACE {
RBRACE }
LBRACE {
RBRACE }
RETURNTK return
SEMICN ;
RBRACE }
INTTK int
IDENFR add_int
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
LBRACE {
RETURNTK return
IDENFR a
PLUS +
IDENFR b
RBRACE }
CHARTK char
IDENFR read_char
LPARENT (
CHARTK char
IDENFR ch
RPARENT )
LBRACE {
SEMICN ;
RETURNTK return
IDENFR ch
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_Lval_exp
LPARENT (
RPARENT )
LBRACE {
IDENFR const_int_a
IDENFR char_a
IDENFR char_b2
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "test_Lval_exp success!\n"
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_primary_exp
LPARENT (
RPARENT )
LBRACE {
LPARENT (
INTCON 1
RPARENT )
SEMICN ;
IDENFR char_a
SEMICN ;
INTCON 1
SEMICN ;
CHRCON 'a'
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "test_primary_exp success!\n"
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_func_int_arr
LPARENT (
INTTK int
IDENFR a
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
IDENFR a
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
IDENFR a
LBRACK [
INTCON 0
SEMICN ;
IDENFR a
LBRACK [
INTCON 0
RBRACK ]
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_func_mul_int
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
RPARENT )
LBRACE {
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_unary_exp
LPARENT (
RPARENT )
LBRACE {
INTCON 0
SEMICN ;
IDENFR test_func_int
LPARENT (
INTCON 0
RPARENT )
SEMICN ;
IDENFR test_func_int
LPARENT (
IDENFR int_b2
LBRACK [
INTCON 0
RPARENT )
SEMICN ;
IDENFR test_func_int_arr
LPARENT (
IDENFR int_b2
RPARENT )
SEMICN ;
IDENFR test_func_mul_int
LPARENT (
INTCON 0
COMMA ,
INTCON 1
RPARENT )
SEMICN ;
PLUS +
INTCON 1
MINU -
INTCON 1
SEMICN ;
IFTK if
LPARENT (
NOT !
INTCON 1
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "test_unary_exp success!\n"
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_Lexp
LPARENT (
RPARENT )
LBRACE {
INTCON 1
IFTK if
LPARENT (
INTCON 1
AND &&
INTCON 1
IFTK if
LPARENT (
INTCON 1
OR ||
INTCON 1
RPARENT )
IFTK if
LPARENT (
INTCON 1
ERROR_AND &
INTCON 1
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test
LPARENT (
RPARENT )
LBRACE {
IDENFR test_stmt_1_3
LPARENT (
IDENFR test_stmt_for_break_continue
LPARENT (
SEMICN ;
IDENFR test_stmt_getint_getchar_printf
LPARENT (
RPARENT )
RBRACE }
INTTK int
MAINTK main
LPARENT (
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "22371236\n"
RPARENT )
SEMICN ;
IDENFR test
LPARENT (
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
VOIDTK void
IDENFR print_int_arr
LPARENT (
INTTK int
IDENFR arr
LBRACK [
COMMA ,
INTTK int
IDENFR n
LBRACE {
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
IDENFR n
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "%d "
COMMA ,
IDENFR arr
LBRACK [
IDENFR i
RPARENT )
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "\n"
RPARENT )
SEMICN ;
RETURNTK return
RBRACE }
VOIDTK void
IDENFR test_stmt_for_break_continue
LPARENT (
LBRACE {
CONTINUETK continue
BREAKTK break
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_stmt_getint_getchar_printf
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
CHARTK char
IDENFR ch
ASSIGN =
CHRCON 'a'
IDENFR a
ASSIGN =
GETINTTK getint
LPARENT (
SEMICN ;
IDENFR ch
ASSIGN =
GETCHARTK getchar
LPARENT (
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "test_stmt_getint_getchar_printf"
PRINTFTK printf
LPARENT (
STRCON "%c%c%c%c%c%c%c\n"
COMMA ,
CHRCON 's'
COMMA ,
CHRCON 'u'
COMMA ,
CHRCON 'c'
COMMA ,
CHRCON 'c'
COMMA ,
CHRCON 'e'
COMMA ,
CHRCON 's'
COMMA ,
CHRCON 's'
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_block
LPARENT (
RPARENT )
LBRACE {
LBRACE {
RBRACE }
LBRACE {
RBRACE }
RETURNTK return
SEMICN ;
RBRACE }
INTTK int
IDENFR add_int
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
LBRACE {
RETURNTK return
IDENFR a
PLUS +
IDENFR b
RBRACE }
CHARTK char
IDENFR read_char
LPARENT (
CHARTK char
IDENFR ch
RPARENT )
LBRACE {
SEMICN ;
RETURNTK return
IDENFR ch
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_Lval_exp
LPARENT (
RPARENT )
LBRACE {
IDENFR const_int_a
IDENFR char_a
IDENFR char_b2
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "test_Lval_exp success!\n"
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_primary_exp
LPARENT (
RPARENT )
LBRACE {
LPARENT (
INTCON 1
RPARENT )
SEMICN ;
IDENFR char_a
SEMICN ;
INTCON 1
SEMICN ;
CHRCON 'a'
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "test_primary_exp success!\n"
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_func_int_arr
LPARENT (
INTTK int
IDENFR a
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
IDENFR a
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
IDENFR a
LBRACK [
INTCON 0
SEMICN ;
IDENFR a
LBRACK [
INTCON 0
RBRACK ]
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_func_mul_int
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
RPARENT )
LBRACE {
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_unary_exp
LPARENT (
RPARENT )
LBRACE {
INTCON 0
SEMICN ;
IDENFR test_func_int
LPARENT (
INTCON 0
RPARENT )
SEMICN ;
IDENFR test_func_int
LPARENT (
IDENFR int_b2
LBRACK [
INTCON 0
RPARENT )
SEMICN ;
IDENFR test_func_int_arr
LPARENT (
IDENFR int_b2
RPARENT )
SEMICN ;
IDENFR test_func_mul_int
LPARENT (
INTCON 0
COMMA ,
INTCON 1
RPARENT )
SEMICN ;
PLUS +
INTCON 1
MINU -
INTCON 1
SEMICN ;
IFTK if
LPARENT (
NOT !
INTCON 1
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "test_unary_exp success!\n"
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_Lexp
LPARENT (
RPARENT )
LBRACE {
INTCON 1
IFTK if
LPARENT (
INTCON 1
AND &&
INTCON 1
IFTK if
LPARENT (
INTCON 1
OR ||
INTCON 1
RPARENT )
IFTK if
LPARENT (
INTCON 1
ERROR_AND &
INTCON 1
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test
LPARENT (
RPARENT )
LBRACE {
IDENFR test_stmt_1_3
LPARENT (
IDENFR test_stmt_for_break_continue
LPARENT (
SEMICN ;
IDENFR test_stmt_getint_getchar_printf
LPARENT (
RPARENT )
RBRACE }
INTTK int
MAINTK main
LPARENT (
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "22371236\n"
RPARENT )
SEMICN ;
IDENFR test
LPARENT (
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_Lexp
LPARENT (
RPARENT )
LBRACE {
INTCON 1
IFTK if
LPARENT (
INTCON 1
AND &&
INTCON 1
IFTK if
LPARENT (
INTCON 1
OR ||
INTCON 1
RPARENT )
IFTK if
LPARENT (
INTCON 1
ERROR_AND &
INTCON 1
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test
LPARENT (
RPARENT )
LBRACE {
IDENFR test_stmt_1_3
LPARENT (
IDENFR test_stmt_for_break_continue
LPARENT (
SEMICN ;
IDENFR test_stmt_getint_getchar_printf
LPARENT (
RPARENT )
RBRACE }
INTTK int
MAINTK main
LPARENT (
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "22371236\n"
RPARENT )
SEMICN ;
IDENFR test
LPARENT (
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_Lexp
LPARENT (
RPARENT )
LBRACE {
INTCON 1
IFTK if
LPARENT (
INTCON 1
AND &&
INTCON 1
IFTK if
LPARENT (
INTCON 1
OR ||
INTCON 1
RPARENT )
IFTK if
LPARENT (
INTCON 1
ERROR_AND &
INTCON 1
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test
LPARENT (
RPARENT )
LBRACE {
IDENFR test_stmt_1_3
LPARENT (
IDENFR test_stmt_for_break_continue
LPARENT (
SEMICN ;
IDENFR test_stmt_getint_getchar_printf
LPARENT (
RPARENT )
RBRACE }
INTTK int
MAINTK main
LPARENT (
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "22371236\n"
RPARENT )
SEMICN ;
IDENFR test
LPARENT (
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_Lexp
LPARENT (
RPARENT )
LBRACE {
INTCON 1
IFTK if
LPARENT (
INTCON 1
AND &&
INTCON 1
IFTK if
LPARENT (
INTCON 1
OR ||
INTCON 1
RPARENT )
IFTK if
LPARENT (
INTCON 1
ERROR_AND &
INTCON 1
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test
LPARENT (
RPARENT )
LBRACE {
IDENFR test_stmt_1_3
LPARENT (
IDENFR test_stmt_for_break_continue
LPARENT (
SEMICN ;
IDENFR test_stmt_getint_getchar_printf
LPARENT (
RPARENT )
RBRACE }
INTTK int
MAINTK main
LPARENT (
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "22371236\n"
RPARENT )
SEMICN ;
IDENFR test
LPARENT (
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_Lexp
LPARENT (
RPARENT )
LBRACE {
INTCON 1
IFTK if
LPARENT (
INTCON 1
AND &&
INTCON 1
IFTK if
LPARENT (
INTCON 1
OR ||
INTCON 1
RPARENT )
IFTK if
LPARENT (
INTCON 1
ERROR_AND &
INTCON 1
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test
LPARENT (
RPARENT )
LBRACE {
IDENFR test_stmt_1_3
LPARENT (
IDENFR test_stmt_for_break_continue
LPARENT (
SEMICN ;
IDENFR test_stmt_getint_getchar_printf
LPARENT (
RPARENT )
RBRACE }
INTTK int
MAINTK main
LPARENT (
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "22371236\n"
RPARENT )
SEMICN ;
IDENFR test
LPARENT (
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_Lexp
LPARENT (
RPARENT )
LBRACE {
INTCON 1
IFTK if
LPARENT (
INTCON 1
AND &&
INTCON 1
IFTK if
LPARENT (
INTCON 1
OR ||
INTCON 1
RPARENT )
IFTK if
LPARENT (
INTCON 1
AND &&
INTCON 1
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test
LPARENT (
RPARENT )
LBRACE {
IDENFR test_stmt_1_3
LPARENT (
IDENFR test_stmt_for_break_continue
LPARENT (
SEMICN ;
IDENFR test_stmt_getint_getchar_printf
LPARENT (
RPARENT )
RBRACE }
INTTK int
MAINTK main
LPARENT (
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "22371236\n"
RPARENT )
SEMICN ;
IDENFR test
LPARENT (
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_Lexp
LPARENT (
RPARENT )
LBRACE {
INTCON 1
IFTK if
LPARENT (
INTCON 1
AND &&
INTCON 1
IFTK if
LPARENT (
INTCON 1
OR ||
INTCON 1
RPARENT )
IFTK if
LPARENT (
INTCON 1
AND &&
INTCON 1
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test
LPARENT (
RPARENT )
LBRACE {
IDENFR test_stmt_1_3
LPARENT (
IDENFR test_stmt_for_break_continue
LPARENT (
SEMICN ;
IDENFR test_stmt_getint_getchar_printf
LPARENT (
RPARENT )
RBRACE }
INTTK int
MAINTK main
LPARENT (
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "22371236\n"
RPARENT )
SEMICN ;
IDENFR test
LPARENT (
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_Lexp
LPARENT (
RPARENT )
LBRACE {
INTCON 1
IFTK if
LPARENT (
INTCON 1
AND &&
INTCON 1
IFTK if
LPARENT (
INTCON 1
OR ||
INTCON 1
RPARENT )
IFTK if
LPARENT (
INTCON 1
AND &&
INTCON 1
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test
LPARENT (
RPARENT )
LBRACE {
IDENFR test_stmt_1_3
LPARENT (
IDENFR test_stmt_for_break_continue
LPARENT (
SEMICN ;
IDENFR test_stmt_getint_getchar_printf
LPARENT (
RPARENT )
RBRACE }
INTTK int
MAINTK main
LPARENT (
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "22371236\n"
RPARENT )
SEMICN ;
IDENFR test
LPARENT (
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "22371236\n"
RPARENT )
SEMICN ;
IDENFR test
LPARENT (
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "22371236\n"
RPARENT )
SEMICN ;
IDENFR test
LPARENT (
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "22371236\n"
RPARENT )
SEMICN ;
IDENFR test
LPARENT (
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
CONSTTK const
INTTK int
IDENFR const_int_a
ASSIGN =
INTCON 0
CONSTTK const
INTTK int
IDENFR const_int_b1
ASSIGN =
INTCON 1
COMMA ,
IDENFR const_int_b2
LBRACK [
INTCON 5
ASSIGN =
LBRACE {
INTCON 0
COMMA ,
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
COMMA ,
INTCON 4
RBRACE }
CONSTTK const
CHARTK char
IDENFR str
LBRACK [
INTCON 10
ASSIGN =
STRCON "hello!"
CHARTK char
IDENFR char_a
ASSIGN =
CHRCON 'a'
CHARTK char
IDENFR char_b1
ASSIGN =
CHRCON 'b'
COMMA ,
IDENFR char_b2
LBRACK [
INTCON 5
ASSIGN =
LBRACE {
CHRCON 'a'
COMMA ,
CHRCON 'b'
COMMA ,
CHRCON 'c'
COMMA ,
CHRCON 'd'
COMMA ,
CHRCON 'e'
RBRACE }
COMMA ,
IDENFR char_b3
LBRACK [
INTCON 10
ASSIGN =
STRCON "world!"
INTTK int
IDENFR int_b2
LBRACK [
INTCON 5
RBRACK ]
SEMICN ;
VOIDTK void
IDENFR print_int_arr
LPARENT (
INTTK int
IDENFR arr
LBRACK [
COMMA ,
INTTK int
IDENFR n
LBRACE {
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
IDENFR n
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "%d "
COMMA ,
IDENFR arr
LBRACK [
IDENFR i
RPARENT )
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "\n"
RPARENT )
SEMICN ;
RETURNTK return
RBRACE }
VOIDTK void
IDENFR test_stmt_for_break_continue
LPARENT (
LBRACE {
CONTINUETK continue
BREAKTK break
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_stmt_getint_getchar_printf
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
CHARTK char
IDENFR ch
ASSIGN =
CHRCON 'a'
IDENFR a
ASSIGN =
GETINTTK getint
LPARENT (
SEMICN ;
IDENFR ch
ASSIGN =
GETCHARTK getchar
LPARENT (
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "test_stmt_getint_getchar_printf"
PRINTFTK printf
LPARENT (
STRCON "%c%c%c%c%c%c%c\n"
COMMA ,
CHRCON 's'
COMMA ,
CHRCON 'u'
COMMA ,
CHRCON 'c'
COMMA ,
CHRCON 'c'
COMMA ,
CHRCON 'e'
COMMA ,
CHRCON 's'
COMMA ,
CHRCON 's'
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_block
LPARENT (
RPARENT )
LBRACE {
LBRACE {
RBRACE }
LBRACE {
RBRACE }
RETURNTK return
SEMICN ;
RBRACE }
INTTK int
IDENFR add_int
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
LBRACE {
RETURNTK return
IDENFR a
PLUS +
IDENFR b
RBRACE }
CHARTK char
IDENFR read_char
LPARENT (
CHARTK char
IDENFR ch
RPARENT )
LBRACE {
SEMICN ;
RETURNTK return
IDENFR ch
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_Lval_exp
LPARENT (
RPARENT )
LBRACE {
IDENFR const_int_a
IDENFR char_a
IDENFR char_b2
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "test_Lval_exp success!\n"
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_primary_exp
LPARENT (
RPARENT )
LBRACE {
LPARENT (
INTCON 1
RPARENT )
SEMICN ;
IDENFR char_a
SEMICN ;
INTCON 1
SEMICN ;
CHRCON 'a'
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "test_primary_exp success!\n"
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_func_int_arr
LPARENT (
INTTK int
IDENFR a
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
IDENFR a
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
IDENFR a
LBRACK [
INTCON 0
SEMICN ;
IDENFR a
LBRACK [
INTCON 0
RBRACK ]
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_func_mul_int
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
RPARENT )
LBRACE {
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_unary_exp
LPARENT (
RPARENT )
LBRACE {
INTCON 0
SEMICN ;
IDENFR test_func_int
LPARENT (
INTCON 0
RPARENT )
SEMICN ;
IDENFR test_func_int
LPARENT (
IDENFR int_b2
LBRACK [
INTCON 0
RPARENT )
SEMICN ;
IDENFR test_func_int_arr
LPARENT (
IDENFR int_b2
RPARENT )
SEMICN ;
IDENFR test_func_mul_int
LPARENT (
INTCON 0
COMMA ,
INTCON 1
RPARENT )
SEMICN ;
PLUS +
INTCON 1
MINU -
INTCON 1
SEMICN ;
IFTK if
LPARENT (
NOT !
INTCON 1
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "test_unary_exp success!\n"
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_Lexp
LPARENT (
RPARENT )
LBRACE {
INTCON 1
IFTK if
LPARENT (
INTCON 1
AND &&
INTCON 1
IFTK if
LPARENT (
INTCON 1
OR ||
INTCON 1
RPARENT )
IFTK if
LPARENT (
INTCON 1
AND &&
INTCON 1
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test
LPARENT (
RPARENT )
LBRACE {
IDENFR test_stmt_1_3
LPARENT (
IDENFR test_stmt_for_break_continue
LPARENT (
SEMICN ;
IDENFR test_stmt_getint_getchar_printf
LPARENT (
RPARENT )
RBRACE }
INTTK int
MAINTK main
LPARENT (
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "22371236\n"
RPARENT )
SEMICN ;
IDENFR test
LPARENT (
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
CONSTTK const
INTTK int
IDENFR const_int_a
ASSIGN =
INTCON 0
CONSTTK const
INTTK int
IDENFR const_int_b1
ASSIGN =
INTCON 1
COMMA ,
IDENFR const_int_b2
LBRACK [
INTCON 5
ASSIGN =
LBRACE {
INTCON 0
COMMA ,
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
COMMA ,
INTCON 4
RBRACE }
CONSTTK const
CHARTK char
IDENFR str
LBRACK [
INTCON 10
ASSIGN =
STRCON "hello!"
CHARTK char
IDENFR char_a
ASSIGN =
CHRCON 'a'
CHARTK char
IDENFR char_b1
ASSIGN =
CHRCON 'b'
COMMA ,
IDENFR char_b2
LBRACK [
INTCON 5
ASSIGN =
LBRACE {
CHRCON 'a'
COMMA ,
CHRCON 'b'
COMMA ,
CHRCON 'c'
COMMA ,
CHRCON 'd'
COMMA ,
CHRCON 'e'
RBRACE }
COMMA ,
IDENFR char_b3
LBRACK [
INTCON 10
ASSIGN =
STRCON "world!"
INTTK int
IDENFR int_b2
LBRACK [
INTCON 5
RBRACK ]
SEMICN ;
VOIDTK void
IDENFR print_int_arr
LPARENT (
INTTK int
IDENFR arr
LBRACK [
COMMA ,
INTTK int
IDENFR n
LBRACE {
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
IDENFR n
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "%d "
COMMA ,
IDENFR arr
LBRACK [
IDENFR i
RPARENT )
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "\n"
RPARENT )
SEMICN ;
RETURNTK return
RBRACE }
VOIDTK void
IDENFR test_stmt_for_break_continue
LPARENT (
LBRACE {
CONTINUETK continue
BREAKTK break
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_stmt_getint_getchar_printf
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
CHARTK char
IDENFR ch
ASSIGN =
CHRCON 'a'
IDENFR a
ASSIGN =
GETINTTK getint
LPARENT (
SEMICN ;
IDENFR ch
ASSIGN =
GETCHARTK getchar
LPARENT (
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "test_stmt_getint_getchar_printf"
PRINTFTK printf
LPARENT (
STRCON "%c%c%c%c%c%c%c\n"
COMMA ,
CHRCON 's'
COMMA ,
CHRCON 'u'
COMMA ,
CHRCON 'c'
COMMA ,
CHRCON 'c'
COMMA ,
CHRCON 'e'
COMMA ,
CHRCON 's'
COMMA ,
CHRCON 's'
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_block
LPARENT (
RPARENT )
LBRACE {
LBRACE {
RBRACE }
LBRACE {
RBRACE }
RETURNTK return
SEMICN ;
RBRACE }
INTTK int
IDENFR add_int
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
LBRACE {
RETURNTK return
IDENFR a
PLUS +
IDENFR b
RBRACE }
CHARTK char
IDENFR read_char
LPARENT (
CHARTK char
IDENFR ch
RPARENT )
LBRACE {
SEMICN ;
RETURNTK return
IDENFR ch
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_Lval_exp
LPARENT (
RPARENT )
LBRACE {
IDENFR const_int_a
IDENFR char_a
IDENFR char_b2
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "test_Lval_exp success!\n"
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_primary_exp
LPARENT (
RPARENT )
LBRACE {
LPARENT (
INTCON 1
RPARENT )
SEMICN ;
IDENFR char_a
SEMICN ;
INTCON 1
SEMICN ;
CHRCON 'a'
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "test_primary_exp success!\n"
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_func_int_arr
LPARENT (
INTTK int
IDENFR a
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
IDENFR a
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
IDENFR a
LBRACK [
INTCON 0
SEMICN ;
IDENFR a
LBRACK [
INTCON 0
RBRACK ]
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_func_mul_int
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
RPARENT )
LBRACE {
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_unary_exp
LPARENT (
RPARENT )
LBRACE {
INTCON 0
SEMICN ;
IDENFR test_func_int
LPARENT (
INTCON 0
RPARENT )
SEMICN ;
IDENFR test_func_int
LPARENT (
IDENFR int_b2
LBRACK [
INTCON 0
RPARENT )
SEMICN ;
IDENFR test_func_int_arr
LPARENT (
IDENFR int_b2
RPARENT )
SEMICN ;
IDENFR test_func_mul_int
LPARENT (
INTCON 0
COMMA ,
INTCON 1
RPARENT )
SEMICN ;
PLUS +
INTCON 1
MINU -
INTCON 1
SEMICN ;
IFTK if
LPARENT (
NOT !
INTCON 1
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "test_unary_exp success!\n"
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_Lexp
LPARENT (
RPARENT )
LBRACE {
INTCON 1
IFTK if
LPARENT (
INTCON 1
AND &&
INTCON 1
IFTK if
LPARENT (
INTCON 1
OR ||
INTCON 1
RPARENT )
IFTK if
LPARENT (
INTCON 1
AND &&
INTCON 1
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test
LPARENT (
RPARENT )
LBRACE {
IDENFR test_stmt_1_3
LPARENT (
IDENFR test_stmt_for_break_continue
LPARENT (
SEMICN ;
IDENFR test_stmt_getint_getchar_printf
LPARENT (
RPARENT )
RBRACE }
INTTK int
MAINTK main
LPARENT (
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "22371236\n"
RPARENT )
SEMICN ;
IDENFR test
LPARENT (
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
CONSTTK const
INTTK int
IDENFR const_int_a
ASSIGN =
INTCON 0
CONSTTK const
INTTK int
IDENFR const_int_b1
ASSIGN =
INTCON 1
COMMA ,
IDENFR const_int_b2
LBRACK [
INTCON 5
ASSIGN =
LBRACE {
INTCON 0
COMMA ,
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
COMMA ,
INTCON 4
RBRACE }
CONSTTK const
CHARTK char
IDENFR str
LBRACK [
INTCON 10
ASSIGN =
STRCON "hello!"
CHARTK char
IDENFR char_a
ASSIGN =
CHRCON 'a'
CHARTK char
IDENFR char_b1
ASSIGN =
CHRCON 'b'
COMMA ,
IDENFR char_b2
LBRACK [
INTCON 5
ASSIGN =
LBRACE {
CHRCON 'a'
COMMA ,
CHRCON 'b'
COMMA ,
CHRCON 'c'
COMMA ,
CHRCON 'd'
COMMA ,
CHRCON 'e'
RBRACE }
COMMA ,
IDENFR char_b3
LBRACK [
INTCON 10
ASSIGN =
STRCON "world!"
INTTK int
IDENFR int_b2
LBRACK [
INTCON 5
RBRACK ]
SEMICN ;
VOIDTK void
IDENFR print_int_arr
LPARENT (
INTTK int
IDENFR arr
LBRACK [
COMMA ,
INTTK int
IDENFR n
LBRACE {
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
IDENFR n
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "%d "
COMMA ,
IDENFR arr
LBRACK [
IDENFR i
RPARENT )
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "\n"
RPARENT )
SEMICN ;
RETURNTK return
RBRACE }
VOIDTK void
IDENFR test_stmt_for_break_continue
LPARENT (
LBRACE {
CONTINUETK continue
BREAKTK break
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_stmt_getint_getchar_printf
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
CHARTK char
IDENFR ch
ASSIGN =
CHRCON 'a'
IDENFR a
ASSIGN =
GETINTTK getint
LPARENT (
SEMICN ;
IDENFR ch
ASSIGN =
GETCHARTK getchar
LPARENT (
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "test_stmt_getint_getchar_printf"
PRINTFTK printf
LPARENT (
STRCON "%c%c%c%c%c%c%c\n"
COMMA ,
CHRCON 's'
COMMA ,
CHRCON 'u'
COMMA ,
CHRCON 'c'
COMMA ,
CHRCON 'c'
COMMA ,
CHRCON 'e'
COMMA ,
CHRCON 's'
COMMA ,
CHRCON 's'
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_block
LPARENT (
RPARENT )
LBRACE {
LBRACE {
RBRACE }
LBRACE {
RBRACE }
RETURNTK return
SEMICN ;
RBRACE }
INTTK int
IDENFR add_int
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
LBRACE {
RETURNTK return
IDENFR a
PLUS +
IDENFR b
RBRACE }
CHARTK char
IDENFR read_char
LPARENT (
CHARTK char
IDENFR ch
RPARENT )
LBRACE {
SEMICN ;
RETURNTK return
IDENFR ch
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_Lval_exp
LPARENT (
RPARENT )
LBRACE {
IDENFR const_int_a
IDENFR char_a
IDENFR char_b2
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "test_Lval_exp success!\n"
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_primary_exp
LPARENT (
RPARENT )
LBRACE {
LPARENT (
INTCON 1
RPARENT )
SEMICN ;
IDENFR char_a
SEMICN ;
INTCON 1
SEMICN ;
CHRCON 'a'
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "test_primary_exp success!\n"
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_func_int_arr
LPARENT (
INTTK int
IDENFR a
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
IDENFR a
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
IDENFR a
LBRACK [
INTCON 0
SEMICN ;
IDENFR a
LBRACK [
INTCON 0
RBRACK ]
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_func_mul_int
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
RPARENT )
LBRACE {
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_unary_exp
LPARENT (
RPARENT )
LBRACE {
INTCON 0
SEMICN ;
IDENFR test_func_int
LPARENT (
INTCON 0
RPARENT )
SEMICN ;
IDENFR test_func_int
LPARENT (
IDENFR int_b2
LBRACK [
INTCON 0
RPARENT )
SEMICN ;
IDENFR test_func_int_arr
LPARENT (
IDENFR int_b2
RPARENT )
SEMICN ;
IDENFR test_func_mul_int
LPARENT (
INTCON 0
COMMA ,
INTCON 1
RPARENT )
SEMICN ;
PLUS +
INTCON 1
MINU -
INTCON 1
SEMICN ;
IFTK if
LPARENT (
NOT !
INTCON 1
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "test_unary_exp success!\n"
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_Lexp
LPARENT (
RPARENT )
LBRACE {
INTCON 1
IFTK if
LPARENT (
INTCON 1
AND &&
INTCON 1
IFTK if
LPARENT (
INTCON 1
OR ||
INTCON 1
RPARENT )
IFTK if
LPARENT (
INTCON 1
AND &&
INTCON 1
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test
LPARENT (
RPARENT )
LBRACE {
IDENFR test_stmt_1_3
LPARENT (
IDENFR test_stmt_for_break_continue
LPARENT (
SEMICN ;
IDENFR test_stmt_getint_getchar_printf
LPARENT (
RPARENT )
RBRACE }
INTTK int
MAINTK main
LPARENT (
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "22371236\n"
RPARENT )
SEMICN ;
IDENFR test
LPARENT (
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
CONSTTK const
INTTK int
IDENFR const_int_a
ASSIGN =
INTCON 0
CONSTTK const
INTTK int
IDENFR const_int_b1
ASSIGN =
INTCON 1
COMMA ,
IDENFR const_int_b2
LBRACK [
INTCON 5
ASSIGN =
LBRACE {
INTCON 0
COMMA ,
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
COMMA ,
INTCON 4
RBRACE }
CONSTTK const
CHARTK char
IDENFR str
LBRACK [
INTCON 10
ASSIGN =
STRCON "hello!"
CHARTK char
IDENFR char_a
ASSIGN =
CHRCON 'a'
CHARTK char
IDENFR char_b1
ASSIGN =
CHRCON 'b'
COMMA ,
IDENFR char_b2
LBRACK [
INTCON 5
ASSIGN =
LBRACE {
CHRCON 'a'
COMMA ,
CHRCON 'b'
COMMA ,
CHRCON 'c'
COMMA ,
CHRCON 'd'
COMMA ,
CHRCON 'e'
RBRACE }
COMMA ,
IDENFR char_b3
LBRACK [
INTCON 10
ASSIGN =
STRCON "world!"
INTTK int
IDENFR int_b2
LBRACK [
INTCON 5
RBRACK ]
SEMICN ;
VOIDTK void
IDENFR print_int_arr
LPARENT (
INTTK int
IDENFR arr
LBRACK [
COMMA ,
INTTK int
IDENFR n
LBRACE {
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
IDENFR n
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "%d "
COMMA ,
IDENFR arr
LBRACK [
IDENFR i
RPARENT )
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "\n"
RPARENT )
SEMICN ;
RETURNTK return
RBRACE }
VOIDTK void
IDENFR test_stmt_for_break_continue
LPARENT (
LBRACE {
CONTINUETK continue
BREAKTK break
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_stmt_getint_getchar_printf
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
CHARTK char
IDENFR ch
ASSIGN =
CHRCON 'a'
IDENFR a
ASSIGN =
GETINTTK getint
LPARENT (
SEMICN ;
IDENFR ch
ASSIGN =
GETCHARTK getchar
LPARENT (
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "test_stmt_getint_getchar_printf"
PRINTFTK printf
LPARENT (
STRCON "%c%c%c%c%c%c%c\n"
COMMA ,
CHRCON 's'
COMMA ,
CHRCON 'u'
COMMA ,
CHRCON 'c'
COMMA ,
CHRCON 'c'
COMMA ,
CHRCON 'e'
COMMA ,
CHRCON 's'
COMMA ,
CHRCON 's'
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_block
LPARENT (
RPARENT )
LBRACE {
LBRACE {
RBRACE }
LBRACE {
RBRACE }
RETURNTK return
SEMICN ;
RBRACE }
INTTK int
IDENFR add_int
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
LBRACE {
RETURNTK return
IDENFR a
PLUS +
IDENFR b
RBRACE }
CHARTK char
IDENFR read_char
LPARENT (
CHARTK char
IDENFR ch
RPARENT )
LBRACE {
SEMICN ;
RETURNTK return
IDENFR ch
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_Lval_exp
LPARENT (
RPARENT )
LBRACE {
IDENFR const_int_a
IDENFR char_a
IDENFR char_b2
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "test_Lval_exp success!\n"
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_primary_exp
LPARENT (
RPARENT )
LBRACE {
LPARENT (
INTCON 1
RPARENT )
SEMICN ;
IDENFR char_a
SEMICN ;
INTCON 1
SEMICN ;
CHRCON 'a'
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "test_primary_exp success!\n"
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_func_int_arr
LPARENT (
INTTK int
IDENFR a
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
IDENFR a
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
IDENFR a
LBRACK [
INTCON 0
SEMICN ;
IDENFR a
LBRACK [
INTCON 0
RBRACK ]
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_func_mul_int
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
RPARENT )
LBRACE {
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_unary_exp
LPARENT (
RPARENT )
LBRACE {
INTCON 0
SEMICN ;
IDENFR test_func_int
LPARENT (
INTCON 0
RPARENT )
SEMICN ;
IDENFR test_func_int
LPARENT (
IDENFR int_b2
LBRACK [
INTCON 0
RPARENT )
SEMICN ;
IDENFR test_func_int_arr
LPARENT (
IDENFR int_b2
RPARENT )
SEMICN ;
IDENFR test_func_mul_int
LPARENT (
INTCON 0
COMMA ,
INTCON 1
RPARENT )
SEMICN ;
PLUS +
INTCON 1
MINU -
INTCON 1
SEMICN ;
IFTK if
LPARENT (
NOT !
INTCON 1
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "test_unary_exp success!\n"
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_Lexp
LPARENT (
RPARENT )
LBRACE {
INTCON 1
IFTK if
LPARENT (
INTCON 1
AND &&
INTCON 1
IFTK if
LPARENT (
INTCON 1
OR ||
INTCON 1
RPARENT )
IFTK if
LPARENT (
INTCON 1
AND &&
INTCON 1
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test
LPARENT (
RPARENT )
LBRACE {
IDENFR test_stmt_1_3
LPARENT (
IDENFR test_stmt_for_break_continue
LPARENT (
SEMICN ;
IDENFR test_stmt_getint_getchar_printf
LPARENT (
RPARENT )
RBRACE }
INTTK int
MAINTK main
LPARENT (
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "22371236\n"
RPARENT )
SEMICN ;
IDENFR test
LPARENT (
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
CONSTTK const
INTTK int
IDENFR const_int_a
ASSIGN =
INTCON 0
CONSTTK const
INTTK int
IDENFR const_int_b1
ASSIGN =
INTCON 1
COMMA ,
IDENFR const_int_b2
LBRACK [
INTCON 5
ASSIGN =
LBRACE {
INTCON 0
COMMA ,
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
COMMA ,
INTCON 4
RBRACE }
CONSTTK const
CHARTK char
IDENFR str
LBRACK [
INTCON 10
ASSIGN =
STRCON "hello!"
CHARTK char
IDENFR char_a
ASSIGN =
CHRCON 'a'
CHARTK char
IDENFR char_b1
ASSIGN =
CHRCON 'b'
COMMA ,
IDENFR char_b2
LBRACK [
INTCON 5
ASSIGN =
LBRACE {
CHRCON 'a'
COMMA ,
CHRCON 'b'
COMMA ,
CHRCON 'c'
COMMA ,
CHRCON 'd'
COMMA ,
CHRCON 'e'
RBRACE }
COMMA ,
IDENFR char_b3
LBRACK [
INTCON 10
ASSIGN =
STRCON "world!"
INTTK int
IDENFR int_b2
LBRACK [
INTCON 5
RBRACK ]
SEMICN ;
VOIDTK void
IDENFR print_int_arr
LPARENT (
INTTK int
IDENFR arr
LBRACK [
COMMA ,
INTTK int
IDENFR n
LBRACE {
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
IDENFR n
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "%d "
COMMA ,
IDENFR arr
LBRACK [
IDENFR i
RPARENT )
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "\n"
RPARENT )
SEMICN ;
RETURNTK return
RBRACE }
VOIDTK void
IDENFR test_stmt_for_break_continue
LPARENT (
LBRACE {
CONTINUETK continue
BREAKTK break
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_stmt_getint_getchar_printf
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
CHARTK char
IDENFR ch
ASSIGN =
CHRCON 'a'
IDENFR a
ASSIGN =
GETINTTK getint
LPARENT (
SEMICN ;
IDENFR ch
ASSIGN =
GETCHARTK getchar
LPARENT (
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "test_stmt_getint_getchar_printf"
PRINTFTK printf
LPARENT (
STRCON "%c%c%c%c%c%c%c\n"
COMMA ,
CHRCON 's'
COMMA ,
CHRCON 'u'
COMMA ,
CHRCON 'c'
COMMA ,
CHRCON 'c'
COMMA ,
CHRCON 'e'
COMMA ,
CHRCON 's'
COMMA ,
CHRCON 's'
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_block
LPARENT (
RPARENT )
LBRACE {
LBRACE {
RBRACE }
LBRACE {
RBRACE }
RETURNTK return
SEMICN ;
RBRACE }
INTTK int
IDENFR add_int
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
LBRACE {
RETURNTK return
IDENFR a
PLUS +
IDENFR b
RBRACE }
CHARTK char
IDENFR read_char
LPARENT (
CHARTK char
IDENFR ch
RPARENT )
LBRACE {
SEMICN ;
RETURNTK return
IDENFR ch
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_Lval_exp
LPARENT (
RPARENT )
LBRACE {
IDENFR const_int_a
IDENFR char_a
IDENFR char_b2
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "test_Lval_exp success!\n"
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_primary_exp
LPARENT (
RPARENT )
LBRACE {
LPARENT (
INTCON 1
RPARENT )
SEMICN ;
IDENFR char_a
SEMICN ;
INTCON 1
SEMICN ;
CHRCON 'a'
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "test_primary_exp success!\n"
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_func_int_arr
LPARENT (
INTTK int
IDENFR a
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
IDENFR a
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
IDENFR a
LBRACK [
INTCON 0
SEMICN ;
IDENFR a
LBRACK [
INTCON 0
RBRACK ]
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_func_mul_int
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
RPARENT )
LBRACE {
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_unary_exp
LPARENT (
RPARENT )
LBRACE {
INTCON 0
SEMICN ;
IDENFR test_func_int
LPARENT (
INTCON 0
RPARENT )
SEMICN ;
IDENFR test_func_int
LPARENT (
IDENFR int_b2
LBRACK [
INTCON 0
RPARENT )
SEMICN ;
IDENFR test_func_int_arr
LPARENT (
IDENFR int_b2
RPARENT )
SEMICN ;
IDENFR test_func_mul_int
LPARENT (
INTCON 0
COMMA ,
INTCON 1
RPARENT )
SEMICN ;
PLUS +
INTCON 1
MINU -
INTCON 1
SEMICN ;
IFTK if
LPARENT (
NOT !
INTCON 1
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "test_unary_exp success!\n"
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_Lexp
LPARENT (
RPARENT )
LBRACE {
INTCON 1
IFTK if
LPARENT (
INTCON 1
AND &&
INTCON 1
IFTK if
LPARENT (
INTCON 1
OR ||
INTCON 1
RPARENT )
IFTK if
LPARENT (
INTCON 1
AND &&
INTCON 1
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test
LPARENT (
RPARENT )
LBRACE {
IDENFR test_stmt_1_3
LPARENT (
IDENFR test_stmt_for_break_continue
LPARENT (
SEMICN ;
IDENFR test_stmt_getint_getchar_printf
LPARENT (
RPARENT )
RBRACE }
INTTK int
MAINTK main
LPARENT (
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "22371236\n"
RPARENT )
SEMICN ;
IDENFR test
LPARENT (
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
CONSTTK const
INTTK int
IDENFR const_int_a
ASSIGN =
INTCON 0
CONSTTK const
INTTK int
IDENFR const_int_b1
ASSIGN =
INTCON 1
COMMA ,
IDENFR const_int_b2
LBRACK [
INTCON 5
ASSIGN =
LBRACE {
INTCON 0
COMMA ,
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
COMMA ,
INTCON 4
RBRACE }
CONSTTK const
CHARTK char
IDENFR str
LBRACK [
INTCON 10
ASSIGN =
STRCON "hello!"
CHARTK char
IDENFR char_a
ASSIGN =
CHRCON 'a'
CHARTK char
IDENFR char_b1
ASSIGN =
CHRCON 'b'
COMMA ,
IDENFR char_b2
LBRACK [
INTCON 5
ASSIGN =
LBRACE {
CHRCON 'a'
COMMA ,
CHRCON 'b'
COMMA ,
CHRCON 'c'
COMMA ,
CHRCON 'd'
COMMA ,
CHRCON 'e'
RBRACE }
COMMA ,
IDENFR char_b3
LBRACK [
INTCON 10
ASSIGN =
STRCON "world!"
INTTK int
IDENFR int_b2
LBRACK [
INTCON 5
RBRACK ]
SEMICN ;
VOIDTK void
IDENFR print_int_arr
LPARENT (
INTTK int
IDENFR arr
LBRACK [
COMMA ,
INTTK int
IDENFR n
LBRACE {
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
IDENFR n
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "%d "
COMMA ,
IDENFR arr
LBRACK [
IDENFR i
RPARENT )
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "\n"
RPARENT )
SEMICN ;
RETURNTK return
RBRACE }
VOIDTK void
IDENFR test_stmt_for_break_continue
LPARENT (
LBRACE {
CONTINUETK continue
BREAKTK break
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_stmt_getint_getchar_printf
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
CHARTK char
IDENFR ch
ASSIGN =
CHRCON 'a'
IDENFR a
ASSIGN =
GETINTTK getint
LPARENT (
SEMICN ;
IDENFR ch
ASSIGN =
GETCHARTK getchar
LPARENT (
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "test_stmt_getint_getchar_printf"
PRINTFTK printf
LPARENT (
STRCON "%c%c%c%c%c%c%c\n"
COMMA ,
CHRCON 's'
COMMA ,
CHRCON 'u'
COMMA ,
CHRCON 'c'
COMMA ,
CHRCON 'c'
COMMA ,
CHRCON 'e'
COMMA ,
CHRCON 's'
COMMA ,
CHRCON 's'
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_block
LPARENT (
RPARENT )
LBRACE {
LBRACE {
RBRACE }
LBRACE {
RBRACE }
RETURNTK return
SEMICN ;
RBRACE }
INTTK int
IDENFR add_int
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
LBRACE {
RETURNTK return
IDENFR a
PLUS +
IDENFR b
RBRACE }
CHARTK char
IDENFR read_char
LPARENT (
CHARTK char
IDENFR ch
RPARENT )
LBRACE {
SEMICN ;
RETURNTK return
IDENFR ch
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_Lval_exp
LPARENT (
RPARENT )
LBRACE {
IDENFR const_int_a
IDENFR char_a
IDENFR char_b2
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "test_Lval_exp success!\n"
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_primary_exp
LPARENT (
RPARENT )
LBRACE {
LPARENT (
INTCON 1
RPARENT )
SEMICN ;
IDENFR char_a
SEMICN ;
INTCON 1
SEMICN ;
CHRCON 'a'
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "test_primary_exp success!\n"
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_func_int_arr
LPARENT (
INTTK int
IDENFR a
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
IDENFR a
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
IDENFR a
LBRACK [
INTCON 0
SEMICN ;
IDENFR a
LBRACK [
INTCON 0
RBRACK ]
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_func_mul_int
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
RPARENT )
LBRACE {
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_unary_exp
LPARENT (
RPARENT )
LBRACE {
INTCON 0
SEMICN ;
IDENFR test_func_int
LPARENT (
INTCON 0
RPARENT )
SEMICN ;
IDENFR test_func_int
LPARENT (
IDENFR int_b2
LBRACK [
INTCON 0
RPARENT )
SEMICN ;
IDENFR test_func_int_arr
LPARENT (
IDENFR int_b2
RPARENT )
SEMICN ;
IDENFR test_func_mul_int
LPARENT (
INTCON 0
COMMA ,
INTCON 1
RPARENT )
SEMICN ;
PLUS +
INTCON 1
MINU -
INTCON 1
SEMICN ;
IFTK if
LPARENT (
NOT !
INTCON 1
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "test_unary_exp success!\n"
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_Lexp
LPARENT (
RPARENT )
LBRACE {
INTCON 1
IFTK if
LPARENT (
INTCON 1
AND &&
INTCON 1
IFTK if
LPARENT (
INTCON 1
OR ||
INTCON 1
RPARENT )
IFTK if
LPARENT (
INTCON 1
AND &&
INTCON 1
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test
LPARENT (
RPARENT )
LBRACE {
IDENFR test_stmt_1_3
LPARENT (
IDENFR test_stmt_for_break_continue
LPARENT (
SEMICN ;
IDENFR test_stmt_getint_getchar_printf
LPARENT (
RPARENT )
RBRACE }
INTTK int
MAINTK main
LPARENT (
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "22371236\n"
RPARENT )
SEMICN ;
IDENFR test
LPARENT (
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
CONSTTK const
INTTK int
IDENFR const_int_a
ASSIGN =
INTCON 0
CONSTTK const
INTTK int
IDENFR const_int_b1
ASSIGN =
INTCON 1
COMMA ,
IDENFR const_int_b2
LBRACK [
INTCON 5
ASSIGN =
LBRACE {
INTCON 0
COMMA ,
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
COMMA ,
INTCON 4
RBRACE }
CONSTTK const
CHARTK char
IDENFR str
LBRACK [
INTCON 10
ASSIGN =
STRCON "hello!"
CHARTK char
IDENFR char_a
ASSIGN =
CHRCON 'a'
CHARTK char
IDENFR char_b1
ASSIGN =
CHRCON 'b'
COMMA ,
IDENFR char_b2
LBRACK [
INTCON 5
ASSIGN =
LBRACE {
CHRCON 'a'
COMMA ,
CHRCON 'b'
COMMA ,
CHRCON 'c'
COMMA ,
CHRCON 'd'
COMMA ,
CHRCON 'e'
RBRACE }
COMMA ,
IDENFR char_b3
LBRACK [
INTCON 10
ASSIGN =
STRCON "world!"
INTTK int
IDENFR int_b2
LBRACK [
INTCON 5
RBRACK ]
SEMICN ;
VOIDTK void
IDENFR print_int_arr
LPARENT (
INTTK int
IDENFR arr
LBRACK [
COMMA ,
INTTK int
IDENFR n
LBRACE {
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
IDENFR n
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "%d "
COMMA ,
IDENFR arr
LBRACK [
IDENFR i
RPARENT )
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "\n"
RPARENT )
SEMICN ;
RETURNTK return
RBRACE }
VOIDTK void
IDENFR test_stmt_for_break_continue
LPARENT (
LBRACE {
CONTINUETK continue
BREAKTK break
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_stmt_getint_getchar_printf
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
CHARTK char
IDENFR ch
ASSIGN =
CHRCON 'a'
IDENFR a
ASSIGN =
GETINTTK getint
LPARENT (
SEMICN ;
IDENFR ch
ASSIGN =
GETCHARTK getchar
LPARENT (
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "test_stmt_getint_getchar_printf"
PRINTFTK printf
LPARENT (
STRCON "%c%c%c%c%c%c%c\n"
COMMA ,
CHRCON 's'
COMMA ,
CHRCON 'u'
COMMA ,
CHRCON 'c'
COMMA ,
CHRCON 'c'
COMMA ,
CHRCON 'e'
COMMA ,
CHRCON 's'
COMMA ,
CHRCON 's'
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_block
LPARENT (
RPARENT )
LBRACE {
LBRACE {
RBRACE }
LBRACE {
RBRACE }
RETURNTK return
SEMICN ;
RBRACE }
INTTK int
IDENFR add_int
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
LBRACE {
RETURNTK return
IDENFR a
PLUS +
IDENFR b
RBRACE }
CHARTK char
IDENFR read_char
LPARENT (
CHARTK char
IDENFR ch
RPARENT )
LBRACE {
SEMICN ;
RETURNTK return
IDENFR ch
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_Lval_exp
LPARENT (
RPARENT )
LBRACE {
IDENFR const_int_a
IDENFR char_a
IDENFR char_b2
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "test_Lval_exp success!\n"
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_primary_exp
LPARENT (
RPARENT )
LBRACE {
LPARENT (
INTCON 1
RPARENT )
SEMICN ;
IDENFR char_a
SEMICN ;
INTCON 1
SEMICN ;
CHRCON 'a'
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "test_primary_exp success!\n"
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_func_int_arr
LPARENT (
INTTK int
IDENFR a
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
IDENFR a
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
IDENFR a
LBRACK [
INTCON 0
SEMICN ;
IDENFR a
LBRACK [
INTCON 0
RBRACK ]
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_func_mul_int
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
RPARENT )
LBRACE {
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_unary_exp
LPARENT (
RPARENT )
LBRACE {
INTCON 0
SEMICN ;
IDENFR test_func_int
LPARENT (
INTCON 0
RPARENT )
SEMICN ;
IDENFR test_func_int
LPARENT (
IDENFR int_b2
LBRACK [
INTCON 0
RPARENT )
SEMICN ;
IDENFR test_func_int_arr
LPARENT (
IDENFR int_b2
RPARENT )
SEMICN ;
IDENFR test_func_mul_int
LPARENT (
INTCON 0
COMMA ,
INTCON 1
RPARENT )
SEMICN ;
PLUS +
INTCON 1
MINU -
INTCON 1
SEMICN ;
IFTK if
LPARENT (
NOT !
INTCON 1
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "test_unary_exp success!\n"
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_Lexp
LPARENT (
RPARENT )
LBRACE {
INTCON 1
IFTK if
LPARENT (
INTCON 1
AND &&
INTCON 1
IFTK if
LPARENT (
INTCON 1
OR ||
INTCON 1
RPARENT )
IFTK if
LPARENT (
INTCON 1
AND &&
INTCON 1
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test
LPARENT (
RPARENT )
LBRACE {
IDENFR test_stmt_1_3
LPARENT (
IDENFR test_stmt_for_break_continue
LPARENT (
SEMICN ;
IDENFR test_stmt_getint_getchar_printf
LPARENT (
RPARENT )
RBRACE }
INTTK int
MAINTK main
LPARENT (
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "22371236\n"
RPARENT )
SEMICN ;
IDENFR test
LPARENT (
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
CONSTTK const
INTTK int
IDENFR const_int_a
ASSIGN =
INTCON 0
CONSTTK const
INTTK int
IDENFR const_int_b1
ASSIGN =
INTCON 1
COMMA ,
IDENFR const_int_b2
LBRACK [
INTCON 5
ASSIGN =
LBRACE {
INTCON 0
COMMA ,
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
COMMA ,
INTCON 4
RBRACE }
CONSTTK const
CHARTK char
IDENFR str
LBRACK [
INTCON 10
ASSIGN =
STRCON "hello!"
CHARTK char
IDENFR char_a
ASSIGN =
CHRCON 'a'
CHARTK char
IDENFR char_b1
ASSIGN =
CHRCON 'b'
COMMA ,
IDENFR char_b2
LBRACK [
INTCON 5
ASSIGN =
LBRACE {
CHRCON 'a'
COMMA ,
CHRCON 'b'
COMMA ,
CHRCON 'c'
COMMA ,
CHRCON 'd'
COMMA ,
CHRCON 'e'
RBRACE }
COMMA ,
IDENFR char_b3
LBRACK [
INTCON 10
ASSIGN =
STRCON "world!"
INTTK int
IDENFR int_b2
LBRACK [
INTCON 5
RBRACK ]
SEMICN ;
VOIDTK void
IDENFR print_int_arr
LPARENT (
INTTK int
IDENFR arr
LBRACK [
COMMA ,
INTTK int
IDENFR n
LBRACE {
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
IDENFR n
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "%d "
COMMA ,
IDENFR arr
LBRACK [
IDENFR i
RPARENT )
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "\n"
RPARENT )
SEMICN ;
RETURNTK return
RBRACE }
VOIDTK void
IDENFR test_stmt_for_break_continue
LPARENT (
LBRACE {
CONTINUETK continue
BREAKTK break
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_stmt_getint_getchar_printf
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
CHARTK char
IDENFR ch
ASSIGN =
CHRCON 'a'
IDENFR a
ASSIGN =
GETINTTK getint
LPARENT (
SEMICN ;
IDENFR ch
ASSIGN =
GETCHARTK getchar
LPARENT (
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "test_stmt_getint_getchar_printf"
PRINTFTK printf
LPARENT (
STRCON "%c%c%c%c%c%c%c\n"
COMMA ,
CHRCON 's'
COMMA ,
CHRCON 'u'
COMMA ,
CHRCON 'c'
COMMA ,
CHRCON 'c'
COMMA ,
CHRCON 'e'
COMMA ,
CHRCON 's'
COMMA ,
CHRCON 's'
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_block
LPARENT (
RPARENT )
LBRACE {
LBRACE {
RBRACE }
LBRACE {
RBRACE }
RETURNTK return
SEMICN ;
RBRACE }
INTTK int
IDENFR add_int
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
LBRACE {
RETURNTK return
IDENFR a
PLUS +
IDENFR b
RBRACE }
CHARTK char
IDENFR read_char
LPARENT (
CHARTK char
IDENFR ch
RPARENT )
LBRACE {
SEMICN ;
RETURNTK return
IDENFR ch
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_Lval_exp
LPARENT (
RPARENT )
LBRACE {
IDENFR const_int_a
IDENFR char_a
IDENFR char_b2
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "test_Lval_exp success!\n"
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_primary_exp
LPARENT (
RPARENT )
LBRACE {
LPARENT (
INTCON 1
RPARENT )
SEMICN ;
IDENFR char_a
SEMICN ;
INTCON 1
SEMICN ;
CHRCON 'a'
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "test_primary_exp success!\n"
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_func_int_arr
LPARENT (
INTTK int
IDENFR a
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
IDENFR a
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
IDENFR a
LBRACK [
INTCON 0
SEMICN ;
IDENFR a
LBRACK [
INTCON 0
RBRACK ]
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_func_mul_int
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
RPARENT )
LBRACE {
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_unary_exp
LPARENT (
RPARENT )
LBRACE {
INTCON 0
SEMICN ;
IDENFR test_func_int
LPARENT (
INTCON 0
RPARENT )
SEMICN ;
IDENFR test_func_int
LPARENT (
IDENFR int_b2
LBRACK [
INTCON 0
RPARENT )
SEMICN ;
IDENFR test_func_int_arr
LPARENT (
IDENFR int_b2
RPARENT )
SEMICN ;
IDENFR test_func_mul_int
LPARENT (
INTCON 0
COMMA ,
INTCON 1
RPARENT )
SEMICN ;
PLUS +
INTCON 1
MINU -
INTCON 1
SEMICN ;
IFTK if
LPARENT (
NOT !
INTCON 1
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "test_unary_exp success!\n"
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_Lexp
LPARENT (
RPARENT )
LBRACE {
INTCON 1
IFTK if
LPARENT (
INTCON 1
AND &&
INTCON 1
IFTK if
LPARENT (
INTCON 1
OR ||
INTCON 1
RPARENT )
IFTK if
LPARENT (
INTCON 1
AND &&
INTCON 1
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test
LPARENT (
RPARENT )
LBRACE {
IDENFR test_stmt_1_3
LPARENT (
IDENFR test_stmt_for_break_continue
LPARENT (
SEMICN ;
IDENFR test_stmt_getint_getchar_printf
LPARENT (
RPARENT )
RBRACE }
INTTK int
MAINTK main
LPARENT (
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "22371236\n"
RPARENT )
SEMICN ;
IDENFR test
LPARENT (
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
CONSTTK const
INTTK int
IDENFR const_int_a
ASSIGN =
INTCON 0
CONSTTK const
INTTK int
IDENFR const_int_b1
ASSIGN =
INTCON 1
COMMA ,
IDENFR const_int_b2
LBRACK [
INTCON 5
ASSIGN =
LBRACE {
INTCON 0
COMMA ,
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
COMMA ,
INTCON 4
RBRACE }
CONSTTK const
CHARTK char
IDENFR str
LBRACK [
INTCON 10
ASSIGN =
STRCON "hello!"
CHARTK char
IDENFR char_a
ASSIGN =
CHRCON 'a'
CHARTK char
IDENFR char_b1
ASSIGN =
CHRCON 'b'
COMMA ,
IDENFR char_b2
LBRACK [
INTCON 5
ASSIGN =
LBRACE {
CHRCON 'a'
COMMA ,
CHRCON 'b'
COMMA ,
CHRCON 'c'
COMMA ,
CHRCON 'd'
COMMA ,
CHRCON 'e'
RBRACE }
COMMA ,
IDENFR char_b3
LBRACK [
INTCON 10
ASSIGN =
STRCON "world!"
INTTK int
IDENFR int_b2
LBRACK [
INTCON 5
RBRACK ]
SEMICN ;
VOIDTK void
IDENFR print_int_arr
LPARENT (
INTTK int
IDENFR arr
LBRACK [
COMMA ,
INTTK int
IDENFR n
LBRACE {
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
IDENFR n
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "%d "
COMMA ,
IDENFR arr
LBRACK [
IDENFR i
RPARENT )
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "\n"
RPARENT )
SEMICN ;
RETURNTK return
RBRACE }
VOIDTK void
IDENFR test_stmt_for_break_continue
LPARENT (
LBRACE {
CONTINUETK continue
BREAKTK break
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_stmt_getint_getchar_printf
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
CHARTK char
IDENFR ch
ASSIGN =
CHRCON 'a'
IDENFR a
ASSIGN =
GETINTTK getint
LPARENT (
SEMICN ;
IDENFR ch
ASSIGN =
GETCHARTK getchar
LPARENT (
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "test_stmt_getint_getchar_printf"
PRINTFTK printf
LPARENT (
STRCON "%c%c%c%c%c%c%c\n"
COMMA ,
CHRCON 's'
COMMA ,
CHRCON 'u'
COMMA ,
CHRCON 'c'
COMMA ,
CHRCON 'c'
COMMA ,
CHRCON 'e'
COMMA ,
CHRCON 's'
COMMA ,
CHRCON 's'
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_block
LPARENT (
RPARENT )
LBRACE {
LBRACE {
RBRACE }
LBRACE {
RBRACE }
RETURNTK return
SEMICN ;
RBRACE }
INTTK int
IDENFR add_int
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
LBRACE {
RETURNTK return
IDENFR a
PLUS +
IDENFR b
RBRACE }
CHARTK char
IDENFR read_char
LPARENT (
CHARTK char
IDENFR ch
RPARENT )
LBRACE {
SEMICN ;
RETURNTK return
IDENFR ch
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_Lval_exp
LPARENT (
RPARENT )
LBRACE {
IDENFR const_int_a
IDENFR char_a
IDENFR char_b2
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "test_Lval_exp success!\n"
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_primary_exp
LPARENT (
RPARENT )
LBRACE {
LPARENT (
INTCON 1
RPARENT )
SEMICN ;
IDENFR char_a
SEMICN ;
INTCON 1
SEMICN ;
CHRCON 'a'
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "test_primary_exp success!\n"
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_func_int_arr
LPARENT (
INTTK int
IDENFR a
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
IDENFR a
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
IDENFR a
LBRACK [
INTCON 0
SEMICN ;
IDENFR a
LBRACK [
INTCON 0
RBRACK ]
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_func_mul_int
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
RPARENT )
LBRACE {
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_unary_exp
LPARENT (
RPARENT )
LBRACE {
INTCON 0
SEMICN ;
IDENFR test_func_int
LPARENT (
INTCON 0
RPARENT )
SEMICN ;
IDENFR test_func_int
LPARENT (
IDENFR int_b2
LBRACK [
INTCON 0
RPARENT )
SEMICN ;
IDENFR test_func_int_arr
LPARENT (
IDENFR int_b2
RPARENT )
SEMICN ;
IDENFR test_func_mul_int
LPARENT (
INTCON 0
COMMA ,
INTCON 1
RPARENT )
SEMICN ;
PLUS +
INTCON 1
MINU -
INTCON 1
SEMICN ;
IFTK if
LPARENT (
NOT !
INTCON 1
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "test_unary_exp success!\n"
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_Lexp
LPARENT (
RPARENT )
LBRACE {
INTCON 1
IFTK if
LPARENT (
INTCON 1
AND &&
INTCON 1
IFTK if
LPARENT (
INTCON 1
OR ||
INTCON 1
RPARENT )
IFTK if
LPARENT (
INTCON 1
AND &&
INTCON 1
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test
LPARENT (
RPARENT )
LBRACE {
IDENFR test_stmt_1_3
LPARENT (
IDENFR test_stmt_for_break_continue
LPARENT (
SEMICN ;
IDENFR test_stmt_getint_getchar_printf
LPARENT (
RPARENT )
RBRACE }
INTTK int
MAINTK main
LPARENT (
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "22371236\n"
RPARENT )
SEMICN ;
IDENFR test
LPARENT (
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
CONSTTK const
INTTK int
IDENFR const_int_a
ASSIGN =
INTCON 0
CONSTTK const
INTTK int
IDENFR const_int_b1
ASSIGN =
INTCON 1
COMMA ,
IDENFR const_int_b2
LBRACK [
INTCON 5
ASSIGN =
LBRACE {
INTCON 0
COMMA ,
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
COMMA ,
INTCON 4
RBRACE }
CONSTTK const
CHARTK char
IDENFR str
LBRACK [
INTCON 10
ASSIGN =
STRCON "hello!"
CHARTK char
IDENFR char_a
ASSIGN =
CHRCON 'a'
CHARTK char
IDENFR char_b1
ASSIGN =
CHRCON 'b'
COMMA ,
IDENFR char_b2
LBRACK [
INTCON 5
ASSIGN =
LBRACE {
CHRCON 'a'
COMMA ,
CHRCON 'b'
COMMA ,
CHRCON 'c'
COMMA ,
CHRCON 'd'
COMMA ,
CHRCON 'e'
RBRACE }
COMMA ,
IDENFR char_b3
LBRACK [
INTCON 10
ASSIGN =
STRCON "world!"
INTTK int
IDENFR int_b2
LBRACK [
INTCON 5
RBRACK ]
SEMICN ;
VOIDTK void
IDENFR print_int_arr
LPARENT (
INTTK int
IDENFR arr
LBRACK [
COMMA ,
INTTK int
IDENFR n
LBRACE {
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
IDENFR n
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "%d "
COMMA ,
IDENFR arr
LBRACK [
IDENFR i
RPARENT )
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "\n"
RPARENT )
SEMICN ;
RETURNTK return
RBRACE }
VOIDTK void
IDENFR test_stmt_for_break_continue
LPARENT (
LBRACE {
CONTINUETK continue
BREAKTK break
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_stmt_getint_getchar_printf
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
CHARTK char
IDENFR ch
ASSIGN =
CHRCON 'a'
IDENFR a
ASSIGN =
GETINTTK getint
LPARENT (
SEMICN ;
IDENFR ch
ASSIGN =
GETCHARTK getchar
LPARENT (
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "test_stmt_getint_getchar_printf"
PRINTFTK printf
LPARENT (
STRCON "%c%c%c%c%c%c%c\n"
COMMA ,
CHRCON 's'
COMMA ,
CHRCON 'u'
COMMA ,
CHRCON 'c'
COMMA ,
CHRCON 'c'
COMMA ,
CHRCON 'e'
COMMA ,
CHRCON 's'
COMMA ,
CHRCON 's'
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_block
LPARENT (
RPARENT )
LBRACE {
LBRACE {
RBRACE }
LBRACE {
RBRACE }
RETURNTK return
SEMICN ;
RBRACE }
INTTK int
IDENFR add_int
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
LBRACE {
RETURNTK return
IDENFR a
PLUS +
IDENFR b
RBRACE }
CHARTK char
IDENFR read_char
LPARENT (
CHARTK char
IDENFR ch
RPARENT )
LBRACE {
SEMICN ;
RETURNTK return
IDENFR ch
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_Lval_exp
LPARENT (
RPARENT )
LBRACE {
IDENFR const_int_a
IDENFR char_a
IDENFR char_b2
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "test_Lval_exp success!\n"
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_primary_exp
LPARENT (
RPARENT )
LBRACE {
LPARENT (
INTCON 1
RPARENT )
SEMICN ;
IDENFR char_a
SEMICN ;
INTCON 1
SEMICN ;
CHRCON 'a'
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "test_primary_exp success!\n"
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_func_int_arr
LPARENT (
INTTK int
IDENFR a
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
IDENFR a
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
IDENFR a
LBRACK [
INTCON 0
SEMICN ;
IDENFR a
LBRACK [
INTCON 0
RBRACK ]
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_func_mul_int
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
RPARENT )
LBRACE {
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_unary_exp
LPARENT (
RPARENT )
LBRACE {
INTCON 0
SEMICN ;
IDENFR test_func_int
LPARENT (
INTCON 0
RPARENT )
SEMICN ;
IDENFR test_func_int
LPARENT (
IDENFR int_b2
LBRACK [
INTCON 0
RPARENT )
SEMICN ;
IDENFR test_func_int_arr
LPARENT (
IDENFR int_b2
RPARENT )
SEMICN ;
IDENFR test_func_mul_int
LPARENT (
INTCON 0
COMMA ,
INTCON 1
RPARENT )
SEMICN ;
PLUS +
INTCON 1
MINU -
INTCON 1
SEMICN ;
IFTK if
LPARENT (
NOT !
INTCON 1
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "test_unary_exp success!\n"
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_Lexp
LPARENT (
RPARENT )
LBRACE {
INTCON 1
IFTK if
LPARENT (
INTCON 1
AND &&
INTCON 1
IFTK if
LPARENT (
INTCON 1
OR ||
INTCON 1
RPARENT )
IFTK if
LPARENT (
INTCON 1
AND &&
INTCON 1
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test
LPARENT (
RPARENT )
LBRACE {
IDENFR test_stmt_1_3
LPARENT (
IDENFR test_stmt_for_break_continue
LPARENT (
SEMICN ;
IDENFR test_stmt_getint_getchar_printf
LPARENT (
RPARENT )
RBRACE }
INTTK int
MAINTK main
LPARENT (
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "22371236\n"
RPARENT )
SEMICN ;
IDENFR test
LPARENT (
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
CONSTTK const
INTTK int
IDENFR const_int_a
ASSIGN =
INTCON 0
CONSTTK const
INTTK int
IDENFR const_int_b1
ASSIGN =
INTCON 1
COMMA ,
IDENFR const_int_b2
LBRACK [
INTCON 5
ASSIGN =
LBRACE {
INTCON 0
COMMA ,
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
COMMA ,
INTCON 4
RBRACE }
CONSTTK const
CHARTK char
IDENFR str
LBRACK [
INTCON 10
ASSIGN =
STRCON "hello!"
CHARTK char
IDENFR char_a
ASSIGN =
CHRCON 'a'
CHARTK char
IDENFR char_b1
ASSIGN =
CHRCON 'b'
COMMA ,
IDENFR char_b2
LBRACK [
INTCON 5
ASSIGN =
LBRACE {
CHRCON 'a'
COMMA ,
CHRCON 'b'
COMMA ,
CHRCON 'c'
COMMA ,
CHRCON 'd'
COMMA ,
CHRCON 'e'
RBRACE }
COMMA ,
IDENFR char_b3
LBRACK [
INTCON 10
ASSIGN =
STRCON "world!"
INTTK int
IDENFR int_b2
LBRACK [
INTCON 5
RBRACK ]
SEMICN ;
VOIDTK void
IDENFR print_int_arr
LPARENT (
INTTK int
IDENFR arr
LBRACK [
COMMA ,
INTTK int
IDENFR n
LBRACE {
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
IDENFR n
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "%d "
COMMA ,
IDENFR arr
LBRACK [
IDENFR i
RPARENT )
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "\n"
RPARENT )
SEMICN ;
RETURNTK return
RBRACE }
VOIDTK void
IDENFR test_stmt_for_break_continue
LPARENT (
LBRACE {
CONTINUETK continue
BREAKTK break
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_stmt_getint_getchar_printf
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
CHARTK char
IDENFR ch
ASSIGN =
CHRCON 'a'
IDENFR a
ASSIGN =
GETINTTK getint
LPARENT (
SEMICN ;
IDENFR ch
ASSIGN =
GETCHARTK getchar
LPARENT (
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "test_stmt_getint_getchar_printf"
PRINTFTK printf
LPARENT (
STRCON "%c%c%c%c%c%c%c\n"
COMMA ,
CHRCON 's'
COMMA ,
CHRCON 'u'
COMMA ,
CHRCON 'c'
COMMA ,
CHRCON 'c'
COMMA ,
CHRCON 'e'
COMMA ,
CHRCON 's'
COMMA ,
CHRCON 's'
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_block
LPARENT (
RPARENT )
LBRACE {
LBRACE {
RBRACE }
LBRACE {
RBRACE }
RETURNTK return
SEMICN ;
RBRACE }
INTTK int
IDENFR add_int
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
LBRACE {
RETURNTK return
IDENFR a
PLUS +
IDENFR b
RBRACE }
CHARTK char
IDENFR read_char
LPARENT (
CHARTK char
IDENFR ch
RPARENT )
LBRACE {
SEMICN ;
RETURNTK return
IDENFR ch
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_Lval_exp
LPARENT (
RPARENT )
LBRACE {
IDENFR const_int_a
IDENFR char_a
IDENFR char_b2
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "test_Lval_exp success!\n"
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_primary_exp
LPARENT (
RPARENT )
LBRACE {
LPARENT (
INTCON 1
RPARENT )
SEMICN ;
IDENFR char_a
SEMICN ;
INTCON 1
SEMICN ;
CHRCON 'a'
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "test_primary_exp success!\n"
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_func_int_arr
LPARENT (
INTTK int
IDENFR a
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
IDENFR a
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
IDENFR a
LBRACK [
INTCON 0
SEMICN ;
IDENFR a
LBRACK [
INTCON 0
RBRACK ]
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_func_mul_int
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
RPARENT )
LBRACE {
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_unary_exp
LPARENT (
RPARENT )
LBRACE {
INTCON 0
SEMICN ;
IDENFR test_func_int
LPARENT (
INTCON 0
RPARENT )
SEMICN ;
IDENFR test_func_int
LPARENT (
IDENFR int_b2
LBRACK [
INTCON 0
RPARENT )
SEMICN ;
IDENFR test_func_int_arr
LPARENT (
IDENFR int_b2
RPARENT )
SEMICN ;
IDENFR test_func_mul_int
LPARENT (
INTCON 0
COMMA ,
INTCON 1
RPARENT )
SEMICN ;
PLUS +
INTCON 1
MINU -
INTCON 1
SEMICN ;
IFTK if
LPARENT (
NOT !
INTCON 1
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "test_unary_exp success!\n"
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_Lexp
LPARENT (
RPARENT )
LBRACE {
INTCON 1
IFTK if
LPARENT (
INTCON 1
AND &&
INTCON 1
IFTK if
LPARENT (
INTCON 1
OR ||
INTCON 1
RPARENT )
IFTK if
LPARENT (
INTCON 1
AND &&
INTCON 1
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test
LPARENT (
RPARENT )
LBRACE {
IDENFR test_stmt_1_3
LPARENT (
IDENFR test_stmt_for_break_continue
LPARENT (
SEMICN ;
IDENFR test_stmt_getint_getchar_printf
LPARENT (
RPARENT )
RBRACE }
INTTK int
MAINTK main
LPARENT (
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "22371236\n"
RPARENT )
SEMICN ;
IDENFR test
LPARENT (
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
IDENFR a
LBRACK [
INTCON 0
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
IDENFR a
LBRACK [
INTCON 0
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
IDENFR a
LBRACK [
INTCON 0
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
IDENFR a
LBRACK [
INTCON 0
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
INTCON 1
IDENFR a
ASSIGN =
IDENFR a
AND &&
IDENFR b
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
INTCON 1
IDENFR a
ASSIGN =
IDENFR a
AND &&
IDENFR b
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
INTCON 1
IDENFR a
ASSIGN =
IDENFR a
AND &&
IDENFR b
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
INTCON 1
IFTK if
LPARENT (
IDENFR a
AND &&
IDENFR b
RPARENT )
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
CONSTTK const
INTTK int
IDENFR a
ASSIGN =
INTCON 1
COMMA ,
IDENFR b
ASSIGN =
INTCON 2
CONSTTK const
CHARTK char
IDENFR c
ASSIGN =
INTCON 3
COMMA ,
IDENFR d
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
LBRACE {
INTCON 0
RBRACE }
INTTK int
IDENFR aa
COMMA ,
IDENFR bb
COMMA ,
IDENFR cc
ASSIGN =
INTCON 1
COMMA ,
IDENFR dd
VOIDTK void
IDENFR fun
LPARENT (
RPARENT )
LBRACE {
IDENFR a
IDENFR b
IDENFR aa
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
IDENFR c
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
IDENFR a
IDENFR b
IDENFR aa
IDENFR c
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
CONSTTK const
INTTK int
IDENFR a
ASSIGN =
INTCON 1
COMMA ,
IDENFR b
ASSIGN =
INTCON 2
CONSTTK const
CHARTK char
IDENFR c
ASSIGN =
INTCON 3
COMMA ,
IDENFR d
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
LBRACE {
INTCON 0
RBRACE }
INTTK int
IDENFR aa
COMMA ,
IDENFR bb
COMMA ,
IDENFR cc
ASSIGN =
INTCON 1
COMMA ,
IDENFR dd
VOIDTK void
IDENFR fun
LPARENT (
RPARENT )
LBRACE {
IDENFR a
IDENFR b
IDENFR aa
ASSIGN =
GETINTTK getint
LPARENT (
SEMICN ;
IDENFR c
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
IDENFR a
IDENFR b
IDENFR aa
IDENFR c
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
CONSTTK const
INTTK int
IDENFR a
ASSIGN =
INTCON 1
COMMA ,
IDENFR b
ASSIGN =
INTCON 2
CONSTTK const
CHARTK char
IDENFR c
ASSIGN =
INTCON 3
COMMA ,
IDENFR d
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
LBRACE {
INTCON 0
RBRACE }
INTTK int
IDENFR aa
COMMA ,
IDENFR bb
COMMA ,
IDENFR cc
ASSIGN =
INTCON 1
COMMA ,
IDENFR dd
INTTK int
IDENFR f
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
VOIDTK void
IDENFR fun
LPARENT (
RPARENT )
LBRACE {
IDENFR a
IDENFR b
IDENFR f
LPARENT (
RPARENT )
IDENFR aa
ASSIGN =
GETINTTK getint
LPARENT (
SEMICN ;
IDENFR c
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
IDENFR a
IDENFR b
IDENFR aa
IDENFR c
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
CONSTTK const
INTTK int
IDENFR a
ASSIGN =
INTCON 1
COMMA ,
IDENFR b
ASSIGN =
INTCON 2
CONSTTK const
CHARTK char
IDENFR c
ASSIGN =
INTCON 3
COMMA ,
IDENFR d
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
LBRACE {
INTCON 0
RBRACE }
INTTK int
IDENFR aa
COMMA ,
IDENFR bb
COMMA ,
IDENFR cc
ASSIGN =
INTCON 1
COMMA ,
IDENFR dd
INTTK int
IDENFR f
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
VOIDTK void
IDENFR fun
LPARENT (
RPARENT )
LBRACE {
IDENFR a
IDENFR b
IDENFR f
LPARENT (
SEMICN ;
IDENFR aa
ASSIGN =
GETINTTK getint
LPARENT (
SEMICN ;
IDENFR c
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
IDENFR a
IDENFR b
IDENFR aa
IDENFR c
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
IDENFR a
IDENFR a
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
IDENFR a
IDENFR a
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
IDENFR a
IDENFR a
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
IDENFR a
IDENFR a
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
RBRACE }
