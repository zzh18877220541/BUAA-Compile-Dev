INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "21371295\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
INTCON 0
PLUS +
INTCON 1
SEMICN ;
SEMICN ;
IFTK if
LPARENT (
IDENFR i
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR a
ASSIGN =
INTCON 1
COMMA ,
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
NOT !
IDENFR a
RPARENT )
LBRACE {
RBRACE }
ELSETK else
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR b
LEQ <=
INTCON 0
RPARENT )
LBRACE {
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
EQL ==
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
AND &&
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
OR ||
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IDENFR a
ASSIGN =
IDENFR a
PLUS +
INTCON 1
MINU -
INTCON 3
MULT *
INTCON 4
DIV /
INTCON 3
MOD %
INTCON 2
SEMICN ;
IDENFR a
ASSIGN =
INTCON 1
PLUS +
INTCON 1
SEMICN ;
IDENFR a
ASSIGN =
PLUS +
MINU -
PLUS +
INTCON 1
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "21371295\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
INTCON 0
PLUS +
INTCON 1
SEMICN ;
SEMICN ;
IFTK if
LPARENT (
IDENFR i
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR a
ASSIGN =
INTCON 1
COMMA ,
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
NOT !
IDENFR a
RPARENT )
LBRACE {
RBRACE }
ELSETK else
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR b
LEQ <=
INTCON 0
RPARENT )
LBRACE {
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
EQL ==
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
AND &&
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
OR ||
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IDENFR a
ASSIGN =
IDENFR a
PLUS +
INTCON 1
MINU -
INTCON 3
MULT *
INTCON 4
DIV /
INTCON 3
MOD %
INTCON 2
SEMICN ;
IDENFR a
ASSIGN =
INTCON 1
PLUS +
INTCON 1
SEMICN ;
IDENFR a
ASSIGN =
PLUS +
MINU -
PLUS +
INTCON 1
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "21371295\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
INTCON 0
PLUS +
INTCON 1
SEMICN ;
SEMICN ;
IFTK if
LPARENT (
IDENFR i
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR a
ASSIGN =
INTCON 1
COMMA ,
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
NOT !
IDENFR a
RPARENT )
LBRACE {
RBRACE }
ELSETK else
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR b
LEQ <=
INTCON 0
RPARENT )
LBRACE {
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
EQL ==
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
AND &&
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
OR ||
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IDENFR a
ASSIGN =
IDENFR a
PLUS +
INTCON 1
MINU -
INTCON 3
MULT *
INTCON 4
DIV /
INTCON 3
MOD %
INTCON 2
SEMICN ;
IDENFR a
ASSIGN =
INTCON 1
PLUS +
INTCON 1
SEMICN ;
IDENFR a
ASSIGN =
PLUS +
MINU -
PLUS +
INTCON 1
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "21371295\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
INTCON 0
PLUS +
INTCON 1
SEMICN ;
SEMICN ;
IFTK if
LPARENT (
IDENFR i
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR a
ASSIGN =
INTCON 1
COMMA ,
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
NOT !
IDENFR a
RPARENT )
LBRACE {
RBRACE }
ELSETK else
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR b
LEQ <=
INTCON 0
RPARENT )
LBRACE {
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
EQL ==
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
AND &&
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
OR ||
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IDENFR a
ASSIGN =
IDENFR a
PLUS +
INTCON 1
MINU -
INTCON 3
MULT *
INTCON 4
DIV /
INTCON 3
MOD %
INTCON 2
SEMICN ;
IDENFR a
ASSIGN =
INTCON 1
PLUS +
INTCON 1
SEMICN ;
IDENFR a
ASSIGN =
PLUS +
MINU -
PLUS +
INTCON 1
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "21371295\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
INTCON 0
PLUS +
INTCON 1
SEMICN ;
SEMICN ;
IFTK if
LPARENT (
IDENFR i
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR a
ASSIGN =
INTCON 1
COMMA ,
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
NOT !
IDENFR a
RPARENT )
LBRACE {
RBRACE }
ELSETK else
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR b
LEQ <=
INTCON 0
RPARENT )
LBRACE {
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
EQL ==
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
AND &&
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
OR ||
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IDENFR a
ASSIGN =
IDENFR a
PLUS +
INTCON 1
MINU -
INTCON 3
MULT *
INTCON 4
DIV /
INTCON 3
MOD %
INTCON 2
SEMICN ;
IDENFR a
ASSIGN =
INTCON 1
PLUS +
INTCON 1
SEMICN ;
IDENFR a
ASSIGN =
PLUS +
MINU -
PLUS +
INTCON 1
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "21371295\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
INTCON 0
PLUS +
INTCON 1
SEMICN ;
SEMICN ;
IFTK if
LPARENT (
IDENFR i
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR a
ASSIGN =
INTCON 1
COMMA ,
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
NOT !
IDENFR a
RPARENT )
LBRACE {
RBRACE }
ELSETK else
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR b
LEQ <=
INTCON 0
RPARENT )
LBRACE {
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
EQL ==
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
AND &&
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
OR ||
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IDENFR a
ASSIGN =
IDENFR a
PLUS +
INTCON 1
MINU -
INTCON 3
MULT *
INTCON 4
DIV /
INTCON 3
MOD %
INTCON 2
SEMICN ;
IDENFR a
ASSIGN =
INTCON 1
PLUS +
INTCON 1
SEMICN ;
IDENFR a
ASSIGN =
PLUS +
MINU -
PLUS +
INTCON 1
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "21371295\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
INTCON 0
PLUS +
INTCON 1
SEMICN ;
SEMICN ;
IFTK if
LPARENT (
IDENFR i
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR a
ASSIGN =
INTCON 1
COMMA ,
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
NOT !
IDENFR a
RPARENT )
LBRACE {
RBRACE }
ELSETK else
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR b
LEQ <=
INTCON 0
RPARENT )
LBRACE {
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
EQL ==
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
AND &&
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
OR ||
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IDENFR a
ASSIGN =
IDENFR a
PLUS +
INTCON 1
MINU -
INTCON 3
MULT *
INTCON 4
DIV /
INTCON 3
MOD %
INTCON 2
SEMICN ;
IDENFR a
ASSIGN =
INTCON 1
PLUS +
INTCON 1
SEMICN ;
IDENFR a
ASSIGN =
PLUS +
MINU -
PLUS +
INTCON 1
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "21371295\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
INTCON 0
PLUS +
INTCON 1
SEMICN ;
SEMICN ;
IFTK if
LPARENT (
IDENFR i
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR a
ASSIGN =
INTCON 1
COMMA ,
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
NOT !
IDENFR a
RPARENT )
LBRACE {
RBRACE }
ELSETK else
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR b
LEQ <=
INTCON 0
RPARENT )
LBRACE {
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
EQL ==
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
AND &&
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
OR ||
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IDENFR a
ASSIGN =
IDENFR a
PLUS +
INTCON 1
MINU -
INTCON 3
MULT *
INTCON 4
DIV /
INTCON 3
MOD %
INTCON 2
SEMICN ;
IDENFR a
ASSIGN =
INTCON 1
PLUS +
INTCON 1
SEMICN ;
IDENFR a
ASSIGN =
PLUS +
MINU -
PLUS +
INTCON 1
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "21371295\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
INTCON 0
PLUS +
INTCON 1
SEMICN ;
SEMICN ;
IFTK if
LPARENT (
IDENFR i
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR a
ASSIGN =
INTCON 1
COMMA ,
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
NOT !
IDENFR a
RPARENT )
LBRACE {
RBRACE }
ELSETK else
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR b
LEQ <=
INTCON 0
RPARENT )
LBRACE {
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
EQL ==
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
AND &&
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
OR ||
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IDENFR a
ASSIGN =
IDENFR a
PLUS +
INTCON 1
MINU -
INTCON 3
MULT *
INTCON 4
DIV /
INTCON 3
MOD %
INTCON 2
SEMICN ;
IDENFR a
ASSIGN =
INTCON 1
PLUS +
INTCON 1
SEMICN ;
IDENFR a
ASSIGN =
PLUS +
MINU -
PLUS +
INTCON 1
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "21371295\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
INTCON 0
PLUS +
INTCON 1
SEMICN ;
SEMICN ;
IFTK if
LPARENT (
IDENFR i
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR a
ASSIGN =
INTCON 1
COMMA ,
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
NOT !
IDENFR a
RPARENT )
LBRACE {
RBRACE }
ELSETK else
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR b
LEQ <=
INTCON 0
RPARENT )
LBRACE {
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
EQL ==
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
AND &&
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
OR ||
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IDENFR a
ASSIGN =
IDENFR a
PLUS +
INTCON 1
MINU -
INTCON 3
MULT *
INTCON 4
DIV /
INTCON 3
MOD %
INTCON 2
SEMICN ;
IDENFR a
ASSIGN =
INTCON 1
PLUS +
INTCON 1
SEMICN ;
IDENFR a
ASSIGN =
PLUS +
MINU -
PLUS +
INTCON 1
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "21371295\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
INTCON 0
PLUS +
INTCON 1
SEMICN ;
SEMICN ;
IFTK if
LPARENT (
IDENFR i
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR a
ASSIGN =
INTCON 1
COMMA ,
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
NOT !
IDENFR a
RPARENT )
LBRACE {
RBRACE }
ELSETK else
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR b
LEQ <=
INTCON 0
RPARENT )
LBRACE {
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
EQL ==
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
AND &&
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
OR ||
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IDENFR a
ASSIGN =
IDENFR a
PLUS +
INTCON 1
MINU -
INTCON 3
MULT *
INTCON 4
DIV /
INTCON 3
MOD %
INTCON 2
SEMICN ;
IDENFR a
ASSIGN =
INTCON 1
PLUS +
INTCON 1
SEMICN ;
IDENFR a
ASSIGN =
PLUS +
MINU -
PLUS +
INTCON 1
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "21371295\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
INTCON 0
PLUS +
INTCON 1
SEMICN ;
SEMICN ;
IFTK if
LPARENT (
IDENFR i
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR a
ASSIGN =
INTCON 1
COMMA ,
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
NOT !
IDENFR a
RPARENT )
LBRACE {
RBRACE }
ELSETK else
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR b
LEQ <=
INTCON 0
RPARENT )
LBRACE {
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
EQL ==
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
AND &&
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
OR ||
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IDENFR a
ASSIGN =
IDENFR a
PLUS +
INTCON 1
MINU -
INTCON 3
MULT *
INTCON 4
DIV /
INTCON 3
MOD %
INTCON 2
SEMICN ;
IDENFR a
ASSIGN =
INTCON 1
PLUS +
INTCON 1
SEMICN ;
IDENFR a
ASSIGN =
PLUS +
MINU -
PLUS +
INTCON 1
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "21371295\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
INTCON 0
PLUS +
INTCON 1
SEMICN ;
SEMICN ;
IFTK if
LPARENT (
IDENFR i
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR a
ASSIGN =
INTCON 1
COMMA ,
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
NOT !
IDENFR a
RPARENT )
LBRACE {
RBRACE }
ELSETK else
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR b
LEQ <=
INTCON 0
RPARENT )
LBRACE {
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
EQL ==
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
AND &&
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
OR ||
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IDENFR a
ASSIGN =
IDENFR a
PLUS +
INTCON 1
MINU -
INTCON 3
MULT *
INTCON 4
DIV /
INTCON 3
MOD %
INTCON 2
SEMICN ;
IDENFR a
ASSIGN =
INTCON 1
PLUS +
INTCON 1
SEMICN ;
IDENFR a
ASSIGN =
PLUS +
MINU -
PLUS +
INTCON 1
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "21371295\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
INTCON 0
PLUS +
INTCON 1
SEMICN ;
SEMICN ;
IFTK if
LPARENT (
IDENFR i
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR a
ASSIGN =
INTCON 1
COMMA ,
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
NOT !
IDENFR a
RPARENT )
LBRACE {
RBRACE }
ELSETK else
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR b
LEQ <=
INTCON 0
RPARENT )
LBRACE {
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
EQL ==
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
AND &&
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
OR ||
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IDENFR a
ASSIGN =
IDENFR a
PLUS +
INTCON 1
MINU -
INTCON 3
MULT *
INTCON 4
DIV /
INTCON 3
MOD %
INTCON 2
SEMICN ;
IDENFR a
ASSIGN =
INTCON 1
PLUS +
INTCON 1
SEMICN ;
IDENFR a
ASSIGN =
PLUS +
MINU -
PLUS +
INTCON 1
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "21371295\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
INTCON 0
PLUS +
INTCON 1
SEMICN ;
SEMICN ;
IFTK if
LPARENT (
IDENFR i
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR a
ASSIGN =
INTCON 1
COMMA ,
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
NOT !
IDENFR a
RPARENT )
LBRACE {
RBRACE }
ELSETK else
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR b
LEQ <=
INTCON 0
RPARENT )
LBRACE {
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
EQL ==
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
AND &&
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
OR ||
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IDENFR a
ASSIGN =
IDENFR a
PLUS +
INTCON 1
MINU -
INTCON 3
MULT *
INTCON 4
DIV /
INTCON 3
MOD %
INTCON 2
SEMICN ;
IDENFR a
ASSIGN =
INTCON 1
PLUS +
INTCON 1
SEMICN ;
IDENFR a
ASSIGN =
PLUS +
MINU -
PLUS +
INTCON 1
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "21371295\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
INTCON 0
PLUS +
INTCON 1
SEMICN ;
SEMICN ;
IFTK if
LPARENT (
IDENFR i
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR a
ASSIGN =
INTCON 1
COMMA ,
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
NOT !
IDENFR a
RPARENT )
LBRACE {
RBRACE }
ELSETK else
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR b
LEQ <=
INTCON 0
RPARENT )
LBRACE {
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
EQL ==
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
AND &&
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
OR ||
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IDENFR a
ASSIGN =
IDENFR a
PLUS +
INTCON 1
MINU -
INTCON 3
MULT *
INTCON 4
DIV /
INTCON 3
MOD %
INTCON 2
SEMICN ;
IDENFR a
ASSIGN =
INTCON 1
PLUS +
INTCON 1
SEMICN ;
IDENFR a
ASSIGN =
PLUS +
MINU -
PLUS +
INTCON 1
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "21371295\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
INTCON 0
PLUS +
INTCON 1
SEMICN ;
SEMICN ;
IFTK if
LPARENT (
IDENFR i
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR a
ASSIGN =
INTCON 1
COMMA ,
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
NOT !
IDENFR a
RPARENT )
LBRACE {
RBRACE }
ELSETK else
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR b
LEQ <=
INTCON 0
RPARENT )
LBRACE {
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
EQL ==
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
AND &&
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
OR ||
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IDENFR a
ASSIGN =
IDENFR a
PLUS +
INTCON 1
MINU -
INTCON 3
MULT *
INTCON 4
DIV /
INTCON 3
MOD %
INTCON 2
SEMICN ;
IDENFR a
ASSIGN =
INTCON 1
PLUS +
INTCON 1
SEMICN ;
IDENFR a
ASSIGN =
PLUS +
MINU -
PLUS +
INTCON 1
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "21371295\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
INTCON 0
PLUS +
INTCON 1
SEMICN ;
SEMICN ;
IFTK if
LPARENT (
IDENFR i
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR a
ASSIGN =
INTCON 1
COMMA ,
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 0
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
NOT !
IDENFR a
RPARENT )
LBRACE {
RBRACE }
ELSETK else
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR b
LEQ <=
INTCON 0
RPARENT )
LBRACE {
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
EQL ==
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
AND &&
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
OR ||
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IDENFR a
ASSIGN =
IDENFR a
PLUS +
INTCON 1
MINU -
INTCON 3
MULT *
INTCON 4
DIV /
INTCON 3
MOD %
INTCON 2
SEMICN ;
IDENFR a
ASSIGN =
INTCON 1
PLUS +
INTCON 1
SEMICN ;
IDENFR a
ASSIGN =
PLUS +
MINU -
PLUS +
INTCON 1
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
CONSTTK const
INTTK int
IDENFR c
ASSIGN =
INTCON 10
SEMICN ;
INTTK int
IDENFR x
SEMICN ;
VOIDTK void
IDENFR f1
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR i
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
INTCON 5
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IDENFR x
ASSIGN =
IDENFR x
PLUS +
INTCON 1
SEMICN ;
RBRACE }
RBRACE }
INTTK int
IDENFR f2
LPARENT (
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR x
GRE >
INTCON 0
RPARENT )
LBRACE {
RETURNTK return
MINU -
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
RETURNTK return
INTCON 1
SEMICN ;
RBRACE }
RETURNTK return
IDENFR x
SEMICN ;
RBRACE }
VOIDTK void
IDENFR f3
LPARENT (
INTTK int
IDENFR a
RPARENT )
LBRACE {
IDENFR x
ASSIGN =
IDENFR a
SEMICN ;
RBRACE }
INTTK int
IDENFR f4
LPARENT (
INTTK int
IDENFR a
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR a
GRE >
INTCON 0
RPARENT )
RETURNTK return
PLUS +
IDENFR a
SEMICN ;
RETURNTK return
MINU -
IDENFR a
SEMICN ;
RBRACE }
INTTK int
IDENFR f5
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
COMMA ,
INTTK int
IDENFR c
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR a
GRE >
IDENFR b
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR a
GRE >
IDENFR c
RPARENT )
RETURNTK return
IDENFR a
SEMICN ;
ELSETK else
RETURNTK return
IDENFR c
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR b
GRE >
IDENFR c
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR b
GRE >
IDENFR a
RPARENT )
RETURNTK return
IDENFR b
SEMICN ;
ELSETK else
RETURNTK return
IDENFR a
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR c
GRE >
IDENFR a
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR c
GRE >
IDENFR b
RPARENT )
RETURNTK return
IDENFR c
SEMICN ;
ELSETK else
RETURNTK return
IDENFR b
SEMICN ;
RBRACE }
RETURNTK return
IDENFR f4
LPARENT (
IDENFR a
RPARENT )
SEMICN ;
RBRACE }
INTTK int
IDENFR f6
LPARENT (
INTTK int
IDENFR a
RPARENT )
LBRACE {
IDENFR x
ASSIGN =
IDENFR x
PLUS +
IDENFR a
SEMICN ;
IFTK if
LPARENT (
IDENFR a
EQL ==
INTCON 0
RPARENT )
LBRACE {
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
RETURNTK return
IDENFR f6
LPARENT (
IDENFR a
MINU -
INTCON 1
RPARENT )
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "21373457\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR i
COMMA ,
IDENFR j
ASSIGN =
INTCON 5
COMMA ,
IDENFR k
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
INTCON 5
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 5
RPARENT )
PRINTFTK printf
LPARENT (
STRCON "Empty for pass!\n"
RPARENT )
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
INTCON 2
SEMICN ;
RPARENT )
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 2
SEMICN ;
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 4
RPARENT )
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
IDENFR i
LSS <
INTCON 5
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
LSS <
INTCON 5
RPARENT )
CONTINUETK continue
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 2
SEMICN ;
RBRACE }
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 5
SEMICN ;
SEMICN ;
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 6
RPARENT )
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
IDENFR i
LSS <
INTCON 7
SEMICN ;
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 8
RPARENT )
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
SEMICN ;
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 10
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "One stmt for pass!\n"
RPARENT )
SEMICN ;
BREAKTK break
SEMICN ;
RBRACE }
RBRACE }
IDENFR f1
LPARENT (
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR x
EQL ==
INTCON 5
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR f2
LPARENT (
RPARENT )
EQL ==
MINU -
INTCON 1
RPARENT )
PRINTFTK printf
LPARENT (
STRCON "Basic for and no params function pass!\n"
RPARENT )
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "Please input 5 number (no zero)\n"
RPARENT )
SEMICN ;
IDENFR x
ASSIGN =
MINU -
INTCON 1
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
MULT *
IDENFR i
LSS <
IDENFR j
MULT *
IDENFR j
DIV /
LPARENT (
INTCON 5
MINU -
INTCON 4
RPARENT )
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IDENFR k
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR f3
LPARENT (
IDENFR f4
LPARENT (
IDENFR k
RPARENT )
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR x
LSS <
INTCON 0
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR x
GRE >
INTCON 0
RPARENT )
LBRACE {
CONTINUETK continue
SEMICN ;
RBRACE }
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR x
GEQ >=
INTCON 0
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "Basic for and one params function pass!\n"
RPARENT )
SEMICN ;
RBRACE }
IDENFR i
ASSIGN =
INTCON 10
SEMICN ;
IDENFR j
ASSIGN =
INTCON 5
SEMICN ;
IDENFR k
ASSIGN =
INTCON 7
SEMICN ;
IFTK if
LPARENT (
IDENFR f5
LPARENT (
IDENFR i
COMMA ,
IDENFR j
COMMA ,
IDENFR k
RPARENT )
EQL ==
IDENFR i
RPARENT )
PRINTFTK printf
LPARENT (
STRCON "Basic for and multiple params function pass!\n"
RPARENT )
SEMICN ;
IDENFR x
ASSIGN =
INTCON 0
SEMICN ;
IDENFR f6
LPARENT (
IDENFR c
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "Recursive Success, count = %d\n"
COMMA ,
IDENFR x
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "This C level file include decl, if, for ,continue, break, basic LOrExp. No block\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "Pass Success!"
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
CONSTTK const
INTTK int
IDENFR c
ASSIGN =
INTCON 10
SEMICN ;
INTTK int
IDENFR x
SEMICN ;
VOIDTK void
IDENFR f1
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR i
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
INTCON 5
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IDENFR x
ASSIGN =
IDENFR x
PLUS +
INTCON 1
SEMICN ;
RBRACE }
RBRACE }
INTTK int
IDENFR f2
LPARENT (
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR x
GRE >
INTCON 0
RPARENT )
LBRACE {
RETURNTK return
MINU -
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
RETURNTK return
INTCON 1
SEMICN ;
RBRACE }
RETURNTK return
IDENFR x
SEMICN ;
RBRACE }
VOIDTK void
IDENFR f3
LPARENT (
INTTK int
IDENFR a
RPARENT )
LBRACE {
IDENFR x
ASSIGN =
IDENFR a
SEMICN ;
RBRACE }
INTTK int
IDENFR f4
LPARENT (
INTTK int
IDENFR a
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR a
GRE >
INTCON 0
RPARENT )
RETURNTK return
PLUS +
IDENFR a
SEMICN ;
RETURNTK return
MINU -
IDENFR a
SEMICN ;
RBRACE }
INTTK int
IDENFR f5
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
COMMA ,
INTTK int
IDENFR c
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR a
GRE >
IDENFR b
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR a
GRE >
IDENFR c
RPARENT )
RETURNTK return
IDENFR a
SEMICN ;
ELSETK else
RETURNTK return
IDENFR c
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR b
GRE >
IDENFR c
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR b
GRE >
IDENFR a
RPARENT )
RETURNTK return
IDENFR b
SEMICN ;
ELSETK else
RETURNTK return
IDENFR a
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR c
GRE >
IDENFR a
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR c
GRE >
IDENFR b
RPARENT )
RETURNTK return
IDENFR c
SEMICN ;
ELSETK else
RETURNTK return
IDENFR b
SEMICN ;
RBRACE }
RETURNTK return
IDENFR f4
LPARENT (
IDENFR a
RPARENT )
SEMICN ;
RBRACE }
INTTK int
IDENFR f6
LPARENT (
INTTK int
IDENFR a
RPARENT )
LBRACE {
IDENFR x
ASSIGN =
IDENFR x
PLUS +
IDENFR a
SEMICN ;
IFTK if
LPARENT (
IDENFR a
EQL ==
INTCON 0
RPARENT )
LBRACE {
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
RETURNTK return
IDENFR f6
LPARENT (
IDENFR a
MINU -
INTCON 1
RPARENT )
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "21373457\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR i
COMMA ,
IDENFR j
ASSIGN =
INTCON 5
COMMA ,
IDENFR k
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
INTCON 5
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 5
RPARENT )
PRINTFTK printf
LPARENT (
STRCON "Empty for pass!\n"
RPARENT )
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
INTCON 2
SEMICN ;
RPARENT )
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 2
SEMICN ;
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 4
RPARENT )
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
IDENFR i
LSS <
INTCON 5
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
LSS <
INTCON 5
RPARENT )
CONTINUETK continue
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 2
SEMICN ;
RBRACE }
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 5
SEMICN ;
SEMICN ;
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 6
RPARENT )
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
IDENFR i
LSS <
INTCON 7
SEMICN ;
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 8
RPARENT )
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
SEMICN ;
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 10
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "One stmt for pass!\n"
RPARENT )
SEMICN ;
BREAKTK break
SEMICN ;
RBRACE }
RBRACE }
IDENFR f1
LPARENT (
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR x
EQL ==
INTCON 5
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR f2
LPARENT (
RPARENT )
EQL ==
MINU -
INTCON 1
RPARENT )
PRINTFTK printf
LPARENT (
STRCON "Basic for and no params function pass!\n"
RPARENT )
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "Please input 5 number (no zero)\n"
RPARENT )
SEMICN ;
IDENFR x
ASSIGN =
MINU -
INTCON 1
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
MULT *
IDENFR i
LSS <
IDENFR j
MULT *
IDENFR j
DIV /
LPARENT (
INTCON 5
MINU -
INTCON 4
RPARENT )
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IDENFR k
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR f3
LPARENT (
IDENFR f4
LPARENT (
IDENFR k
RPARENT )
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR x
LSS <
INTCON 0
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR x
GRE >
INTCON 0
RPARENT )
LBRACE {
CONTINUETK continue
SEMICN ;
RBRACE }
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR x
GEQ >=
INTCON 0
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "Basic for and one params function pass!\n"
RPARENT )
SEMICN ;
RBRACE }
IDENFR i
ASSIGN =
INTCON 10
SEMICN ;
IDENFR j
ASSIGN =
INTCON 5
SEMICN ;
IDENFR k
ASSIGN =
INTCON 7
SEMICN ;
IFTK if
LPARENT (
IDENFR f5
LPARENT (
IDENFR i
COMMA ,
IDENFR j
COMMA ,
IDENFR k
RPARENT )
EQL ==
IDENFR i
RPARENT )
PRINTFTK printf
LPARENT (
STRCON "Basic for and multiple params function pass!\n"
RPARENT )
SEMICN ;
IDENFR x
ASSIGN =
INTCON 0
SEMICN ;
IDENFR f6
LPARENT (
IDENFR c
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "Recursive Success, count = %d\n"
COMMA ,
IDENFR x
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "This C level file include decl, if, for ,continue, break, basic LOrExp. No block\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "Pass Success!"
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
CONSTTK const
INTTK int
IDENFR c
ASSIGN =
INTCON 10
SEMICN ;
INTTK int
IDENFR x
SEMICN ;
VOIDTK void
IDENFR f1
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR i
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
INTCON 5
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IDENFR x
ASSIGN =
IDENFR x
PLUS +
INTCON 1
SEMICN ;
RBRACE }
RBRACE }
INTTK int
IDENFR f2
LPARENT (
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR x
GRE >
INTCON 0
RPARENT )
LBRACE {
RETURNTK return
MINU -
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
RETURNTK return
INTCON 1
SEMICN ;
RBRACE }
RETURNTK return
IDENFR x
SEMICN ;
RBRACE }
VOIDTK void
IDENFR f3
LPARENT (
INTTK int
IDENFR a
RPARENT )
LBRACE {
IDENFR x
ASSIGN =
IDENFR a
SEMICN ;
RBRACE }
INTTK int
IDENFR f4
LPARENT (
INTTK int
IDENFR a
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR a
GRE >
INTCON 0
RPARENT )
RETURNTK return
PLUS +
IDENFR a
SEMICN ;
RETURNTK return
MINU -
IDENFR a
SEMICN ;
RBRACE }
INTTK int
IDENFR f5
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
COMMA ,
INTTK int
IDENFR c
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR a
GRE >
IDENFR b
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR a
GRE >
IDENFR c
RPARENT )
RETURNTK return
IDENFR a
SEMICN ;
ELSETK else
RETURNTK return
IDENFR c
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR b
GRE >
IDENFR c
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR b
GRE >
IDENFR a
RPARENT )
RETURNTK return
IDENFR b
SEMICN ;
ELSETK else
RETURNTK return
IDENFR a
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR c
GRE >
IDENFR a
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR c
GRE >
IDENFR b
RPARENT )
RETURNTK return
IDENFR c
SEMICN ;
ELSETK else
RETURNTK return
IDENFR b
SEMICN ;
RBRACE }
RETURNTK return
IDENFR f4
LPARENT (
IDENFR a
RPARENT )
SEMICN ;
RBRACE }
INTTK int
IDENFR f6
LPARENT (
INTTK int
IDENFR a
RPARENT )
LBRACE {
IDENFR x
ASSIGN =
IDENFR x
PLUS +
IDENFR a
SEMICN ;
IFTK if
LPARENT (
IDENFR a
EQL ==
INTCON 0
RPARENT )
LBRACE {
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
RETURNTK return
IDENFR f6
LPARENT (
IDENFR a
MINU -
INTCON 1
RPARENT )
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "21373457\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR i
COMMA ,
IDENFR j
ASSIGN =
INTCON 5
COMMA ,
IDENFR k
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
INTCON 5
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 5
RPARENT )
PRINTFTK printf
LPARENT (
STRCON "Empty for pass!\n"
RPARENT )
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
INTCON 2
SEMICN ;
RPARENT )
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 2
SEMICN ;
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 4
RPARENT )
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
IDENFR i
LSS <
INTCON 5
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
LSS <
INTCON 5
RPARENT )
CONTINUETK continue
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 2
SEMICN ;
RBRACE }
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 5
SEMICN ;
SEMICN ;
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 6
RPARENT )
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
IDENFR i
LSS <
INTCON 7
SEMICN ;
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 8
RPARENT )
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
SEMICN ;
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 10
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "One stmt for pass!\n"
RPARENT )
SEMICN ;
BREAKTK break
SEMICN ;
RBRACE }
RBRACE }
IDENFR f1
LPARENT (
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR x
EQL ==
INTCON 5
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR f2
LPARENT (
RPARENT )
EQL ==
MINU -
INTCON 1
RPARENT )
PRINTFTK printf
LPARENT (
STRCON "Basic for and no params function pass!\n"
RPARENT )
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "Please input 5 number (no zero)\n"
RPARENT )
SEMICN ;
IDENFR x
ASSIGN =
MINU -
INTCON 1
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
MULT *
IDENFR i
LSS <
IDENFR j
MULT *
IDENFR j
DIV /
LPARENT (
INTCON 5
MINU -
INTCON 4
RPARENT )
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IDENFR k
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR f3
LPARENT (
IDENFR f4
LPARENT (
IDENFR k
RPARENT )
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR x
LSS <
INTCON 0
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR x
GRE >
INTCON 0
RPARENT )
LBRACE {
CONTINUETK continue
SEMICN ;
RBRACE }
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR x
GEQ >=
INTCON 0
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "Basic for and one params function pass!\n"
RPARENT )
SEMICN ;
RBRACE }
IDENFR i
ASSIGN =
INTCON 10
SEMICN ;
IDENFR j
ASSIGN =
INTCON 5
SEMICN ;
IDENFR k
ASSIGN =
INTCON 7
SEMICN ;
IFTK if
LPARENT (
IDENFR f5
LPARENT (
IDENFR i
COMMA ,
IDENFR j
COMMA ,
IDENFR k
RPARENT )
EQL ==
IDENFR i
RPARENT )
PRINTFTK printf
LPARENT (
STRCON "Basic for and multiple params function pass!\n"
RPARENT )
SEMICN ;
IDENFR x
ASSIGN =
INTCON 0
SEMICN ;
IDENFR f6
LPARENT (
IDENFR c
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "Recursive Success, count = %d\n"
COMMA ,
IDENFR x
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "This C level file include decl, if, for ,continue, break, basic LOrExp. No block\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "Pass Success!"
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
CONSTTK const
INTTK int
IDENFR c
ASSIGN =
INTCON 10
SEMICN ;
INTTK int
IDENFR x
SEMICN ;
VOIDTK void
IDENFR f1
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR i
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
INTCON 5
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IDENFR x
ASSIGN =
IDENFR x
PLUS +
INTCON 1
SEMICN ;
RBRACE }
RBRACE }
INTTK int
IDENFR f2
LPARENT (
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR x
GRE >
INTCON 0
RPARENT )
LBRACE {
RETURNTK return
MINU -
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
RETURNTK return
INTCON 1
SEMICN ;
RBRACE }
RETURNTK return
IDENFR x
SEMICN ;
RBRACE }
VOIDTK void
IDENFR f3
LPARENT (
INTTK int
IDENFR a
RPARENT )
LBRACE {
IDENFR x
ASSIGN =
IDENFR a
SEMICN ;
RBRACE }
INTTK int
IDENFR f4
LPARENT (
INTTK int
IDENFR a
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR a
GRE >
INTCON 0
RPARENT )
RETURNTK return
PLUS +
IDENFR a
SEMICN ;
RETURNTK return
MINU -
IDENFR a
SEMICN ;
RBRACE }
INTTK int
IDENFR f5
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
COMMA ,
INTTK int
IDENFR c
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR a
GRE >
IDENFR b
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR a
GRE >
IDENFR c
RPARENT )
RETURNTK return
IDENFR a
SEMICN ;
ELSETK else
RETURNTK return
IDENFR c
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR b
GRE >
IDENFR c
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR b
GRE >
IDENFR a
RPARENT )
RETURNTK return
IDENFR b
SEMICN ;
ELSETK else
RETURNTK return
IDENFR a
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR c
GRE >
IDENFR a
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR c
GRE >
IDENFR b
RPARENT )
RETURNTK return
IDENFR c
SEMICN ;
ELSETK else
RETURNTK return
IDENFR b
SEMICN ;
RBRACE }
RETURNTK return
IDENFR f4
LPARENT (
IDENFR a
RPARENT )
SEMICN ;
RBRACE }
INTTK int
IDENFR f6
LPARENT (
INTTK int
IDENFR a
RPARENT )
LBRACE {
IDENFR x
ASSIGN =
IDENFR x
PLUS +
IDENFR a
SEMICN ;
IFTK if
LPARENT (
IDENFR a
EQL ==
INTCON 0
RPARENT )
LBRACE {
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
RETURNTK return
IDENFR f6
LPARENT (
IDENFR a
MINU -
INTCON 1
RPARENT )
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "21373457\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR i
COMMA ,
IDENFR j
ASSIGN =
INTCON 5
COMMA ,
IDENFR k
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
INTCON 5
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 5
RPARENT )
PRINTFTK printf
LPARENT (
STRCON "Empty for pass!\n"
RPARENT )
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
INTCON 2
SEMICN ;
RPARENT )
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 2
SEMICN ;
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 4
RPARENT )
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
IDENFR i
LSS <
INTCON 5
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
LSS <
INTCON 5
RPARENT )
CONTINUETK continue
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 2
SEMICN ;
RBRACE }
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 5
SEMICN ;
SEMICN ;
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 6
RPARENT )
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
IDENFR i
LSS <
INTCON 7
SEMICN ;
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 8
RPARENT )
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
SEMICN ;
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 10
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "One stmt for pass!\n"
RPARENT )
SEMICN ;
BREAKTK break
SEMICN ;
RBRACE }
RBRACE }
IDENFR f1
LPARENT (
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR x
EQL ==
INTCON 5
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR f2
LPARENT (
RPARENT )
EQL ==
MINU -
INTCON 1
RPARENT )
PRINTFTK printf
LPARENT (
STRCON "Basic for and no params function pass!\n"
RPARENT )
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "Please input 5 number (no zero)\n"
RPARENT )
SEMICN ;
IDENFR x
ASSIGN =
MINU -
INTCON 1
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
MULT *
IDENFR i
LSS <
IDENFR j
MULT *
IDENFR j
DIV /
LPARENT (
INTCON 5
MINU -
INTCON 4
RPARENT )
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IDENFR k
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR f3
LPARENT (
IDENFR f4
LPARENT (
IDENFR k
RPARENT )
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR x
LSS <
INTCON 0
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR x
GRE >
INTCON 0
RPARENT )
LBRACE {
CONTINUETK continue
SEMICN ;
RBRACE }
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR x
GEQ >=
INTCON 0
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "Basic for and one params function pass!\n"
RPARENT )
SEMICN ;
RBRACE }
IDENFR i
ASSIGN =
INTCON 10
SEMICN ;
IDENFR j
ASSIGN =
INTCON 5
SEMICN ;
IDENFR k
ASSIGN =
INTCON 7
SEMICN ;
IFTK if
LPARENT (
IDENFR f5
LPARENT (
IDENFR i
COMMA ,
IDENFR j
COMMA ,
IDENFR k
RPARENT )
EQL ==
IDENFR i
RPARENT )
PRINTFTK printf
LPARENT (
STRCON "Basic for and multiple params function pass!\n"
RPARENT )
SEMICN ;
IDENFR x
ASSIGN =
INTCON 0
SEMICN ;
IDENFR f6
LPARENT (
IDENFR c
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "Recursive Success, count = %d\n"
COMMA ,
IDENFR x
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "This C level file include decl, if, for ,continue, break, basic LOrExp. No block\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "Pass Success!"
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
CONSTTK const
INTTK int
IDENFR q
ASSIGN =
INTCON 5
SEMICN ;
VOIDTK void
IDENFR dd
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "this is d\n"
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR ee
LPARENT (
RPARENT )
LBRACE {
RBRACE }
INTTK int
IDENFR aa
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR m
ASSIGN =
INTCON 2
SEMICN ;
IDENFR m
ASSIGN =
IDENFR m
PLUS +
INTCON 1
SEMICN ;
RETURNTK return
IDENFR m
SEMICN ;
RBRACE }
INTTK int
IDENFR bb
LPARENT (
INTTK int
IDENFR j
RPARENT )
LBRACE {
IDENFR j
ASSIGN =
IDENFR j
PLUS +
INTCON 1
SEMICN ;
RETURNTK return
IDENFR j
SEMICN ;
RBRACE }
INTTK int
IDENFR cc
LPARENT (
INTTK int
IDENFR k
COMMA ,
INTTK int
IDENFR l
RPARENT )
LBRACE {
IDENFR k
ASSIGN =
IDENFR k
PLUS +
IDENFR l
SEMICN ;
RETURNTK return
IDENFR k
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR a
COMMA ,
IDENFR b
COMMA ,
IDENFR c
COMMA ,
IDENFR e
SEMICN ;
INTTK int
IDENFR j
ASSIGN =
INTCON 3
COMMA ,
IDENFR k
ASSIGN =
INTCON 2
COMMA ,
IDENFR l
ASSIGN =
INTCON 4
COMMA ,
IDENFR z
ASSIGN =
INTCON 0
COMMA ,
IDENFR x
ASSIGN =
INTCON 1
SEMICN ;
IDENFR e
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR a
ASSIGN =
IDENFR aa
LPARENT (
RPARENT )
PLUS +
INTCON 1
SEMICN ;
IDENFR b
ASSIGN =
IDENFR bb
LPARENT (
IDENFR j
RPARENT )
PLUS +
INTCON 1
SEMICN ;
IDENFR c
ASSIGN =
IDENFR cc
LPARENT (
IDENFR k
COMMA ,
IDENFR l
RPARENT )
MINU -
INTCON 2
SEMICN ;
IFTK if
LPARENT (
NOT !
IDENFR z
RPARENT )
LBRACE {
IDENFR x
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IDENFR dd
LPARENT (
RPARENT )
SEMICN ;
IDENFR ee
LPARENT (
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR a
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR b
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR c
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR e
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR x
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
CONSTTK const
INTTK int
IDENFR q
ASSIGN =
INTCON 5
SEMICN ;
VOIDTK void
IDENFR dd
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "this is d\n"
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR ee
LPARENT (
RPARENT )
LBRACE {
RBRACE }
INTTK int
IDENFR aa
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR m
ASSIGN =
INTCON 2
SEMICN ;
IDENFR m
ASSIGN =
IDENFR m
PLUS +
INTCON 1
SEMICN ;
RETURNTK return
IDENFR m
SEMICN ;
RBRACE }
INTTK int
IDENFR bb
LPARENT (
INTTK int
IDENFR j
RPARENT )
LBRACE {
IDENFR j
ASSIGN =
IDENFR j
PLUS +
INTCON 1
SEMICN ;
RETURNTK return
IDENFR j
SEMICN ;
RBRACE }
INTTK int
IDENFR cc
LPARENT (
INTTK int
IDENFR k
COMMA ,
INTTK int
IDENFR l
RPARENT )
LBRACE {
IDENFR k
ASSIGN =
IDENFR k
PLUS +
IDENFR l
SEMICN ;
RETURNTK return
IDENFR k
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR a
COMMA ,
IDENFR b
COMMA ,
IDENFR c
COMMA ,
IDENFR e
SEMICN ;
INTTK int
IDENFR j
ASSIGN =
INTCON 3
COMMA ,
IDENFR k
ASSIGN =
INTCON 2
COMMA ,
IDENFR l
ASSIGN =
INTCON 4
COMMA ,
IDENFR z
ASSIGN =
INTCON 0
COMMA ,
IDENFR x
ASSIGN =
INTCON 1
SEMICN ;
IDENFR e
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR a
ASSIGN =
IDENFR aa
LPARENT (
RPARENT )
PLUS +
INTCON 1
SEMICN ;
IDENFR b
ASSIGN =
IDENFR bb
LPARENT (
IDENFR j
RPARENT )
PLUS +
INTCON 1
SEMICN ;
IDENFR c
ASSIGN =
IDENFR cc
LPARENT (
IDENFR k
COMMA ,
IDENFR l
RPARENT )
MINU -
INTCON 2
SEMICN ;
IFTK if
LPARENT (
NOT !
IDENFR z
RPARENT )
LBRACE {
IDENFR x
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IDENFR dd
LPARENT (
RPARENT )
SEMICN ;
IDENFR ee
LPARENT (
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR a
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR b
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR c
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR e
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR x
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
CONSTTK const
INTTK int
IDENFR q
ASSIGN =
INTCON 5
SEMICN ;
VOIDTK void
IDENFR dd
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "this is d\n"
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR ee
LPARENT (
RPARENT )
LBRACE {
RBRACE }
INTTK int
IDENFR aa
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR m
ASSIGN =
INTCON 2
SEMICN ;
IDENFR m
ASSIGN =
IDENFR m
PLUS +
INTCON 1
SEMICN ;
RETURNTK return
IDENFR m
SEMICN ;
RBRACE }
INTTK int
IDENFR bb
LPARENT (
INTTK int
IDENFR j
RPARENT )
LBRACE {
IDENFR j
ASSIGN =
IDENFR j
PLUS +
INTCON 1
SEMICN ;
RETURNTK return
IDENFR j
SEMICN ;
RBRACE }
INTTK int
IDENFR cc
LPARENT (
INTTK int
IDENFR k
COMMA ,
INTTK int
IDENFR l
RPARENT )
LBRACE {
IDENFR k
ASSIGN =
IDENFR k
PLUS +
IDENFR l
SEMICN ;
RETURNTK return
IDENFR k
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR a
COMMA ,
IDENFR b
COMMA ,
IDENFR c
COMMA ,
IDENFR e
SEMICN ;
INTTK int
IDENFR j
ASSIGN =
INTCON 3
COMMA ,
IDENFR k
ASSIGN =
INTCON 2
COMMA ,
IDENFR l
ASSIGN =
INTCON 4
COMMA ,
IDENFR z
ASSIGN =
INTCON 0
COMMA ,
IDENFR x
ASSIGN =
INTCON 1
SEMICN ;
IDENFR e
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR a
ASSIGN =
IDENFR aa
LPARENT (
RPARENT )
PLUS +
INTCON 1
SEMICN ;
IDENFR b
ASSIGN =
IDENFR bb
LPARENT (
IDENFR j
RPARENT )
PLUS +
INTCON 1
SEMICN ;
IDENFR c
ASSIGN =
IDENFR cc
LPARENT (
IDENFR k
COMMA ,
IDENFR l
RPARENT )
MINU -
INTCON 2
SEMICN ;
IFTK if
LPARENT (
NOT !
IDENFR z
RPARENT )
LBRACE {
IDENFR x
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IDENFR dd
LPARENT (
RPARENT )
SEMICN ;
IDENFR ee
LPARENT (
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR a
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR b
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR c
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR e
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR x
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
CONSTTK const
INTTK int
IDENFR q
ASSIGN =
INTCON 5
SEMICN ;
VOIDTK void
IDENFR dd
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "this is d\n"
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR ee
LPARENT (
RPARENT )
LBRACE {
RBRACE }
INTTK int
IDENFR aa
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR m
ASSIGN =
INTCON 2
SEMICN ;
IDENFR m
ASSIGN =
IDENFR m
PLUS +
INTCON 1
SEMICN ;
RETURNTK return
IDENFR m
SEMICN ;
RBRACE }
INTTK int
IDENFR bb
LPARENT (
INTTK int
IDENFR j
RPARENT )
LBRACE {
IDENFR j
ASSIGN =
IDENFR j
PLUS +
INTCON 1
SEMICN ;
RETURNTK return
IDENFR j
SEMICN ;
RBRACE }
INTTK int
IDENFR cc
LPARENT (
INTTK int
IDENFR k
COMMA ,
INTTK int
IDENFR l
RPARENT )
LBRACE {
IDENFR k
ASSIGN =
IDENFR k
PLUS +
IDENFR l
SEMICN ;
RETURNTK return
IDENFR k
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR a
COMMA ,
IDENFR b
COMMA ,
IDENFR c
COMMA ,
IDENFR e
SEMICN ;
INTTK int
IDENFR j
ASSIGN =
INTCON 3
COMMA ,
IDENFR k
ASSIGN =
INTCON 2
COMMA ,
IDENFR l
ASSIGN =
INTCON 4
COMMA ,
IDENFR z
ASSIGN =
INTCON 0
COMMA ,
IDENFR x
ASSIGN =
INTCON 1
SEMICN ;
IDENFR e
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR a
ASSIGN =
IDENFR aa
LPARENT (
RPARENT )
PLUS +
INTCON 1
SEMICN ;
IDENFR b
ASSIGN =
IDENFR bb
LPARENT (
IDENFR j
RPARENT )
PLUS +
INTCON 1
SEMICN ;
IDENFR c
ASSIGN =
IDENFR cc
LPARENT (
IDENFR k
COMMA ,
IDENFR l
RPARENT )
MINU -
INTCON 2
SEMICN ;
IFTK if
LPARENT (
NOT !
IDENFR z
RPARENT )
LBRACE {
IDENFR x
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IDENFR dd
LPARENT (
RPARENT )
SEMICN ;
IDENFR ee
LPARENT (
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR a
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR b
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR c
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR e
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR x
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR x
LBRACK [
INTCON 10
RBRACK ]
COMMA ,
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
FORTK for
LPARENT (
SEMICN ;
IDENFR i
LEQ <=
INTCON 10
SEMICN ;
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 2
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 4
SEMICN ;
CONTINUETK continue
SEMICN ;
RBRACE }
IDENFR x
LBRACK [
IDENFR i
RBRACK ]
ASSIGN =
IDENFR i
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 5
RPARENT )
BREAKTK break
SEMICN ;
RBRACE }
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR x
LBRACK [
INTCON 10
RBRACK ]
COMMA ,
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
FORTK for
LPARENT (
SEMICN ;
IDENFR i
LEQ <=
INTCON 10
SEMICN ;
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 2
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 4
SEMICN ;
CONTINUETK continue
SEMICN ;
RBRACE }
IDENFR x
LBRACK [
IDENFR i
RBRACK ]
ASSIGN =
IDENFR i
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 5
RPARENT )
BREAKTK break
SEMICN ;
RBRACE }
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
CONSTTK const
INTTK int
IDENFR MAX_SIZE
ASSIGN =
INTCON 10
SEMICN ;
INTTK int
IDENFR global_var
SEMICN ;
CHARTK char
IDENFR str
LBRACK [
INTCON 10
RBRACK ]
ASSIGN =
LBRACE {
CHRCON '3'
COMMA ,
CHRCON '\''
RBRACE }
SEMICN ;
INTTK int
IDENFR add
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
RPARENT )
LBRACE {
RETURNTK return
IDENFR a
PLUS +
IDENFR b
SEMICN ;
RBRACE }
INTTK int
IDENFR calculate
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
INTTK int
IDENFR res
ASSIGN =
IDENFR add
LPARENT (
IDENFR a
COMMA ,
IDENFR b
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
MULT *
LPARENT (
IDENFR a
MINU -
IDENFR b
LBRACK [
INTCON 1
RBRACK ]
RPARENT )
DIV /
LPARENT (
IDENFR b
LBRACK [
INTCON 2
RBRACK ]
RPARENT )
MOD %
IDENFR a
MINU -
LPARENT (
MINU -
LPARENT (
MINU -
LPARENT (
MINU -
INTCON 3
RPARENT )
RPARENT )
RPARENT )
PLUS +
LPARENT (
PLUS +
MINU -
PLUS +
MINU -
INTCON 6
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR res
LEQ <=
INTCON 5
RPARENT )
LBRACE {
RETURNTK return
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
RETURNTK return
MINU -
INTCON 1
SEMICN ;
RBRACE }
VOIDTK void
IDENFR printName
LPARENT (
RPARENT )
LBRACE {
IDENFR global_var
ASSIGN =
IDENFR global_var
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR global_var
NEQ !=
INTCON 0
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "22373040\n"
RPARENT )
SEMICN ;
RBRACE }
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR print
LPARENT (
CHARTK char
IDENFR ch
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "%c\n"
COMMA ,
IDENFR ch
RPARENT )
SEMICN ;
RBRACE }
CHARTK char
IDENFR get_first
LPARENT (
CHARTK char
IDENFR str
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
RETURNTK return
IDENFR str
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
IDENFR printName
LPARENT (
RPARENT )
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
INTCON 0
COMMA ,
IDENFR ii
ASSIGN =
INTCON 8
SEMICN ;
CHARTK char
IDENFR c
SEMICN ;
IDENFR i
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR c
ASSIGN =
GETCHARTK getchar
LPARENT (
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "Input integer: %d\n"
COMMA ,
IDENFR i
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "Input character: %c\n"
COMMA ,
IDENFR c
RPARENT )
SEMICN ;
CONSTTK const
INTTK int
IDENFR local_const
ASSIGN =
INTCON 5
SEMICN ;
INTTK int
IDENFR arr
LBRACK [
INTCON 10
RBRACK ]
SEMICN ;
CHARTK char
IDENFR str
LBRACK [
INTCON 12
RBRACK ]
ASSIGN =
STRCON "qwertyuiop\n"
SEMICN ;
CONSTTK const
CHARTK char
IDENFR _str
LBRACK [
INTCON 10
RBRACK ]
ASSIGN =
STRCON "str"
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
IDENFR MAX_SIZE
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IDENFR arr
LBRACK [
IDENFR i
RBRACK ]
ASSIGN =
IDENFR i
SEMICN ;
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 4
AND &&
IDENFR i
LSS <
IDENFR c
OR ||
IDENFR i
GEQ >=
INTCON 9
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "i is 4 or 9!\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR j
SEMICN ;
FORTK for
LPARENT (
IDENFR j
ASSIGN =
INTCON 1
SEMICN ;
SEMICN ;
IDENFR j
ASSIGN =
IDENFR j
PLUS +
IDENFR j
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR j
GRE >
INTCON 100
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
ELSETK else
IFTK if
LPARENT (
IDENFR j
NEQ !=
INTCON 32
RPARENT )
LBRACE {
CONTINUETK continue
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "j is 32!\n"
RPARENT )
SEMICN ;
RBRACE }
RBRACE }
IFTK if
LPARENT (
IDENFR i
MOD %
INTCON 2
EQL ==
INTCON 0
RPARENT )
LBRACE {
FORTK for
LPARENT (
SEMICN ;
SEMICN ;
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
RBRACE }
ELSETK else
LBRACE {
RBRACE }
RBRACE }
LBRACE {
CONSTTK const
INTTK int
IDENFR arr
LBRACK [
INTCON 20
RBRACK ]
ASSIGN =
LBRACE {
INTCON 3
COMMA ,
INTCON 2
COMMA ,
INTCON 1
RBRACE }
SEMICN ;
INTTK int
IDENFR sum
ASSIGN =
INTCON 0
COMMA ,
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
LBRACE {
FORTK for
LPARENT (
SEMICN ;
IDENFR i
LSS <
IDENFR MAX_SIZE
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
LSS <
INTCON 3
RPARENT )
LBRACE {
IDENFR sum
ASSIGN =
IDENFR sum
PLUS +
IDENFR arr
LBRACK [
IDENFR i
RBRACK ]
SEMICN ;
RBRACE }
RBRACE }
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "Sum of array elements: %d\n"
COMMA ,
IDENFR sum
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
NOT !
IDENFR calculate
LPARENT (
IDENFR i
COMMA ,
IDENFR arr
RPARENT )
RPARENT )
LBRACE {
IDENFR print
LPARENT (
IDENFR get_first
LPARENT (
IDENFR str
RPARENT )
RPARENT )
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "Test finished!\n"
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
CONSTTK const
INTTK int
IDENFR MAX_SIZE
ASSIGN =
INTCON 10
SEMICN ;
INTTK int
IDENFR global_var
SEMICN ;
CHARTK char
IDENFR str
LBRACK [
INTCON 10
RBRACK ]
ASSIGN =
LBRACE {
CHRCON '3'
COMMA ,
CHRCON '\''
RBRACE }
SEMICN ;
INTTK int
IDENFR add
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
RPARENT )
LBRACE {
RETURNTK return
IDENFR a
PLUS +
IDENFR b
SEMICN ;
RBRACE }
INTTK int
IDENFR calculate
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
INTTK int
IDENFR res
ASSIGN =
IDENFR add
LPARENT (
IDENFR a
COMMA ,
IDENFR b
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
MULT *
LPARENT (
IDENFR a
MINU -
IDENFR b
LBRACK [
INTCON 1
RBRACK ]
RPARENT )
DIV /
LPARENT (
IDENFR b
LBRACK [
INTCON 2
RBRACK ]
RPARENT )
MOD %
IDENFR a
MINU -
LPARENT (
MINU -
LPARENT (
MINU -
LPARENT (
MINU -
INTCON 3
RPARENT )
RPARENT )
RPARENT )
PLUS +
LPARENT (
PLUS +
MINU -
PLUS +
MINU -
INTCON 6
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR res
LEQ <=
INTCON 5
RPARENT )
LBRACE {
RETURNTK return
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
RETURNTK return
MINU -
INTCON 1
SEMICN ;
RBRACE }
VOIDTK void
IDENFR printName
LPARENT (
RPARENT )
LBRACE {
IDENFR global_var
ASSIGN =
IDENFR global_var
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR global_var
NEQ !=
INTCON 0
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "22373040\n"
RPARENT )
SEMICN ;
RBRACE }
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR print
LPARENT (
CHARTK char
IDENFR ch
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "%c\n"
COMMA ,
IDENFR ch
RPARENT )
SEMICN ;
RBRACE }
CHARTK char
IDENFR get_first
LPARENT (
CHARTK char
IDENFR str
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
RETURNTK return
IDENFR str
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
IDENFR printName
LPARENT (
RPARENT )
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
INTCON 0
COMMA ,
IDENFR ii
ASSIGN =
INTCON 8
SEMICN ;
CHARTK char
IDENFR c
SEMICN ;
IDENFR i
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR c
ASSIGN =
GETCHARTK getchar
LPARENT (
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "Input integer: %d\n"
COMMA ,
IDENFR i
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "Input character: %c\n"
COMMA ,
IDENFR c
RPARENT )
SEMICN ;
CONSTTK const
INTTK int
IDENFR local_const
ASSIGN =
INTCON 5
SEMICN ;
INTTK int
IDENFR arr
LBRACK [
INTCON 10
RBRACK ]
SEMICN ;
CHARTK char
IDENFR str
LBRACK [
INTCON 12
RBRACK ]
ASSIGN =
STRCON "qwertyuiop\n"
SEMICN ;
CONSTTK const
CHARTK char
IDENFR _str
LBRACK [
INTCON 10
RBRACK ]
ASSIGN =
STRCON "str"
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
IDENFR MAX_SIZE
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IDENFR arr
LBRACK [
IDENFR i
RBRACK ]
ASSIGN =
IDENFR i
SEMICN ;
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 4
AND &&
IDENFR i
LSS <
IDENFR c
OR ||
IDENFR i
GEQ >=
INTCON 9
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "i is 4 or 9!\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR j
SEMICN ;
FORTK for
LPARENT (
IDENFR j
ASSIGN =
INTCON 1
SEMICN ;
SEMICN ;
IDENFR j
ASSIGN =
IDENFR j
PLUS +
IDENFR j
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR j
GRE >
INTCON 100
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
ELSETK else
IFTK if
LPARENT (
IDENFR j
NEQ !=
INTCON 32
RPARENT )
LBRACE {
CONTINUETK continue
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "j is 32!\n"
RPARENT )
SEMICN ;
RBRACE }
RBRACE }
IFTK if
LPARENT (
IDENFR i
MOD %
INTCON 2
EQL ==
INTCON 0
RPARENT )
LBRACE {
FORTK for
LPARENT (
SEMICN ;
SEMICN ;
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
RBRACE }
ELSETK else
LBRACE {
RBRACE }
RBRACE }
LBRACE {
CONSTTK const
INTTK int
IDENFR arr
LBRACK [
INTCON 20
RBRACK ]
ASSIGN =
LBRACE {
INTCON 3
COMMA ,
INTCON 2
COMMA ,
INTCON 1
RBRACE }
SEMICN ;
INTTK int
IDENFR sum
ASSIGN =
INTCON 0
COMMA ,
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
LBRACE {
FORTK for
LPARENT (
SEMICN ;
IDENFR i
LSS <
IDENFR MAX_SIZE
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
LSS <
INTCON 3
RPARENT )
LBRACE {
IDENFR sum
ASSIGN =
IDENFR sum
PLUS +
IDENFR arr
LBRACK [
IDENFR i
RBRACK ]
SEMICN ;
RBRACE }
RBRACE }
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "Sum of array elements: %d\n"
COMMA ,
IDENFR sum
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
NOT !
IDENFR calculate
LPARENT (
IDENFR i
COMMA ,
IDENFR arr
RPARENT )
RPARENT )
LBRACE {
IDENFR print
LPARENT (
IDENFR get_first
LPARENT (
IDENFR str
RPARENT )
RPARENT )
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "Test finished!\n"
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
CONSTTK const
INTTK int
IDENFR MAX_SIZE
ASSIGN =
INTCON 10
SEMICN ;
INTTK int
IDENFR global_var
SEMICN ;
CHARTK char
IDENFR str
LBRACK [
INTCON 10
RBRACK ]
ASSIGN =
LBRACE {
CHRCON '3'
COMMA ,
CHRCON '\''
RBRACE }
SEMICN ;
INTTK int
IDENFR add
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
RPARENT )
LBRACE {
RETURNTK return
IDENFR a
PLUS +
IDENFR b
SEMICN ;
RBRACE }
INTTK int
IDENFR calculate
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
INTTK int
IDENFR res
ASSIGN =
IDENFR add
LPARENT (
IDENFR a
COMMA ,
IDENFR b
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
MULT *
LPARENT (
IDENFR a
MINU -
IDENFR b
LBRACK [
INTCON 1
RBRACK ]
RPARENT )
DIV /
LPARENT (
IDENFR b
LBRACK [
INTCON 2
RBRACK ]
RPARENT )
MOD %
IDENFR a
MINU -
LPARENT (
MINU -
LPARENT (
MINU -
LPARENT (
MINU -
INTCON 3
RPARENT )
RPARENT )
RPARENT )
PLUS +
LPARENT (
PLUS +
MINU -
PLUS +
MINU -
INTCON 6
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR res
LEQ <=
INTCON 5
RPARENT )
LBRACE {
RETURNTK return
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
RETURNTK return
MINU -
INTCON 1
SEMICN ;
RBRACE }
VOIDTK void
IDENFR printName
LPARENT (
RPARENT )
LBRACE {
IDENFR global_var
ASSIGN =
IDENFR global_var
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR global_var
NEQ !=
INTCON 0
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "22373040\n"
RPARENT )
SEMICN ;
RBRACE }
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR print
LPARENT (
CHARTK char
IDENFR ch
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "%c\n"
COMMA ,
IDENFR ch
RPARENT )
SEMICN ;
RBRACE }
CHARTK char
IDENFR get_first
LPARENT (
CHARTK char
IDENFR str
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
RETURNTK return
IDENFR str
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
IDENFR printName
LPARENT (
RPARENT )
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
INTCON 0
COMMA ,
IDENFR ii
ASSIGN =
INTCON 8
SEMICN ;
CHARTK char
IDENFR c
SEMICN ;
IDENFR i
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR c
ASSIGN =
GETCHARTK getchar
LPARENT (
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "Input integer: %d\n"
COMMA ,
IDENFR i
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "Input character: %c\n"
COMMA ,
IDENFR c
RPARENT )
SEMICN ;
CONSTTK const
INTTK int
IDENFR local_const
ASSIGN =
INTCON 5
SEMICN ;
INTTK int
IDENFR arr
LBRACK [
INTCON 10
RBRACK ]
SEMICN ;
CHARTK char
IDENFR str
LBRACK [
INTCON 12
RBRACK ]
ASSIGN =
STRCON "qwertyuiop\n"
SEMICN ;
CONSTTK const
CHARTK char
IDENFR _str
LBRACK [
INTCON 10
RBRACK ]
ASSIGN =
STRCON "str"
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
IDENFR MAX_SIZE
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IDENFR arr
LBRACK [
IDENFR i
RBRACK ]
ASSIGN =
IDENFR i
SEMICN ;
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 4
AND &&
IDENFR i
LSS <
IDENFR c
OR ||
IDENFR i
GEQ >=
INTCON 9
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "i is 4 or 9!\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR j
SEMICN ;
FORTK for
LPARENT (
IDENFR j
ASSIGN =
INTCON 1
SEMICN ;
SEMICN ;
IDENFR j
ASSIGN =
IDENFR j
PLUS +
IDENFR j
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR j
GRE >
INTCON 100
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
ELSETK else
IFTK if
LPARENT (
IDENFR j
NEQ !=
INTCON 32
RPARENT )
LBRACE {
CONTINUETK continue
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "j is 32!\n"
RPARENT )
SEMICN ;
RBRACE }
RBRACE }
IFTK if
LPARENT (
IDENFR i
MOD %
INTCON 2
EQL ==
INTCON 0
RPARENT )
LBRACE {
FORTK for
LPARENT (
SEMICN ;
SEMICN ;
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
RBRACE }
ELSETK else
LBRACE {
RBRACE }
RBRACE }
LBRACE {
CONSTTK const
INTTK int
IDENFR arr
LBRACK [
INTCON 20
RBRACK ]
ASSIGN =
LBRACE {
INTCON 3
COMMA ,
INTCON 2
COMMA ,
INTCON 1
RBRACE }
SEMICN ;
INTTK int
IDENFR sum
ASSIGN =
INTCON 0
COMMA ,
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
LBRACE {
FORTK for
LPARENT (
SEMICN ;
IDENFR i
LSS <
IDENFR MAX_SIZE
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
LSS <
INTCON 3
RPARENT )
LBRACE {
IDENFR sum
ASSIGN =
IDENFR sum
PLUS +
IDENFR arr
LBRACK [
IDENFR i
RBRACK ]
SEMICN ;
RBRACE }
RBRACE }
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "Sum of array elements: %d\n"
COMMA ,
IDENFR sum
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
NOT !
IDENFR calculate
LPARENT (
IDENFR i
COMMA ,
IDENFR arr
RPARENT )
RPARENT )
LBRACE {
IDENFR print
LPARENT (
IDENFR get_first
LPARENT (
IDENFR str
RPARENT )
RPARENT )
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "Test finished!\n"
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
IDENFR a
SEMICN ;
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
IDENFR a
LPARENT (
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
IDENFR a
SEMICN ;
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
IDENFR a
LPARENT (
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
VOIDTK void
IDENFR f
LPARENT (
CHARTK char
IDENFR str
LBRACK [
RBRACK ]
COMMA ,
CHARTK char
IDENFR str
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
RBRACE }
VOIDTK void
IDENFR f
LPARENT (
RPARENT )
LBRACE {
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
CONSTTK const
CHARTK char
IDENFR a
ASSIGN =
CHRCON '\\'
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
SEMICN ;
RPARENT )
LBRACE {
CHARTK char
IDENFR a
LBRACK [
INTCON 5
RBRACK ]
SEMICN ;
RBRACE }
INTTK int
IDENFR a
LBRACK [
INTCON 10
RBRACK ]
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
VOIDTK void
IDENFR f
LPARENT (
CHARTK char
IDENFR str
LBRACK [
RBRACK ]
COMMA ,
CHARTK char
IDENFR str
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
RBRACE }
VOIDTK void
IDENFR f
LPARENT (
RPARENT )
LBRACE {
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
CONSTTK const
CHARTK char
IDENFR a
ASSIGN =
CHRCON '\\'
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
SEMICN ;
RPARENT )
LBRACE {
CHARTK char
IDENFR a
LBRACK [
INTCON 5
RBRACK ]
SEMICN ;
RBRACE }
INTTK int
IDENFR a
LBRACK [
INTCON 10
RBRACK ]
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR a
COMMA ,
IDENFR b
ASSIGN =
INTCON 10
SEMICN ;
CONSTTK const
INTTK int
IDENFR a
ASSIGN =
INTCON 11
SEMICN ;
CHARTK char
IDENFR b
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
RBRACE }
SEMICN ;
CONSTTK const
INTTK int
IDENFR arr
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
RBRACE }
SEMICN ;
CHARTK char
IDENFR arr
SEMICN ;
INTTK int
IDENFR func1
ASSIGN =
INTCON 10
SEMICN ;
VOIDTK void
IDENFR func1
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "hahaha"
RPARENT )
SEMICN ;
RBRACE }
INTTK int
IDENFR func2
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
RPARENT )
LBRACE {
CHARTK char
IDENFR a
COMMA ,
IDENFR c
SEMICN ;
IFTK if
LPARENT (
IDENFR a
EQL ==
INTCON 1
RPARENT )
RETURNTK return
INTCON 10
SEMICN ;
ELSETK else
LBRACE {
INTTK int
IDENFR a
COMMA ,
IDENFR c
SEMICN ;
IDENFR a
ASSIGN =
IDENFR b
MULT *
INTCON 2
SEMICN ;
IDENFR c
ASSIGN =
IDENFR func2
LPARENT (
IDENFR a
COMMA ,
INTCON 1
RPARENT )
SEMICN ;
RBRACE }
RETURNTK return
INTCON 10
SEMICN ;
RBRACE }
VOIDTK void
IDENFR func2
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "hahaha"
RPARENT )
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
CONSTTK const
INTTK int
IDENFR a
ASSIGN =
INTCON 1
COMMA ,
IDENFR b
ASSIGN =
INTCON 100
SEMICN ;
INTTK int
IDENFR a
ASSIGN =
IDENFR b
MULT *
INTCON 2
SEMICN ;
INTTK int
IDENFR r
ASSIGN =
IDENFR func2
LPARENT (
IDENFR b
COMMA ,
INTCON 10
RPARENT )
SEMICN ;
CHARTK char
IDENFR func2
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
RBRACE }
SEMICN ;
IDENFR func2
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
IDENFR r
SEMICN ;
IFTK if
LPARENT (
IDENFR r
EQL ==
INTCON 10
RPARENT )
LBRACE {
IDENFR func2
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
INTCON 100
SEMICN ;
CHARTK char
IDENFR func2
ASSIGN =
INTCON 10
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
INTTK int
IDENFR r
ASSIGN =
IDENFR b
PLUS +
IDENFR func2
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
INTTK int
IDENFR d
ASSIGN =
IDENFR r
SEMICN ;
INTTK int
IDENFR f
ASSIGN =
IDENFR r
PLUS +
IDENFR d
SEMICN ;
LBRACE {
INTTK int
IDENFR e
ASSIGN =
IDENFR d
SEMICN ;
INTTK int
IDENFR d
ASSIGN =
IDENFR r
SEMICN ;
INTTK int
IDENFR r
ASSIGN =
IDENFR func2
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
RBRACE }
LBRACE {
INTTK int
IDENFR d
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 1
RBRACE }
SEMICN ;
INTTK int
IDENFR r
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
IDENFR d
LBRACK [
INTCON 1
RBRACK ]
COMMA ,
IDENFR d
LBRACK [
INTCON 0
RBRACK ]
RBRACE }
SEMICN ;
CHARTK char
IDENFR func2
ASSIGN =
IDENFR d
LBRACK [
INTCON 0
RBRACK ]
PLUS +
IDENFR r
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%c"
COMMA ,
IDENFR func2
RPARENT )
SEMICN ;
LBRACE {
INTTK int
IDENFR a
ASSIGN =
IDENFR d
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
IDENFR a
ASSIGN =
IDENFR f
PLUS +
IDENFR r
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
INTTK int
IDENFR arr
ASSIGN =
INTCON 3
PLUS +
IDENFR f
SEMICN ;
RBRACE }
RBRACE }
RBRACE }
CONSTTK const
CHARTK char
IDENFR func2
ASSIGN =
INTCON 100
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "oh, that is complicated %d"
COMMA ,
IDENFR func2
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR a
COMMA ,
IDENFR b
ASSIGN =
INTCON 10
SEMICN ;
CONSTTK const
INTTK int
IDENFR a
ASSIGN =
INTCON 11
SEMICN ;
CHARTK char
IDENFR b
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
RBRACE }
SEMICN ;
CONSTTK const
INTTK int
IDENFR arr
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
RBRACE }
SEMICN ;
CHARTK char
IDENFR arr
SEMICN ;
INTTK int
IDENFR func1
ASSIGN =
INTCON 10
SEMICN ;
VOIDTK void
IDENFR func1
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "hahaha"
RPARENT )
SEMICN ;
RBRACE }
INTTK int
IDENFR func2
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
RPARENT )
LBRACE {
CHARTK char
IDENFR a
COMMA ,
IDENFR c
SEMICN ;
IFTK if
LPARENT (
IDENFR a
EQL ==
INTCON 1
RPARENT )
RETURNTK return
INTCON 10
SEMICN ;
ELSETK else
LBRACE {
INTTK int
IDENFR a
COMMA ,
IDENFR c
SEMICN ;
IDENFR a
ASSIGN =
IDENFR b
MULT *
INTCON 2
SEMICN ;
IDENFR c
ASSIGN =
IDENFR func2
LPARENT (
IDENFR a
COMMA ,
INTCON 1
RPARENT )
SEMICN ;
RBRACE }
RETURNTK return
INTCON 10
SEMICN ;
RBRACE }
VOIDTK void
IDENFR func2
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "hahaha"
RPARENT )
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
CONSTTK const
INTTK int
IDENFR a
ASSIGN =
INTCON 1
COMMA ,
IDENFR b
ASSIGN =
INTCON 100
SEMICN ;
INTTK int
IDENFR a
ASSIGN =
IDENFR b
MULT *
INTCON 2
SEMICN ;
INTTK int
IDENFR r
ASSIGN =
IDENFR func2
LPARENT (
IDENFR b
COMMA ,
INTCON 10
RPARENT )
SEMICN ;
CHARTK char
IDENFR func2
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
RBRACE }
SEMICN ;
IDENFR func2
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
IDENFR r
SEMICN ;
IFTK if
LPARENT (
IDENFR r
EQL ==
INTCON 10
RPARENT )
LBRACE {
IDENFR func2
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
INTCON 100
SEMICN ;
CHARTK char
IDENFR func2
ASSIGN =
INTCON 10
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
INTTK int
IDENFR r
ASSIGN =
IDENFR b
PLUS +
IDENFR func2
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
INTTK int
IDENFR d
ASSIGN =
IDENFR r
SEMICN ;
INTTK int
IDENFR f
ASSIGN =
IDENFR r
PLUS +
IDENFR d
SEMICN ;
LBRACE {
INTTK int
IDENFR e
ASSIGN =
IDENFR d
SEMICN ;
INTTK int
IDENFR d
ASSIGN =
IDENFR r
SEMICN ;
INTTK int
IDENFR r
ASSIGN =
IDENFR func2
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
RBRACE }
LBRACE {
INTTK int
IDENFR d
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 1
RBRACE }
SEMICN ;
INTTK int
IDENFR r
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
IDENFR d
LBRACK [
INTCON 1
RBRACK ]
COMMA ,
IDENFR d
LBRACK [
INTCON 0
RBRACK ]
RBRACE }
SEMICN ;
CHARTK char
IDENFR func2
ASSIGN =
IDENFR d
LBRACK [
INTCON 0
RBRACK ]
PLUS +
IDENFR r
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%c"
COMMA ,
IDENFR func2
RPARENT )
SEMICN ;
LBRACE {
INTTK int
IDENFR a
ASSIGN =
IDENFR d
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
IDENFR a
ASSIGN =
IDENFR f
PLUS +
IDENFR r
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
INTTK int
IDENFR arr
ASSIGN =
INTCON 3
PLUS +
IDENFR f
SEMICN ;
RBRACE }
RBRACE }
RBRACE }
CONSTTK const
CHARTK char
IDENFR func2
ASSIGN =
INTCON 100
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "oh, that is complicated %d"
COMMA ,
IDENFR func2
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR a
COMMA ,
IDENFR b
ASSIGN =
INTCON 10
SEMICN ;
CONSTTK const
INTTK int
IDENFR a
ASSIGN =
INTCON 11
SEMICN ;
CHARTK char
IDENFR b
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
RBRACE }
SEMICN ;
CONSTTK const
INTTK int
IDENFR arr
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
RBRACE }
SEMICN ;
CHARTK char
IDENFR arr
SEMICN ;
INTTK int
IDENFR func1
ASSIGN =
INTCON 10
SEMICN ;
VOIDTK void
IDENFR func1
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "hahaha"
RPARENT )
SEMICN ;
RBRACE }
INTTK int
IDENFR func2
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
RPARENT )
LBRACE {
CHARTK char
IDENFR a
COMMA ,
IDENFR c
SEMICN ;
IFTK if
LPARENT (
IDENFR a
EQL ==
INTCON 1
RPARENT )
RETURNTK return
INTCON 10
SEMICN ;
ELSETK else
LBRACE {
INTTK int
IDENFR a
COMMA ,
IDENFR c
SEMICN ;
IDENFR a
ASSIGN =
IDENFR b
MULT *
INTCON 2
SEMICN ;
IDENFR c
ASSIGN =
IDENFR func2
LPARENT (
IDENFR a
COMMA ,
INTCON 1
RPARENT )
SEMICN ;
RBRACE }
RETURNTK return
INTCON 10
SEMICN ;
RBRACE }
VOIDTK void
IDENFR func2
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "hahaha"
RPARENT )
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
CONSTTK const
INTTK int
IDENFR a
ASSIGN =
INTCON 1
COMMA ,
IDENFR b
ASSIGN =
INTCON 100
SEMICN ;
INTTK int
IDENFR a
ASSIGN =
IDENFR b
MULT *
INTCON 2
SEMICN ;
INTTK int
IDENFR r
ASSIGN =
IDENFR func2
LPARENT (
IDENFR b
COMMA ,
INTCON 10
RPARENT )
SEMICN ;
CHARTK char
IDENFR func2
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
RBRACE }
SEMICN ;
IDENFR func2
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
IDENFR r
SEMICN ;
IFTK if
LPARENT (
IDENFR r
EQL ==
INTCON 10
RPARENT )
LBRACE {
IDENFR func2
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
INTCON 100
SEMICN ;
CHARTK char
IDENFR func2
ASSIGN =
INTCON 10
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
INTTK int
IDENFR r
ASSIGN =
IDENFR b
PLUS +
IDENFR func2
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
INTTK int
IDENFR d
ASSIGN =
IDENFR r
SEMICN ;
INTTK int
IDENFR f
ASSIGN =
IDENFR r
PLUS +
IDENFR d
SEMICN ;
LBRACE {
INTTK int
IDENFR e
ASSIGN =
IDENFR d
SEMICN ;
INTTK int
IDENFR d
ASSIGN =
IDENFR r
SEMICN ;
INTTK int
IDENFR r
ASSIGN =
IDENFR func2
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
RBRACE }
LBRACE {
INTTK int
IDENFR d
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 1
RBRACE }
SEMICN ;
INTTK int
IDENFR r
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
IDENFR d
LBRACK [
INTCON 1
RBRACK ]
COMMA ,
IDENFR d
LBRACK [
INTCON 0
RBRACK ]
RBRACE }
SEMICN ;
CHARTK char
IDENFR func2
ASSIGN =
IDENFR d
LBRACK [
INTCON 0
RBRACK ]
PLUS +
IDENFR r
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%c"
COMMA ,
IDENFR func2
RPARENT )
SEMICN ;
LBRACE {
INTTK int
IDENFR a
ASSIGN =
IDENFR d
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
IDENFR a
ASSIGN =
IDENFR f
PLUS +
IDENFR r
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
INTTK int
IDENFR arr
ASSIGN =
INTCON 3
PLUS +
IDENFR f
SEMICN ;
RBRACE }
RBRACE }
RBRACE }
CONSTTK const
CHARTK char
IDENFR func2
ASSIGN =
INTCON 100
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "oh, that is complicated %d"
COMMA ,
IDENFR func2
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR a
COMMA ,
IDENFR b
ASSIGN =
INTCON 10
SEMICN ;
CONSTTK const
INTTK int
IDENFR a
ASSIGN =
INTCON 11
SEMICN ;
CHARTK char
IDENFR b
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
RBRACE }
SEMICN ;
CONSTTK const
INTTK int
IDENFR arr
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
RBRACE }
SEMICN ;
CHARTK char
IDENFR arr
SEMICN ;
INTTK int
IDENFR func1
ASSIGN =
INTCON 10
SEMICN ;
VOIDTK void
IDENFR func1
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "hahaha"
RPARENT )
SEMICN ;
RBRACE }
INTTK int
IDENFR func2
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
RPARENT )
LBRACE {
CHARTK char
IDENFR a
COMMA ,
IDENFR c
SEMICN ;
IFTK if
LPARENT (
IDENFR a
EQL ==
INTCON 1
RPARENT )
RETURNTK return
INTCON 10
SEMICN ;
ELSETK else
LBRACE {
INTTK int
IDENFR a
COMMA ,
IDENFR c
SEMICN ;
IDENFR a
ASSIGN =
IDENFR b
MULT *
INTCON 2
SEMICN ;
IDENFR c
ASSIGN =
IDENFR func2
LPARENT (
IDENFR a
COMMA ,
INTCON 1
RPARENT )
SEMICN ;
RBRACE }
RETURNTK return
INTCON 10
SEMICN ;
RBRACE }
VOIDTK void
IDENFR func2
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "hahaha"
RPARENT )
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
CONSTTK const
INTTK int
IDENFR a
ASSIGN =
INTCON 1
COMMA ,
IDENFR b
ASSIGN =
INTCON 100
SEMICN ;
INTTK int
IDENFR a
ASSIGN =
IDENFR b
MULT *
INTCON 2
SEMICN ;
INTTK int
IDENFR r
ASSIGN =
IDENFR func2
LPARENT (
IDENFR b
COMMA ,
INTCON 10
RPARENT )
SEMICN ;
CHARTK char
IDENFR func2
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
RBRACE }
SEMICN ;
IDENFR func2
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
IDENFR r
SEMICN ;
IFTK if
LPARENT (
IDENFR r
EQL ==
INTCON 10
RPARENT )
LBRACE {
IDENFR func2
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
INTCON 100
SEMICN ;
CHARTK char
IDENFR func2
ASSIGN =
INTCON 10
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
INTTK int
IDENFR r
ASSIGN =
IDENFR b
PLUS +
IDENFR func2
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
INTTK int
IDENFR d
ASSIGN =
IDENFR r
SEMICN ;
INTTK int
IDENFR f
ASSIGN =
IDENFR r
PLUS +
IDENFR d
SEMICN ;
LBRACE {
INTTK int
IDENFR e
ASSIGN =
IDENFR d
SEMICN ;
INTTK int
IDENFR d
ASSIGN =
IDENFR r
SEMICN ;
INTTK int
IDENFR r
ASSIGN =
IDENFR func2
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
RBRACE }
LBRACE {
INTTK int
IDENFR d
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 1
RBRACE }
SEMICN ;
INTTK int
IDENFR r
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
IDENFR d
LBRACK [
INTCON 1
RBRACK ]
COMMA ,
IDENFR d
LBRACK [
INTCON 0
RBRACK ]
RBRACE }
SEMICN ;
CHARTK char
IDENFR func2
ASSIGN =
IDENFR d
LBRACK [
INTCON 0
RBRACK ]
PLUS +
IDENFR r
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%c"
COMMA ,
IDENFR func2
RPARENT )
SEMICN ;
LBRACE {
INTTK int
IDENFR a
ASSIGN =
IDENFR d
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
IDENFR a
ASSIGN =
IDENFR f
PLUS +
IDENFR r
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
INTTK int
IDENFR arr
ASSIGN =
INTCON 3
PLUS +
IDENFR f
SEMICN ;
RBRACE }
RBRACE }
RBRACE }
CONSTTK const
CHARTK char
IDENFR func2
ASSIGN =
INTCON 100
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "oh, that is complicated %d"
COMMA ,
IDENFR func2
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
CONSTTK const
CHARTK char
IDENFR a
ASSIGN =
CHRCON '\''
SEMICN ;
IDENFR a
ASSIGN =
CHRCON '\"'
SEMICN ;
CONSTTK const
CHARTK char
IDENFR s
LBRACK [
INTCON 15
ASSIGN =
STRCON "hello world"
SEMICN ;
IDENFR s
LBRACK [
INTCON 10
RBRACK ]
ASSIGN =
CHRCON '*'
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
CONSTTK const
CHARTK char
IDENFR a
ASSIGN =
CHRCON '\''
SEMICN ;
IDENFR a
ASSIGN =
CHRCON '\"'
SEMICN ;
CONSTTK const
CHARTK char
IDENFR s
LBRACK [
INTCON 15
ASSIGN =
STRCON "hello world"
SEMICN ;
IDENFR s
LBRACK [
INTCON 10
RBRACK ]
ASSIGN =
CHRCON '*'
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
CONSTTK const
CHARTK char
IDENFR a
ASSIGN =
CHRCON '\''
SEMICN ;
IDENFR a
ASSIGN =
CHRCON '\"'
SEMICN ;
CONSTTK const
CHARTK char
IDENFR s
LBRACK [
INTCON 15
ASSIGN =
STRCON "hello world"
SEMICN ;
IDENFR s
LBRACK [
INTCON 10
RBRACK ]
ASSIGN =
CHRCON '*'
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
CONSTTK const
CHARTK char
IDENFR a
ASSIGN =
CHRCON '\''
SEMICN ;
IDENFR a
ASSIGN =
CHRCON '\"'
SEMICN ;
CONSTTK const
CHARTK char
IDENFR s
LBRACK [
INTCON 15
ASSIGN =
STRCON "hello world"
SEMICN ;
IDENFR s
LBRACK [
INTCON 10
RBRACK ]
ASSIGN =
CHRCON '*'
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
CONSTTK const
INTTK int
IDENFR a
ASSIGN =
INTCON 1
COMMA ,
IDENFR b
ASSIGN =
INTCON 2
CONSTTK const
CHARTK char
IDENFR c
ASSIGN =
INTCON 3
COMMA ,
IDENFR d
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
LBRACE {
INTCON 0
RBRACE }
INTTK int
IDENFR aa
COMMA ,
IDENFR bb
COMMA ,
IDENFR cc
ASSIGN =
INTCON 1
COMMA ,
IDENFR dd
VOIDTK void
IDENFR fun
LPARENT (
RPARENT )
LBRACE {
IDENFR a
IDENFR b
IDENFR aa
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
IDENFR c
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
IDENFR a
IDENFR b
IDENFR aa
IDENFR c
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
CONSTTK const
INTTK int
IDENFR a
ASSIGN =
INTCON 1
COMMA ,
IDENFR b
ASSIGN =
INTCON 2
CONSTTK const
CHARTK char
IDENFR c
ASSIGN =
INTCON 3
COMMA ,
IDENFR d
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
LBRACE {
INTCON 0
RBRACE }
INTTK int
IDENFR aa
COMMA ,
IDENFR bb
COMMA ,
IDENFR cc
ASSIGN =
INTCON 1
COMMA ,
IDENFR dd
VOIDTK void
IDENFR fun
LPARENT (
RPARENT )
LBRACE {
IDENFR a
IDENFR b
IDENFR aa
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
IDENFR c
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
IDENFR a
IDENFR b
IDENFR aa
IDENFR c
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
CONSTTK const
INTTK int
IDENFR a
ASSIGN =
INTCON 1
COMMA ,
IDENFR b
ASSIGN =
INTCON 2
CONSTTK const
CHARTK char
IDENFR c
ASSIGN =
INTCON 3
COMMA ,
IDENFR d
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
LBRACE {
INTCON 0
RBRACE }
INTTK int
IDENFR aa
COMMA ,
IDENFR bb
COMMA ,
IDENFR cc
ASSIGN =
INTCON 1
COMMA ,
IDENFR dd
VOIDTK void
IDENFR fun
LPARENT (
RPARENT )
LBRACE {
IDENFR a
IDENFR b
IDENFR aa
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
IDENFR c
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
IDENFR a
IDENFR b
IDENFR aa
IDENFR c
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
IDENFR a
SEMICN ;
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
IDENFR a
LPARENT (
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
IDENFR a
SEMICN ;
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
IDENFR a
LPARENT (
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
CHARTK char
IDENFR func1
LPARENT (
CHARTK char
IDENFR b
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
RETURNTK return
CHRCON 'c'
SEMICN ;
RBRACE }
INTTK int
IDENFR func2
LPARENT (
CHARTK char
IDENFR c
RPARENT )
LBRACE {
RETURNTK return
INTCON 1
SEMICN ;
RBRACE }
INTTK int
IDENFR func3
LPARENT (
INTTK int
IDENFR a
RPARENT )
LBRACE {
RETURNTK return
IDENFR a
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
CHARTK char
IDENFR b
LBRACK [
INTCON 6
RBRACK ]
SEMICN ;
IDENFR func3
LPARENT (
IDENFR func2
LPARENT (
IDENFR func1
LPARENT (
IDENFR b
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
RPARENT )
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
CHARTK char
IDENFR func1
LPARENT (
CHARTK char
IDENFR b
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
RETURNTK return
CHRCON 'c'
SEMICN ;
RBRACE }
INTTK int
IDENFR func2
LPARENT (
CHARTK char
IDENFR c
RPARENT )
LBRACE {
RETURNTK return
INTCON 1
SEMICN ;
RBRACE }
INTTK int
IDENFR func3
LPARENT (
INTTK int
IDENFR a
RPARENT )
LBRACE {
RETURNTK return
IDENFR a
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
CHARTK char
IDENFR b
LBRACK [
INTCON 6
RBRACK ]
SEMICN ;
IDENFR func3
LPARENT (
IDENFR func2
LPARENT (
IDENFR func1
LPARENT (
IDENFR b
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
RPARENT )
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
CHARTK char
IDENFR func1
LPARENT (
CHARTK char
IDENFR b
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
RETURNTK return
CHRCON 'c'
SEMICN ;
RBRACE }
INTTK int
IDENFR func2
LPARENT (
CHARTK char
IDENFR c
RPARENT )
LBRACE {
RETURNTK return
INTCON 1
SEMICN ;
RBRACE }
INTTK int
IDENFR func3
LPARENT (
INTTK int
IDENFR a
RPARENT )
LBRACE {
RETURNTK return
IDENFR a
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
CHARTK char
IDENFR b
LBRACK [
INTCON 6
RBRACK ]
SEMICN ;
IDENFR func3
LPARENT (
IDENFR func2
LPARENT (
IDENFR func1
LPARENT (
IDENFR b
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
RPARENT )
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
CHARTK char
IDENFR func1
LPARENT (
CHARTK char
IDENFR b
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
RETURNTK return
CHRCON 'c'
SEMICN ;
RBRACE }
INTTK int
IDENFR func2
LPARENT (
CHARTK char
IDENFR c
RPARENT )
LBRACE {
RETURNTK return
INTCON 1
SEMICN ;
RBRACE }
INTTK int
IDENFR func3
LPARENT (
INTTK int
IDENFR a
RPARENT )
LBRACE {
RETURNTK return
IDENFR a
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
CHARTK char
IDENFR b
LBRACK [
INTCON 6
RBRACK ]
SEMICN ;
IDENFR func3
LPARENT (
IDENFR func2
LPARENT (
IDENFR func1
LPARENT (
IDENFR b
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
RPARENT )
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
CHARTK char
IDENFR func1
LPARENT (
CHARTK char
IDENFR b
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
RETURNTK return
CHRCON 'c'
SEMICN ;
RBRACE }
INTTK int
IDENFR func2
LPARENT (
CHARTK char
IDENFR c
RPARENT )
LBRACE {
RETURNTK return
INTCON 1
SEMICN ;
RBRACE }
INTTK int
IDENFR func3
LPARENT (
INTTK int
IDENFR a
RPARENT )
LBRACE {
RETURNTK return
IDENFR a
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
CHARTK char
IDENFR b
LBRACK [
INTCON 6
RBRACK ]
SEMICN ;
IDENFR func3
LPARENT (
IDENFR func2
LPARENT (
IDENFR func1
LPARENT (
IDENFR b
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
RPARENT )
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
CONSTTK const
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
FORTK for
LPARENT (
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
INTCON 10
SEMICN ;
IDENFR i
PLUS +
PLUS +
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
CONSTTK const
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
INTCON 10
SEMICN ;
IDENFR i
PLUS +
PLUS +
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
CONSTTK const
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
INTCON 10
SEMICN ;
IDENFR i
PLUS +
PLUS +
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
CONSTTK const
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
INTCON 10
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
CONSTTK const
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
INTCON 10
SEMICN ;
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
CONSTTK const
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
INTCON 10
SEMICN ;
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
RBRACE }
INTTK int
IDENFR f1
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
IDENFR f1
LPARENT (
INTCON 1
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
CONSTTK const
INTTK int
IDENFR a
ASSIGN =
INTCON 1
COMMA ,
IDENFR b
ASSIGN =
INTCON 2
CONSTTK const
CHARTK char
IDENFR c
ASSIGN =
INTCON 3
COMMA ,
IDENFR d
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
LBRACE {
INTCON 0
RBRACE }
INTTK int
IDENFR aa
COMMA ,
IDENFR bb
COMMA ,
IDENFR cc
ASSIGN =
INTCON 1
COMMA ,
IDENFR dd
VOIDTK void
IDENFR fun
LPARENT (
RPARENT )
LBRACE {
IDENFR a
IDENFR b
IDENFR aa
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
IDENFR c
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
IDENFR a
IDENFR b
IDENFR aa
IDENFR c
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
CONSTTK const
INTTK int
IDENFR a
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
RBRACE }
SEMICN ;
CONSTTK const
CHARTK char
IDENFR b
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
LBRACE {
CHRCON 'a'
RBRACE }
SEMICN ;
INTTK int
IDENFR f1
LPARENT (
INTTK int
IDENFR a
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
RETURNTK return
IDENFR a
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
RBRACE }
CHARTK char
IDENFR f2
LPARENT (
CHARTK char
IDENFR a
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
RETURNTK return
IDENFR a
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
IDENFR f1
LPARENT (
IDENFR b
RPARENT )
SEMICN ;
IDENFR f2
LPARENT (
IDENFR a
RPARENT )
SEMICN ;
RBRACE }
CONSTTK const
INTTK int
IDENFR a
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
RBRACE }
SEMICN ;
CONSTTK const
CHARTK char
IDENFR b
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
LBRACE {
CHRCON 'a'
RBRACE }
SEMICN ;
INTTK int
IDENFR f1
LPARENT (
INTTK int
IDENFR a
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
RETURNTK return
IDENFR a
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
RBRACE }
CHARTK char
IDENFR f2
LPARENT (
CHARTK char
IDENFR a
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
RETURNTK return
IDENFR a
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
IDENFR f1
LPARENT (
IDENFR a
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR f2
LPARENT (
IDENFR a
RPARENT )
SEMICN ;
RBRACE }
CONSTTK const
INTTK int
IDENFR a
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
RBRACE }
SEMICN ;
CONSTTK const
CHARTK char
IDENFR b
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
LBRACE {
CHRCON 'a'
RBRACE }
SEMICN ;
INTTK int
IDENFR f1
LPARENT (
INTTK int
IDENFR a
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
RETURNTK return
IDENFR a
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
RBRACE }
CHARTK char
IDENFR f2
LPARENT (
CHARTK char
IDENFR a
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
RETURNTK return
IDENFR a
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
IDENFR f1
LPARENT (
IDENFR a
RPARENT )
SEMICN ;
IDENFR f2
LPARENT (
IDENFR a
RPARENT )
SEMICN ;
RBRACE }
CONSTTK const
INTTK int
IDENFR a
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
RBRACE }
SEMICN ;
CONSTTK const
CHARTK char
IDENFR b
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
LBRACE {
CHRCON 'a'
RBRACE }
SEMICN ;
INTTK int
IDENFR f1
LPARENT (
INTTK int
IDENFR a
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
RETURNTK return
IDENFR a
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
RBRACE }
CHARTK char
IDENFR f2
LPARENT (
CHARTK char
IDENFR a
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
RETURNTK return
IDENFR a
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
IDENFR f1
LPARENT (
IDENFR a
RPARENT )
SEMICN ;
IDENFR f2
LPARENT (
IDENFR a
RPARENT )
SEMICN ;
RBRACE }
CONSTTK const
INTTK int
IDENFR a
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
RBRACE }
SEMICN ;
CONSTTK const
CHARTK char
IDENFR b
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
LBRACE {
CHRCON 'a'
RBRACE }
SEMICN ;
INTTK int
IDENFR f1
LPARENT (
INTTK int
IDENFR a
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
RETURNTK return
IDENFR a
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
RBRACE }
CHARTK char
IDENFR f2
LPARENT (
CHARTK char
IDENFR a
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
RETURNTK return
IDENFR a
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
IDENFR f1
LPARENT (
IDENFR a
RPARENT )
SEMICN ;
IDENFR f2
LPARENT (
IDENFR a
RPARENT )
SEMICN ;
RBRACE }
CONSTTK const
INTTK int
IDENFR a
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
RBRACE }
SEMICN ;
CONSTTK const
CHARTK char
IDENFR b
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
LBRACE {
CHRCON 'a'
RBRACE }
SEMICN ;
INTTK int
IDENFR f1
LPARENT (
INTTK int
IDENFR a
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
RETURNTK return
IDENFR a
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
RBRACE }
CHARTK char
IDENFR f2
LPARENT (
CHARTK char
IDENFR a
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
RETURNTK return
IDENFR a
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
IDENFR f1
LPARENT (
IDENFR a
RPARENT )
SEMICN ;
IDENFR f2
LPARENT (
IDENFR a
RPARENT )
SEMICN ;
RBRACE }
CONSTTK const
INTTK int
IDENFR a
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
RBRACE }
SEMICN ;
CONSTTK const
CHARTK char
IDENFR b
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
LBRACE {
CHRCON 'a'
RBRACE }
SEMICN ;
INTTK int
IDENFR f1
LPARENT (
INTTK int
IDENFR a
LBRACK [
LBRACE {
RETURNTK return
IDENFR a
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
RBRACE }
CHARTK char
IDENFR f2
LPARENT (
CHARTK char
IDENFR a
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
RETURNTK return
IDENFR a
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
IDENFR f1
LPARENT (
IDENFR a
RPARENT )
SEMICN ;
IDENFR f2
LPARENT (
IDENFR a
RPARENT )
SEMICN ;
RBRACE }
CONSTTK const
INTTK int
IDENFR a
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
RBRACE }
SEMICN ;
CONSTTK const
CHARTK char
IDENFR b
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
LBRACE {
CHRCON 'a'
RBRACE }
SEMICN ;
INTTK int
IDENFR f1
LPARENT (
INTTK int
IDENFR a
LBRACK [
LBRACE {
RETURNTK return
IDENFR a
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
RBRACE }
CHARTK char
IDENFR f2
LPARENT (
CHARTK char
IDENFR a
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
RETURNTK return
IDENFR a
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
IDENFR f1
LPARENT (
IDENFR a
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR f2
LPARENT (
IDENFR a
RPARENT )
SEMICN ;
RBRACE }
CONSTTK const
INTTK int
IDENFR a
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
RBRACE }
SEMICN ;
CONSTTK const
CHARTK char
IDENFR b
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
LBRACE {
CHRCON 'a'
RBRACE }
SEMICN ;
INTTK int
IDENFR c
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
RBRACE }
SEMICN ;
INTTK int
IDENFR f1
LPARENT (
INTTK int
IDENFR a
LBRACK [
LBRACE {
RETURNTK return
IDENFR a
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
RBRACE }
CHARTK char
IDENFR f2
LPARENT (
CHARTK char
IDENFR a
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
RETURNTK return
IDENFR a
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
IDENFR f1
LPARENT (
IDENFR a
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR f1
LPARENT (
IDENFR c
RPARENT )
SEMICN ;
IDENFR f2
LPARENT (
IDENFR a
RPARENT )
SEMICN ;
RBRACE }
CONSTTK const
INTTK int
IDENFR a
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
RBRACE }
SEMICN ;
CONSTTK const
CHARTK char
IDENFR b
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
LBRACE {
CHRCON 'a'
RBRACE }
SEMICN ;
INTTK int
IDENFR c
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
RBRACE }
SEMICN ;
INTTK int
IDENFR f1
LPARENT (
INTTK int
IDENFR a
LBRACK [
LBRACE {
RETURNTK return
IDENFR a
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
RBRACE }
CHARTK char
IDENFR f2
LPARENT (
CHARTK char
IDENFR a
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
RETURNTK return
IDENFR a
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR a
ASSIGN =
INTCON 0
SEMICN ;
IDENFR f1
LPARENT (
IDENFR a
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR f1
LPARENT (
IDENFR c
RPARENT )
SEMICN ;
IDENFR f2
LPARENT (
IDENFR a
RPARENT )
SEMICN ;
RBRACE }
CONSTTK const
INTTK int
IDENFR a
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
RBRACE }
SEMICN ;
CONSTTK const
CHARTK char
IDENFR b
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
LBRACE {
CHRCON 'a'
RBRACE }
SEMICN ;
INTTK int
IDENFR c
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
RBRACE }
SEMICN ;
INTTK int
IDENFR f1
LPARENT (
INTTK int
IDENFR a
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
RETURNTK return
IDENFR a
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
RBRACE }
CHARTK char
IDENFR f2
LPARENT (
CHARTK char
IDENFR a
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
RETURNTK return
IDENFR a
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR a
ASSIGN =
INTCON 0
SEMICN ;
CHARTK char
IDENFR a
ASSIGN =
INTCON 0
SEMICN ;
IDENFR f1
LPARENT (
IDENFR a
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR f1
LPARENT (
IDENFR c
RPARENT )
SEMICN ;
IDENFR f2
LPARENT (
IDENFR a
RPARENT )
SEMICN ;
RBRACE }
CONSTTK const
INTTK int
IDENFR a
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
RBRACE }
SEMICN ;
CONSTTK const
CHARTK char
IDENFR b
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
LBRACE {
CHRCON 'a'
RBRACE }
SEMICN ;
INTTK int
IDENFR c
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
RBRACE }
SEMICN ;
INTTK int
IDENFR f1
LPARENT (
INTTK int
IDENFR a
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
RETURNTK return
IDENFR a
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
RBRACE }
CHARTK char
IDENFR f2
LPARENT (
CHARTK char
IDENFR a
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
RETURNTK return
IDENFR a
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR a
ASSIGN =
INTCON 0
SEMICN ;
FORTK for
LPARENT (
IDENFR a
ASSIGN =
INTCON 0
SEMICN ;
IDENFR a
LSS <
INTCON 10
SEMICN ;
IDENFR a
ASSIGN =
IDENFR a
PLUS +
INTCON 1
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
IDENFR a
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IDENFR f1
LPARENT (
IDENFR a
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR f1
LPARENT (
IDENFR c
RPARENT )
SEMICN ;
IDENFR f2
LPARENT (
IDENFR a
RPARENT )
SEMICN ;
RBRACE }
CONSTTK const
INTTK int
IDENFR a
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
RBRACE }
SEMICN ;
CONSTTK const
CHARTK char
IDENFR b
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
LBRACE {
CHRCON 'a'
RBRACE }
SEMICN ;
CONSTTK const
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
INTTK int
IDENFR c
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
RBRACE }
SEMICN ;
INTTK int
IDENFR f1
LPARENT (
INTTK int
IDENFR a
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
RETURNTK return
IDENFR a
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
RBRACE }
CHARTK char
IDENFR f2
LPARENT (
CHARTK char
IDENFR a
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
RETURNTK return
IDENFR a
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR a
LSS <
INTCON 10
SEMICN ;
IDENFR a
ASSIGN =
IDENFR a
PLUS +
INTCON 1
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
IDENFR a
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IDENFR f1
LPARENT (
IDENFR a
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR f1
LPARENT (
IDENFR c
RPARENT )
SEMICN ;
IDENFR f2
LPARENT (
IDENFR a
RPARENT )
SEMICN ;
RBRACE }
CONSTTK const
INTTK int
IDENFR a
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
RBRACE }
SEMICN ;
CONSTTK const
CHARTK char
IDENFR b
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
LBRACE {
CHRCON 'a'
RBRACE }
SEMICN ;
CONSTTK const
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
INTTK int
IDENFR c
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
RBRACE }
SEMICN ;
INTTK int
IDENFR f1
LPARENT (
INTTK int
IDENFR a
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
RETURNTK return
IDENFR a
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
RBRACE }
INTTK int
IDENFR f1
LPARENT (
INTTK int
IDENFR a
RPARENT )
LBRACE {
RBRACE }
CHARTK char
IDENFR f2
LPARENT (
CHARTK char
IDENFR a
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
RETURNTK return
IDENFR a
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR a
LSS <
INTCON 10
SEMICN ;
IDENFR a
ASSIGN =
IDENFR a
PLUS +
INTCON 1
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
IDENFR a
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IDENFR f1
LPARENT (
IDENFR a
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR f1
LPARENT (
IDENFR c
RPARENT )
SEMICN ;
IDENFR f2
LPARENT (
IDENFR a
RPARENT )
SEMICN ;
RBRACE }
INTTK int
IDENFR f1
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
IDENFR f1
LPARENT (
INTCON 1
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
CONSTTK const
INTTK int
IDENFR a1
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
RBRACE }
SEMICN ;
CONSTTK const
CHARTK char
IDENFR b1
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
STRCON "ab"
SEMICN ;
INTTK int
IDENFR a2
LBRACK [
INTCON 2
RBRACK ]
SEMICN ;
CHARTK char
IDENFR b2
LBRACK [
INTCON 4
RBRACK ]
SEMICN ;
INTTK int
IDENFR a3
SEMICN ;
CHARTK char
IDENFR b3
SEMICN ;
CONSTTK const
INTTK int
IDENFR a4
SEMICN ;
CONSTTK const
INTTK int
IDENFR b4
SEMICN ;
INTTK int
IDENFR fint
LPARENT (
INTTK int
IDENFR a
RPARENT )
LBRACE {
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
CHARTK char
IDENFR fchar
LPARENT (
CHARTK char
IDENFR a
RPARENT )
LBRACE {
RETURNTK return
CHRCON 'a'
SEMICN ;
RBRACE }
INTTK int
IDENFR fint_array
LPARENT (
INTTK int
IDENFR a
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
CHARTK char
IDENFR fchar_array
LPARENT (
INTTK int
IDENFR a
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
RETURNTK return
CHRCON 'a'
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
IDENFR fint
LPARENT (
IDENFR a1
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR b1
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR a1
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR b1
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR a2
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR b2
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR a2
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR b2
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR a3
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR b3
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR a4
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR b4
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
INTCON 1
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
CHRCON 'a'
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR a1
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR b1
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR a1
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR b1
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR a2
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR b2
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR a2
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR b2
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR a3
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR b3
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR a4
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR b4
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
INTCON 1
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
CHRCON 'a'
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR a1
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR b1
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR a1
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR b1
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR a2
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR b2
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR a2
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR b2
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR a3
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR b3
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR a4
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR b4
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
INTCON 1
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
CHRCON 'a'
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR a1
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR b1
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR a1
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR b1
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR a2
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR b2
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR a2
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR b2
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR a3
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR b3
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR a4
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR b4
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
INTCON 1
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
CHRCON 'a'
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
CONSTTK const
INTTK int
IDENFR a1
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
RBRACE }
SEMICN ;
CONSTTK const
CHARTK char
IDENFR b1
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
STRCON "ab"
SEMICN ;
INTTK int
IDENFR a2
LBRACK [
INTCON 2
RBRACK ]
SEMICN ;
CHARTK char
IDENFR b2
LBRACK [
INTCON 4
RBRACK ]
SEMICN ;
INTTK int
IDENFR a3
SEMICN ;
CHARTK char
IDENFR b3
SEMICN ;
CONSTTK const
INTTK int
IDENFR a4
ASSIGN =
INTCON 0
SEMICN ;
CONSTTK const
INTTK int
IDENFR b4
ASSIGN =
INTCON 0
SEMICN ;
INTTK int
IDENFR fint
LPARENT (
INTTK int
IDENFR a
RPARENT )
LBRACE {
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
CHARTK char
IDENFR fchar
LPARENT (
CHARTK char
IDENFR a
RPARENT )
LBRACE {
RETURNTK return
CHRCON 'a'
SEMICN ;
RBRACE }
INTTK int
IDENFR fint_array
LPARENT (
INTTK int
IDENFR a
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
CHARTK char
IDENFR fchar_array
LPARENT (
INTTK int
IDENFR a
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
RETURNTK return
CHRCON 'a'
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
IDENFR fint
LPARENT (
IDENFR a1
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR b1
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR a1
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR b1
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR a2
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR b2
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR a2
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR b2
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR a3
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR b3
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR a4
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR b4
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
INTCON 1
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
CHRCON 'a'
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR a1
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR b1
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR a1
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR b1
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR a2
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR b2
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR a2
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR b2
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR a3
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR b3
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR a4
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR b4
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
INTCON 1
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
CHRCON 'a'
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR a1
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR b1
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR a1
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR b1
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR a2
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR b2
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR a2
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR b2
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR a3
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR b3
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR a4
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR b4
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
INTCON 1
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
CHRCON 'a'
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR a1
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR b1
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR a1
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR b1
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR a2
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR b2
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR a2
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR b2
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR a3
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR b3
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR a4
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR b4
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
INTCON 1
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
CHRCON 'a'
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
CONSTTK const
INTTK int
IDENFR a1
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
RBRACE }
SEMICN ;
CONSTTK const
CHARTK char
IDENFR b1
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
STRCON "ab"
SEMICN ;
INTTK int
IDENFR a2
LBRACK [
INTCON 2
RBRACK ]
SEMICN ;
CHARTK char
IDENFR b2
LBRACK [
INTCON 4
RBRACK ]
SEMICN ;
INTTK int
IDENFR a3
SEMICN ;
CHARTK char
IDENFR b3
SEMICN ;
CONSTTK const
INTTK int
IDENFR a4
ASSIGN =
INTCON 0
SEMICN ;
CONSTTK const
INTTK int
IDENFR b4
ASSIGN =
INTCON 0
SEMICN ;
INTTK int
IDENFR fint
LPARENT (
INTTK int
IDENFR a
RPARENT )
LBRACE {
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
CHARTK char
IDENFR fchar
LPARENT (
CHARTK char
IDENFR a
RPARENT )
LBRACE {
RETURNTK return
CHRCON 'a'
SEMICN ;
RBRACE }
INTTK int
IDENFR fint_array
LPARENT (
INTTK int
IDENFR a
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
CHARTK char
IDENFR fchar_array
LPARENT (
INTTK int
IDENFR a
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
RETURNTK return
CHRCON 'a'
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
IDENFR fint
LPARENT (
IDENFR a1
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR b1
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR a1
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR b1
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR a2
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR b2
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR a2
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR b2
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR a3
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR b3
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR a4
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR b4
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
INTCON 1
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
CHRCON 'a'
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR a1
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR b1
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR a1
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR b1
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR a2
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR b2
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR a2
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR b2
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR a3
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR b3
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR a4
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR b4
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
INTCON 1
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
CHRCON 'a'
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR a1
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR b1
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR a1
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR b1
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR a2
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR b2
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR a2
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR b2
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR a3
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR b3
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR a4
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR b4
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
INTCON 1
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
CHRCON 'a'
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR a1
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR b1
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR a1
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR b1
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR a2
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR b2
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR a2
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR b2
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR a3
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR b3
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR a4
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR b4
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
INTCON 1
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
CHRCON 'a'
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
CONSTTK const
INTTK int
IDENFR a1
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
RBRACE }
SEMICN ;
CONSTTK const
CHARTK char
IDENFR b1
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
STRCON "ab"
SEMICN ;
INTTK int
IDENFR a2
LBRACK [
INTCON 2
RBRACK ]
SEMICN ;
CHARTK char
IDENFR b2
LBRACK [
INTCON 4
RBRACK ]
SEMICN ;
INTTK int
IDENFR a3
SEMICN ;
CHARTK char
IDENFR b3
SEMICN ;
CONSTTK const
INTTK int
IDENFR a4
ASSIGN =
INTCON 0
SEMICN ;
CONSTTK const
INTTK int
IDENFR b4
ASSIGN =
INTCON 0
SEMICN ;
INTTK int
IDENFR fint
LPARENT (
INTTK int
IDENFR a
RPARENT )
LBRACE {
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
CHARTK char
IDENFR fchar
LPARENT (
CHARTK char
IDENFR a
RPARENT )
LBRACE {
RETURNTK return
CHRCON 'a'
SEMICN ;
RBRACE }
INTTK int
IDENFR fint_array
LPARENT (
INTTK int
IDENFR a
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
CHARTK char
IDENFR fchar_array
LPARENT (
INTTK int
IDENFR a
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
RETURNTK return
CHRCON 'a'
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
IDENFR fint
LPARENT (
IDENFR a1
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR b1
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR a1
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR b1
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR a2
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR b2
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR a2
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR b2
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR a3
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR b3
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR a4
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR b4
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
INTCON 1
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
CHRCON 'a'
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR a1
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR b1
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR a1
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR b1
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR a2
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR b2
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR a2
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR b2
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR a3
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR b3
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR a4
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR b4
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
INTCON 1
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
CHRCON 'a'
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR a1
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR b1
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR a1
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR b1
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR a2
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR b2
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR a2
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR b2
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR a3
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR b3
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR a4
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR b4
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
INTCON 1
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
CHRCON 'a'
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR a1
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR b1
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR a1
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR b1
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR a2
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR b2
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR a2
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR b2
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR a3
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR b3
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR a4
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR b4
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
INTCON 1
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
CHRCON 'a'
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
CONSTTK const
INTTK int
IDENFR a1
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
RBRACE }
SEMICN ;
CONSTTK const
CHARTK char
IDENFR b1
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
STRCON "ab"
SEMICN ;
INTTK int
IDENFR a2
LBRACK [
INTCON 2
RBRACK ]
SEMICN ;
CHARTK char
IDENFR b2
LBRACK [
INTCON 4
RBRACK ]
SEMICN ;
INTTK int
IDENFR a3
SEMICN ;
CHARTK char
IDENFR b3
SEMICN ;
CONSTTK const
INTTK int
IDENFR a4
ASSIGN =
INTCON 0
SEMICN ;
CONSTTK const
INTTK int
IDENFR b4
ASSIGN =
INTCON 0
SEMICN ;
INTTK int
IDENFR fint
LPARENT (
INTTK int
IDENFR a
RPARENT )
LBRACE {
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
CHARTK char
IDENFR fchar
LPARENT (
CHARTK char
IDENFR a
RPARENT )
LBRACE {
RETURNTK return
CHRCON 'a'
SEMICN ;
RBRACE }
INTTK int
IDENFR fint_array
LPARENT (
INTTK int
IDENFR a
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
CHARTK char
IDENFR fchar_array
LPARENT (
CHARTK char
IDENFR a
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
RETURNTK return
CHRCON 'a'
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
IDENFR fint
LPARENT (
IDENFR a1
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR b1
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR a1
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR b1
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR a2
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR b2
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR a2
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR b2
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR a3
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR b3
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR a4
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR b4
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
INTCON 1
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
CHRCON 'a'
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR a1
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR b1
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR a1
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR b1
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR a2
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR b2
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR a2
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR b2
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR a3
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR b3
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR a4
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR b4
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
INTCON 1
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
CHRCON 'a'
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR a1
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR b1
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR a1
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR b1
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR a2
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR b2
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR a2
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR b2
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR a3
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR b3
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR a4
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR b4
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
INTCON 1
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
CHRCON 'a'
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR a1
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR b1
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR a1
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR b1
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR a2
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR b2
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR a2
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR b2
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR a3
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR b3
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR a4
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR b4
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
INTCON 1
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
CHRCON 'a'
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
CONSTTK const
INTTK int
IDENFR a1
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
RBRACE }
SEMICN ;
CONSTTK const
CHARTK char
IDENFR b1
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
STRCON "ab"
SEMICN ;
INTTK int
IDENFR a2
LBRACK [
INTCON 2
RBRACK ]
SEMICN ;
CHARTK char
IDENFR b2
LBRACK [
INTCON 4
RBRACK ]
SEMICN ;
INTTK int
IDENFR a3
SEMICN ;
CHARTK char
IDENFR b3
SEMICN ;
CONSTTK const
INTTK int
IDENFR a4
ASSIGN =
INTCON 0
SEMICN ;
CONSTTK const
INTTK int
IDENFR b4
ASSIGN =
INTCON 0
SEMICN ;
INTTK int
IDENFR fint
LPARENT (
INTTK int
IDENFR a
RPARENT )
LBRACE {
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
CHARTK char
IDENFR fchar
LPARENT (
CHARTK char
IDENFR a
RPARENT )
LBRACE {
RETURNTK return
CHRCON 'a'
SEMICN ;
RBRACE }
INTTK int
IDENFR fint_array
LPARENT (
INTTK int
IDENFR a
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
CHARTK char
IDENFR fchar_array
LPARENT (
CHARTK char
IDENFR a
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
RETURNTK return
CHRCON 'a'
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
IDENFR fint
LPARENT (
IDENFR a1
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR b1
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR a1
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR b1
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR a2
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR b2
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR a2
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR b2
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR a3
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR b3
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR a4
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR b4
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
INTCON 1
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
CHRCON 'a'
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR fint
LPARENT (
INTCON 1
RPARENT )
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR a1
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR b1
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR a1
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR b1
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR a2
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR b2
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR a2
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR b2
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR a3
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR b3
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR a4
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR b4
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
INTCON 1
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
CHRCON 'a'
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR a1
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR b1
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR a1
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR b1
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR a2
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR b2
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR a2
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR b2
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR a3
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR b3
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR a4
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR b4
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
INTCON 1
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
CHRCON 'a'
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR a1
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR b1
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR a1
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR b1
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR a2
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR b2
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR a2
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR b2
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR a3
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR b3
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR a4
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR b4
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
INTCON 1
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
CHRCON 'a'
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
CONSTTK const
INTTK int
IDENFR a1
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
RBRACE }
SEMICN ;
CONSTTK const
CHARTK char
IDENFR b1
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
STRCON "ab"
SEMICN ;
INTTK int
IDENFR a2
LBRACK [
INTCON 2
RBRACK ]
SEMICN ;
CHARTK char
IDENFR b2
LBRACK [
INTCON 4
RBRACK ]
SEMICN ;
INTTK int
IDENFR a3
SEMICN ;
CHARTK char
IDENFR b3
SEMICN ;
CONSTTK const
INTTK int
IDENFR a4
ASSIGN =
INTCON 0
SEMICN ;
CONSTTK const
CHARTK char
IDENFR b4
ASSIGN =
INTCON 0
SEMICN ;
INTTK int
IDENFR fint
LPARENT (
INTTK int
IDENFR a
RPARENT )
LBRACE {
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
CHARTK char
IDENFR fchar
LPARENT (
CHARTK char
IDENFR a
RPARENT )
LBRACE {
RETURNTK return
CHRCON 'a'
SEMICN ;
RBRACE }
INTTK int
IDENFR fint_array
LPARENT (
INTTK int
IDENFR a
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
CHARTK char
IDENFR fchar_array
LPARENT (
CHARTK char
IDENFR a
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
RETURNTK return
CHRCON 'a'
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
IDENFR fint
LPARENT (
IDENFR a1
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR b1
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR a1
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR b1
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR a2
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR b2
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR a2
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR b2
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR a3
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR b3
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR a4
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR b4
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
INTCON 1
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
CHRCON 'a'
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR fint
LPARENT (
INTCON 1
RPARENT )
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR a1
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR b1
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR a1
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR b1
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR a2
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR b2
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR a2
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR b2
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR a3
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR b3
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR a4
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR b4
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
INTCON 1
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
CHRCON 'a'
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR a1
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR b1
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR a1
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR b1
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR a2
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR b2
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR a2
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR b2
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR a3
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR b3
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR a4
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR b4
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
INTCON 1
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
CHRCON 'a'
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR a1
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR b1
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR a1
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR b1
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR a2
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR b2
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR a2
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR b2
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR a3
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR b3
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR a4
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR b4
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
INTCON 1
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
CHRCON 'a'
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR fint
LPARENT (
INTTK int
IDENFR a
RPARENT )
LBRACE {
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
CHARTK char
IDENFR fchar
LPARENT (
CHARTK char
IDENFR a
RPARENT )
LBRACE {
RETURNTK return
CHRCON 'a'
SEMICN ;
RBRACE }
INTTK int
IDENFR fint_array
LPARENT (
INTTK int
IDENFR a
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
CHARTK char
IDENFR fchar_array
LPARENT (
CHARTK char
IDENFR a
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
RETURNTK return
CHRCON 'a'
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
CONSTTK const
INTTK int
IDENFR a1
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
RBRACE }
SEMICN ;
CONSTTK const
CHARTK char
IDENFR b1
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
STRCON "ab"
SEMICN ;
INTTK int
IDENFR a2
LBRACK [
INTCON 2
RBRACK ]
SEMICN ;
CHARTK char
IDENFR b2
LBRACK [
INTCON 4
RBRACK ]
SEMICN ;
INTTK int
IDENFR a3
SEMICN ;
CHARTK char
IDENFR b3
SEMICN ;
CONSTTK const
INTTK int
IDENFR a4
ASSIGN =
INTCON 0
SEMICN ;
CONSTTK const
CHARTK char
IDENFR b4
ASSIGN =
INTCON 0
SEMICN ;
IDENFR fint
LPARENT (
IDENFR a1
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR b1
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR a1
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR b1
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR a2
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR b2
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR a2
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR b2
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR a3
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR b3
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR a4
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR b4
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
INTCON 1
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
CHRCON 'a'
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR fint
LPARENT (
INTCON 1
RPARENT )
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR a1
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR b1
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR a1
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR b1
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR a2
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR b2
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR a2
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR b2
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR a3
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR b3
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR a4
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR b4
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
INTCON 1
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
CHRCON 'a'
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR a1
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR b1
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR a1
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR b1
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR a2
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR b2
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR a2
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR b2
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR a3
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR b3
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR a4
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR b4
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
INTCON 1
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
CHRCON 'a'
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR a1
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR b1
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR a1
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR b1
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR a2
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR b2
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR a2
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR b2
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR a3
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR b3
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR a4
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR b4
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
INTCON 1
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
CHRCON 'a'
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR fint
LPARENT (
INTTK int
IDENFR a
RPARENT )
LBRACE {
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
CHARTK char
IDENFR fchar
LPARENT (
CHARTK char
IDENFR a
RPARENT )
LBRACE {
RETURNTK return
CHRCON 'a'
SEMICN ;
RBRACE }
INTTK int
IDENFR fint_array
LPARENT (
INTTK int
IDENFR a
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
CHARTK char
IDENFR fchar_array
LPARENT (
CHARTK char
IDENFR a
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
RETURNTK return
CHRCON 'a'
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
CONSTTK const
INTTK int
IDENFR a1
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
RBRACE }
SEMICN ;
CONSTTK const
CHARTK char
IDENFR b1
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
STRCON "ab"
SEMICN ;
INTTK int
IDENFR a2
LBRACK [
INTCON 2
RBRACK ]
SEMICN ;
CHARTK char
IDENFR b2
LBRACK [
INTCON 4
RBRACK ]
SEMICN ;
INTTK int
IDENFR a3
SEMICN ;
CHARTK char
IDENFR b3
SEMICN ;
CONSTTK const
INTTK int
IDENFR a4
ASSIGN =
INTCON 0
SEMICN ;
CONSTTK const
CHARTK char
IDENFR b4
ASSIGN =
INTCON 0
SEMICN ;
IDENFR fint
LPARENT (
IDENFR a1
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR b1
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR a1
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR b1
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR a2
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR b2
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR a2
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR b2
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR a3
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR b3
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR a4
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR b4
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
INTCON 1
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
CHRCON 'a'
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR fint
LPARENT (
INTCON 1
RPARENT )
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR fchar
LPARENT (
CHRCON 'a'
RPARENT )
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR a1
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR b1
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR a1
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR b1
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR a2
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR b2
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR a2
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR b2
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR a3
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR b3
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR a4
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR b4
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
INTCON 1
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
CHRCON 'a'
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR fint
LPARENT (
INTCON 1
RPARENT )
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR fchar
LPARENT (
CHRCON 'a'
RPARENT )
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR a1
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR b1
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR a1
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR b1
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR a2
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR b2
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR a2
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR b2
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR a3
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR b3
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR a4
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR b4
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
INTCON 1
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
CHRCON 'a'
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR a1
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR b1
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR a1
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR b1
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR a2
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR b2
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR a2
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR b2
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR a3
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR b3
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR a4
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR b4
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
INTCON 1
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
CHRCON 'a'
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR a1
SEMICN ;
INTTK int
IDENFR fint
LPARENT (
INTTK int
IDENFR a
RPARENT )
LBRACE {
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
CHARTK char
IDENFR fchar
LPARENT (
CHARTK char
IDENFR a
RPARENT )
LBRACE {
RETURNTK return
CHRCON 'a'
SEMICN ;
RBRACE }
INTTK int
IDENFR fint_array
LPARENT (
INTTK int
IDENFR a
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
CHARTK char
IDENFR fchar_array
LPARENT (
CHARTK char
IDENFR a
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
RETURNTK return
CHRCON 'a'
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
CONSTTK const
INTTK int
IDENFR a1
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
RBRACE }
SEMICN ;
CONSTTK const
CHARTK char
IDENFR b1
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
STRCON "ab"
SEMICN ;
INTTK int
IDENFR a2
LBRACK [
INTCON 2
RBRACK ]
SEMICN ;
CHARTK char
IDENFR b2
LBRACK [
INTCON 4
RBRACK ]
SEMICN ;
INTTK int
IDENFR a3
SEMICN ;
CHARTK char
IDENFR b3
SEMICN ;
CONSTTK const
INTTK int
IDENFR a4
ASSIGN =
INTCON 0
SEMICN ;
CONSTTK const
CHARTK char
IDENFR b4
ASSIGN =
INTCON 0
SEMICN ;
IDENFR fint
LPARENT (
IDENFR a1
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR b1
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR a1
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR b1
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR a2
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR b2
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR a2
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR b2
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR a3
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR b3
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR a4
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR b4
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
INTCON 1
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
CHRCON 'a'
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR fint
LPARENT (
INTCON 1
RPARENT )
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR fchar
LPARENT (
CHRCON 'a'
RPARENT )
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR a1
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR b1
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR a1
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR b1
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR a2
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR b2
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR a2
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR b2
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR a3
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR b3
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR a4
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR b4
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
INTCON 1
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
CHRCON 'a'
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR fint
LPARENT (
INTCON 1
RPARENT )
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR fchar
LPARENT (
CHRCON 'a'
RPARENT )
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR a1
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR b1
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR a1
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR b1
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR a2
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR b2
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR a2
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR b2
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR a3
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR b3
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR a4
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR b4
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
INTCON 1
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
CHRCON 'a'
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR a1
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR b1
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR a1
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR b1
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR a2
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR b2
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR a2
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR b2
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR a3
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR b3
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR a4
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR b4
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
INTCON 1
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
CHRCON 'a'
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR fint
LPARENT (
INTTK int
IDENFR a
RPARENT )
LBRACE {
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
CHARTK char
IDENFR fchar
LPARENT (
CHARTK char
IDENFR a
RPARENT )
LBRACE {
RETURNTK return
CHRCON 'a'
SEMICN ;
RBRACE }
INTTK int
IDENFR fint_array
LPARENT (
INTTK int
IDENFR a
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
CHARTK char
IDENFR fchar_array
LPARENT (
CHARTK char
IDENFR a
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
RETURNTK return
CHRCON 'a'
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
CONSTTK const
INTTK int
IDENFR a1
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
RBRACE }
CONSTTK const
CHARTK char
IDENFR b1
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
STRCON "ab"
INTTK int
IDENFR a2
LBRACK [
INTCON 2
RBRACK ]
CHARTK char
IDENFR b2
LBRACK [
INTCON 4
RBRACK ]
INTTK int
IDENFR a3
CHARTK char
IDENFR b3
CONSTTK const
INTTK int
IDENFR a4
ASSIGN =
INTCON 0
CONSTTK const
CHARTK char
IDENFR b4
ASSIGN =
INTCON 0
IDENFR fint
LPARENT (
IDENFR a1
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR b1
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR a1
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR b1
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR a2
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR b2
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR a2
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR b2
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR a3
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR b3
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR a4
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR b4
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
INTCON 1
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
CHRCON 'a'
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR fint
LPARENT (
INTCON 1
RPARENT )
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR fchar
LPARENT (
CHRCON 'a'
RPARENT )
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR a1
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR b1
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR a1
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR b1
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR a2
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR b2
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR a2
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR b2
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR a3
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR b3
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR a4
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR b4
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
INTCON 1
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
CHRCON 'a'
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR fint
LPARENT (
INTCON 1
RPARENT )
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR fchar
LPARENT (
CHRCON 'a'
RPARENT )
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR a1
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR b1
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR a1
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR b1
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR a2
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR b2
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR a2
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR b2
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR a3
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR b3
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR a4
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR b4
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
INTCON 1
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
CHRCON 'a'
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR a1
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR b1
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR a1
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR b1
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR a2
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR b2
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR a2
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR b2
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR a3
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR b3
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR a4
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR b4
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
INTCON 1
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
CHRCON 'a'
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR fint
LPARENT (
INTTK int
IDENFR a
RPARENT )
LBRACE {
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
CHARTK char
IDENFR fchar
LPARENT (
CHARTK char
IDENFR a
RPARENT )
LBRACE {
RETURNTK return
CHRCON 'a'
SEMICN ;
RBRACE }
INTTK int
IDENFR fint_array
LPARENT (
INTTK int
IDENFR a
LBRACK [
RPARENT )
LBRACE {
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
CHARTK char
IDENFR fchar_array
LPARENT (
CHARTK char
IDENFR a
LBRACK [
RPARENT )
LBRACE {
RETURNTK return
CHRCON 'a'
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
CONSTTK const
INTTK int
IDENFR a1
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
RBRACE }
CONSTTK const
CHARTK char
IDENFR b1
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
STRCON "ab"
INTTK int
IDENFR a2
LBRACK [
INTCON 2
RBRACK ]
CHARTK char
IDENFR b2
LBRACK [
INTCON 4
RBRACK ]
INTTK int
IDENFR a3
CHARTK char
IDENFR b3
CONSTTK const
INTTK int
IDENFR a4
ASSIGN =
INTCON 0
CONSTTK const
CHARTK char
IDENFR b4
ASSIGN =
INTCON 0
IDENFR fint
LPARENT (
IDENFR a1
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR b1
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR a1
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR b1
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR a2
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR b2
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR a2
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR b2
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR a3
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR b3
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR a4
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR b4
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
INTCON 1
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
CHRCON 'a'
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR fint
LPARENT (
INTCON 1
RPARENT )
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR fchar
LPARENT (
CHRCON 'a'
RPARENT )
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR a1
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR b1
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR a1
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR b1
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR a2
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR b2
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR a2
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR b2
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR a3
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR b3
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR a4
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR b4
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
INTCON 1
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
CHRCON 'a'
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR fint
LPARENT (
INTCON 1
RPARENT )
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR fchar
LPARENT (
CHRCON 'a'
RPARENT )
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR a1
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR b1
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR a1
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR b1
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR a2
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR b2
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR a2
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR b2
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR a3
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR b3
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR a4
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR b4
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
INTCON 1
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
CHRCON 'a'
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR a1
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR b1
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR a1
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR b1
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR a2
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR b2
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR a2
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR b2
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR a3
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR b3
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR a4
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR b4
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
INTCON 1
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
CHRCON 'a'
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
CHARTK char
IDENFR a
SEMICN ;
INTTK int
IDENFR fint
LPARENT (
INTTK int
IDENFR a
RPARENT )
LBRACE {
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
CHARTK char
IDENFR fchar
LPARENT (
CHARTK char
IDENFR a
RPARENT )
LBRACE {
RETURNTK return
CHRCON 'a'
SEMICN ;
RBRACE }
INTTK int
IDENFR fint_array
LPARENT (
INTTK int
IDENFR a
LBRACK [
RPARENT )
LBRACE {
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
CHARTK char
IDENFR fchar_array
LPARENT (
CHARTK char
IDENFR a
LBRACK [
RPARENT )
LBRACE {
RETURNTK return
CHRCON 'a'
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
CONSTTK const
INTTK int
IDENFR a1
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
RBRACE }
CONSTTK const
CHARTK char
IDENFR b1
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
STRCON "ab"
INTTK int
IDENFR a2
LBRACK [
INTCON 2
RBRACK ]
CHARTK char
IDENFR b2
LBRACK [
INTCON 4
RBRACK ]
INTTK int
IDENFR a3
CHARTK char
IDENFR b3
CONSTTK const
INTTK int
IDENFR a4
ASSIGN =
INTCON 0
CONSTTK const
CHARTK char
IDENFR b4
ASSIGN =
INTCON 0
IDENFR fint
LPARENT (
IDENFR a1
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR b1
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR a1
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR b1
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR a2
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR b2
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR a2
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR b2
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR a3
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR b3
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR a4
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR b4
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
INTCON 1
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
CHRCON 'a'
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR fint
LPARENT (
INTCON 1
RPARENT )
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR fchar
LPARENT (
CHRCON 'a'
RPARENT )
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR a1
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR b1
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR a1
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR b1
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR a2
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR b2
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR a2
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR b2
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR a3
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR b3
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR a4
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR b4
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
INTCON 1
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
CHRCON 'a'
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR fint
LPARENT (
INTCON 1
RPARENT )
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR fchar
LPARENT (
CHRCON 'a'
RPARENT )
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR a1
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR b1
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR a1
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR b1
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR a2
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR b2
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR a2
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR b2
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR a3
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR b3
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR a4
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR b4
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
INTCON 1
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
CHRCON 'a'
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR a1
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR b1
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR a1
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR b1
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR a2
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR b2
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR a2
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR b2
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR a3
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR b3
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR a4
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR b4
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
INTCON 1
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
CHRCON 'a'
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
CHARTK char
IDENFR a1
SEMICN ;
INTTK int
IDENFR fint
LPARENT (
INTTK int
IDENFR a
RPARENT )
LBRACE {
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
CHARTK char
IDENFR fchar
LPARENT (
CHARTK char
IDENFR a
RPARENT )
LBRACE {
RETURNTK return
CHRCON 'a'
SEMICN ;
RBRACE }
INTTK int
IDENFR fint_array
LPARENT (
INTTK int
IDENFR a
LBRACK [
RPARENT )
LBRACE {
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
CHARTK char
IDENFR fchar_array
LPARENT (
CHARTK char
IDENFR a
LBRACK [
RPARENT )
LBRACE {
RETURNTK return
CHRCON 'a'
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
CONSTTK const
INTTK int
IDENFR a1
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
RBRACE }
CONSTTK const
CHARTK char
IDENFR b1
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
STRCON "ab"
INTTK int
IDENFR a2
LBRACK [
INTCON 2
RBRACK ]
CHARTK char
IDENFR b2
LBRACK [
INTCON 4
RBRACK ]
INTTK int
IDENFR a3
CHARTK char
IDENFR b3
CONSTTK const
INTTK int
IDENFR a4
ASSIGN =
INTCON 0
CONSTTK const
CHARTK char
IDENFR b4
ASSIGN =
INTCON 0
IDENFR fint
LPARENT (
IDENFR a1
RPARENT )
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
SEMICN ;
RPARENT )
LBRACE {
INTTK int
IDENFR b1
SEMICN ;
RBRACE }
IDENFR fint
LPARENT (
IDENFR b1
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR a1
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR b1
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR a2
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR b2
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR a2
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR b2
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR a3
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR b3
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR a4
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR b4
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
INTCON 1
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
CHRCON 'a'
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR fint
LPARENT (
INTCON 1
RPARENT )
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR fchar
LPARENT (
CHRCON 'a'
RPARENT )
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR a1
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR b1
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR a1
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR b1
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR a2
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR b2
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR a2
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR b2
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR a3
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR b3
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR a4
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR b4
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
INTCON 1
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
CHRCON 'a'
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR fint
LPARENT (
INTCON 1
RPARENT )
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR fchar
LPARENT (
CHRCON 'a'
RPARENT )
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR a1
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR b1
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR a1
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR b1
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR a2
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR b2
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR a2
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR b2
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR a3
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR b3
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR a4
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR b4
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
INTCON 1
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
CHRCON 'a'
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR a1
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR b1
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR a1
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR b1
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR a2
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR b2
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR a2
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR b2
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR a3
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR b3
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR a4
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR b4
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
INTCON 1
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
CHRCON 'a'
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
CHARTK char
IDENFR a1
SEMICN ;
INTTK int
IDENFR fint
LPARENT (
INTTK int
IDENFR a
RPARENT )
LBRACE {
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
CHARTK char
IDENFR fchar
LPARENT (
CHARTK char
IDENFR a
RPARENT )
LBRACE {
RETURNTK return
CHRCON 'a'
SEMICN ;
RBRACE }
INTTK int
IDENFR fint_array
LPARENT (
INTTK int
IDENFR a
LBRACK [
RPARENT )
LBRACE {
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
CHARTK char
IDENFR fchar_array
LPARENT (
CHARTK char
IDENFR a
LBRACK [
RPARENT )
LBRACE {
RETURNTK return
CHRCON 'a'
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
CONSTTK const
INTTK int
IDENFR a1
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
RBRACE }
CONSTTK const
CHARTK char
IDENFR b1
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
STRCON "ab"
INTTK int
IDENFR a2
LBRACK [
INTCON 2
RBRACK ]
CHARTK char
IDENFR b2
LBRACK [
INTCON 4
RBRACK ]
INTTK int
IDENFR a3
CHARTK char
IDENFR b3
CONSTTK const
INTTK int
IDENFR a4
ASSIGN =
INTCON 0
CONSTTK const
CHARTK char
IDENFR b4
ASSIGN =
INTCON 0
IDENFR fint
LPARENT (
IDENFR a1
RPARENT )
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
SEMICN ;
RPARENT )
LBRACE {
INTTK int
IDENFR b1
SEMICN ;
IDENFR fint
LPARENT (
IDENFR b1
RPARENT )
SEMICN ;
RBRACE }
IDENFR fint
LPARENT (
IDENFR b1
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR a1
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR b1
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR a2
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR b2
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR a2
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR b2
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR a3
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR b3
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR a4
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR b4
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
INTCON 1
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
CHRCON 'a'
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR fint
LPARENT (
INTCON 1
RPARENT )
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR fchar
LPARENT (
CHRCON 'a'
RPARENT )
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR a1
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR b1
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR a1
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR b1
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR a2
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR b2
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR a2
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR b2
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR a3
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR b3
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR a4
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR b4
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
INTCON 1
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
CHRCON 'a'
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR fint
LPARENT (
INTCON 1
RPARENT )
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR fchar
LPARENT (
CHRCON 'a'
RPARENT )
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR a1
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR b1
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR a1
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR b1
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR a2
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR b2
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR a2
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR b2
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR a3
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR b3
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR a4
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR b4
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
INTCON 1
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
CHRCON 'a'
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR a1
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR b1
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR a1
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR b1
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR a2
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR b2
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR a2
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR b2
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR a3
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR b3
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR a4
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR b4
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
INTCON 1
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
CHRCON 'a'
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
CHARTK char
IDENFR a1
SEMICN ;
INTTK int
IDENFR fint
LPARENT (
INTTK int
IDENFR a
RPARENT )
LBRACE {
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
CHARTK char
IDENFR fchar
LPARENT (
CHARTK char
IDENFR a
RPARENT )
LBRACE {
RETURNTK return
CHRCON 'a'
SEMICN ;
RBRACE }
INTTK int
IDENFR fint_array
LPARENT (
INTTK int
IDENFR a
LBRACK [
RPARENT )
LBRACE {
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
CHARTK char
IDENFR fchar_array
LPARENT (
CHARTK char
IDENFR a
LBRACK [
RPARENT )
LBRACE {
RETURNTK return
CHRCON 'a'
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
CONSTTK const
INTTK int
IDENFR a1
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
RBRACE }
CONSTTK const
CHARTK char
IDENFR b1
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
STRCON "ab"
INTTK int
IDENFR a2
LBRACK [
INTCON 2
RBRACK ]
CHARTK char
IDENFR b2
LBRACK [
INTCON 4
RBRACK ]
INTTK int
IDENFR a3
CHARTK char
IDENFR b3
CONSTTK const
INTTK int
IDENFR a4
ASSIGN =
INTCON 0
CONSTTK const
CHARTK char
IDENFR b4
ASSIGN =
INTCON 0
IDENFR fint
LPARENT (
IDENFR a1
RPARENT )
SEMICN ;
LBRACE {
INTTK int
IDENFR b1
SEMICN ;
IDENFR fint
LPARENT (
IDENFR b1
RPARENT )
SEMICN ;
RBRACE }
IDENFR fint
LPARENT (
IDENFR b1
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR a1
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR b1
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR a2
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR b2
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR a2
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR b2
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR a3
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR b3
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR a4
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR b4
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
INTCON 1
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
CHRCON 'a'
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR fint
LPARENT (
INTCON 1
RPARENT )
RPARENT )
SEMICN ;
IDENFR fint
LPARENT (
IDENFR fchar
LPARENT (
CHRCON 'a'
RPARENT )
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR a1
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR b1
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR a1
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR b1
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR a2
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR b2
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR a2
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR b2
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR a3
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR b3
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR a4
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR b4
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
INTCON 1
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
CHRCON 'a'
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR fint
LPARENT (
INTCON 1
RPARENT )
RPARENT )
SEMICN ;
IDENFR fchar
LPARENT (
IDENFR fchar
LPARENT (
CHRCON 'a'
RPARENT )
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR a1
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR b1
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR a1
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR b1
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR a2
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR b2
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR a2
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR b2
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR a3
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR b3
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR a4
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
IDENFR b4
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
INTCON 1
RPARENT )
SEMICN ;
IDENFR fint_array
LPARENT (
CHRCON 'a'
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR a1
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR b1
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR a1
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR b1
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR a2
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR b2
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR a2
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR b2
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR a3
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR b3
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR a4
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
IDENFR b4
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
INTCON 1
RPARENT )
SEMICN ;
IDENFR fchar_array
LPARENT (
CHRCON 'a'
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
CONSTTK const
INTTK int
IDENFR a
ASSIGN =
INTCON 1
COMMA ,
IDENFR b
ASSIGN =
INTCON 2
CONSTTK const
CHARTK char
IDENFR c
ASSIGN =
INTCON 3
COMMA ,
IDENFR d
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
LBRACE {
INTCON 0
RBRACE }
INTTK int
IDENFR aa
COMMA ,
IDENFR bb
COMMA ,
IDENFR cc
ASSIGN =
INTCON 1
COMMA ,
IDENFR dd
VOIDTK void
IDENFR fun
LPARENT (
RPARENT )
LBRACE {
IDENFR a
IDENFR b
IDENFR aa
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
IDENFR c
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
IDENFR a
IDENFR b
IDENFR aa
IDENFR c
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
CONSTTK const
INTTK int
IDENFR a
ASSIGN =
INTCON 1
COMMA ,
IDENFR b
ASSIGN =
INTCON 2
CONSTTK const
CHARTK char
IDENFR c
ASSIGN =
INTCON 3
COMMA ,
IDENFR d
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
LBRACE {
INTCON 0
RBRACE }
INTTK int
IDENFR aa
COMMA ,
IDENFR bb
COMMA ,
IDENFR cc
ASSIGN =
INTCON 1
COMMA ,
IDENFR dd
VOIDTK void
IDENFR fun
LPARENT (
RPARENT )
LBRACE {
IDENFR a
IDENFR b
IDENFR d
LBRACK [
INTCON 0
RBRACK ]
IDENFR aa
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
IDENFR c
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
IDENFR a
IDENFR b
IDENFR aa
IDENFR c
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
CONSTTK const
INTTK int
IDENFR a
ASSIGN =
INTCON 1
COMMA ,
IDENFR b
ASSIGN =
INTCON 2
CONSTTK const
CHARTK char
IDENFR c
ASSIGN =
INTCON 3
COMMA ,
IDENFR d
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
LBRACE {
INTCON 0
RBRACE }
INTTK int
IDENFR aa
COMMA ,
IDENFR bb
COMMA ,
IDENFR cc
ASSIGN =
INTCON 1
COMMA ,
IDENFR dd
VOIDTK void
IDENFR fun
LPARENT (
RPARENT )
LBRACE {
IDENFR a
IDENFR b
IDENFR aa
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
IDENFR c
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
IDENFR a
IDENFR b
IDENFR aa
IDENFR c
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
CONSTTK const
INTTK int
IDENFR a
ASSIGN =
INTCON 1
COMMA ,
IDENFR b
ASSIGN =
INTCON 2
CONSTTK const
CHARTK char
IDENFR c
ASSIGN =
INTCON 3
COMMA ,
IDENFR d
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
LBRACE {
INTCON 0
RBRACE }
INTTK int
IDENFR aa
COMMA ,
IDENFR bb
COMMA ,
IDENFR cc
ASSIGN =
INTCON 1
COMMA ,
IDENFR dd
VOIDTK void
IDENFR fun
LPARENT (
RPARENT )
LBRACE {
IDENFR a
SEMICN ;
IDENFR b
SEMICN ;
IDENFR aa
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
IDENFR c
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
IDENFR a
IDENFR b
IDENFR aa
IDENFR c
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
CONSTTK const
INTTK int
IDENFR a
ASSIGN =
INTCON 1
COMMA ,
IDENFR b
ASSIGN =
INTCON 2
CONSTTK const
CHARTK char
IDENFR c
ASSIGN =
INTCON 3
COMMA ,
IDENFR d
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
LBRACE {
INTCON 0
RBRACE }
INTTK int
IDENFR aa
COMMA ,
IDENFR bb
COMMA ,
IDENFR cc
ASSIGN =
INTCON 1
COMMA ,
IDENFR dd
VOIDTK void
IDENFR fun
LPARENT (
RPARENT )
LBRACE {
IDENFR a
IDENFR b
IDENFR aa
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
IDENFR c
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
IDENFR a
IDENFR b
IDENFR aa
IDENFR c
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
CONSTTK const
INTTK int
IDENFR a
ASSIGN =
INTCON 1
COMMA ,
IDENFR b
ASSIGN =
INTCON 2
CONSTTK const
CHARTK char
IDENFR c
ASSIGN =
INTCON 3
COMMA ,
IDENFR d
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
LBRACE {
INTCON 0
RBRACE }
INTTK int
IDENFR aa
COMMA ,
IDENFR bb
COMMA ,
IDENFR cc
ASSIGN =
INTCON 1
COMMA ,
IDENFR dd
VOIDTK void
IDENFR fun
LPARENT (
RPARENT )
LBRACE {
IDENFR a
IDENFR b
IDENFR aa
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
IDENFR c
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
IDENFR a
IDENFR b
IDENFR aa
IDENFR c
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
CONSTTK const
INTTK int
IDENFR a
ASSIGN =
INTCON 1
COMMA ,
IDENFR b
ASSIGN =
INTCON 2
CONSTTK const
CHARTK char
IDENFR c
ASSIGN =
INTCON 3
COMMA ,
IDENFR d
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
LBRACE {
INTCON 0
RBRACE }
INTTK int
IDENFR aa
COMMA ,
IDENFR bb
COMMA ,
IDENFR cc
ASSIGN =
INTCON 1
COMMA ,
IDENFR dd
VOIDTK void
IDENFR fun
LPARENT (
RPARENT )
LBRACE {
IDENFR a
IDENFR b
IDENFR d
LBRACK [
INTCON 0
RBRACK ]
IDENFR aa
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
IDENFR c
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
IDENFR a
IDENFR b
IDENFR aa
IDENFR c
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
CONSTTK const
INTTK int
IDENFR a
ASSIGN =
INTCON 1
COMMA ,
IDENFR b
ASSIGN =
INTCON 2
CONSTTK const
CHARTK char
IDENFR c
ASSIGN =
INTCON 3
COMMA ,
IDENFR d
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
LBRACE {
INTCON 0
RBRACE }
INTTK int
IDENFR aa
COMMA ,
IDENFR bb
COMMA ,
IDENFR cc
ASSIGN =
INTCON 1
COMMA ,
IDENFR dd
VOIDTK void
IDENFR fun
LPARENT (
RPARENT )
LBRACE {
IDENFR a
IDENFR b
IDENFR aa
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
IDENFR c
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
IDENFR a
IDENFR b
IDENFR aa
IDENFR c
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
CONSTTK const
INTTK int
IDENFR a
ASSIGN =
INTCON 1
COMMA ,
IDENFR b
ASSIGN =
INTCON 2
CONSTTK const
CHARTK char
IDENFR c
ASSIGN =
INTCON 3
COMMA ,
IDENFR d
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
LBRACE {
INTCON 0
RBRACE }
INTTK int
IDENFR aa
COMMA ,
IDENFR bb
COMMA ,
IDENFR cc
ASSIGN =
INTCON 1
COMMA ,
IDENFR dd
VOIDTK void
IDENFR fun
LPARENT (
RPARENT )
LBRACE {
IDENFR a
IDENFR aa
ASSIGN =
IDENFR a
PLUS +
IDENFR b
IDENFR b
IDENFR aa
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
IDENFR c
IDENFR c
ASSIGN =
GETCHARTK getchar
LPARENT (
RPARENT )
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
IDENFR a
IDENFR b
IDENFR aa
IDENFR c
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
CONSTTK const
INTTK int
IDENFR a
ASSIGN =
INTCON 1
COMMA ,
IDENFR b
ASSIGN =
INTCON 2
CONSTTK const
CHARTK char
IDENFR c
ASSIGN =
INTCON 3
COMMA ,
IDENFR d
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
LBRACE {
INTCON 0
RBRACE }
INTTK int
IDENFR aa
COMMA ,
IDENFR bb
COMMA ,
IDENFR cc
ASSIGN =
INTCON 1
COMMA ,
IDENFR dd
VOIDTK void
IDENFR fun
LPARENT (
RPARENT )
LBRACE {
IDENFR a
IDENFR aa
ASSIGN =
IDENFR a
PLUS +
IDENFR b
IDENFR b
MULT *
IDENFR c
IDENFR aa
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
IDENFR c
IDENFR c
ASSIGN =
GETCHARTK getchar
LPARENT (
RPARENT )
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
IDENFR a
IDENFR b
IDENFR aa
IDENFR c
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
CONSTTK const
INTTK int
IDENFR a
ASSIGN =
INTCON 1
COMMA ,
IDENFR b
ASSIGN =
INTCON 2
CONSTTK const
CHARTK char
IDENFR c
ASSIGN =
INTCON 3
COMMA ,
IDENFR d
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
LBRACE {
INTCON 0
RBRACE }
INTTK int
IDENFR aa
COMMA ,
IDENFR bb
COMMA ,
IDENFR cc
ASSIGN =
INTCON 1
COMMA ,
IDENFR dd
VOIDTK void
IDENFR fun
LPARENT (
RPARENT )
LBRACE {
IDENFR a
IDENFR aa
ASSIGN =
IDENFR a
PLUS +
IDENFR b
IDENFR b
MULT *
IDENFR c
IDENFR aa
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
IDENFR c
IDENFR c
ASSIGN =
GETCHARTK getchar
LPARENT (
RPARENT )
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
IDENFR a
IDENFR b
IDENFR aa
IDENFR c
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
CONSTTK const
INTTK int
IDENFR a
ASSIGN =
INTCON 1
COMMA ,
IDENFR b
ASSIGN =
INTCON 2
CONSTTK const
CHARTK char
IDENFR c
ASSIGN =
INTCON 3
COMMA ,
IDENFR d
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
LBRACE {
INTCON 0
RBRACE }
INTTK int
IDENFR aa
COMMA ,
IDENFR bb
COMMA ,
IDENFR cc
ASSIGN =
INTCON 1
COMMA ,
IDENFR dd
VOIDTK void
IDENFR fun
LPARENT (
RPARENT )
LBRACE {
IDENFR a
IDENFR aa
ASSIGN =
IDENFR a
PLUS +
IDENFR b
IDENFR b
MULT *
IDENFR c
IDENFR aa
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
IDENFR c
IDENFR c
ASSIGN =
GETCHARTK getchar
LPARENT (
RPARENT )
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
IDENFR a
IDENFR b
IDENFR aa
IDENFR c
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
CONSTTK const
INTTK int
IDENFR a
ASSIGN =
INTCON 1
COMMA ,
IDENFR b
ASSIGN =
INTCON 2
CONSTTK const
CHARTK char
IDENFR c
ASSIGN =
INTCON 3
COMMA ,
IDENFR d
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
LBRACE {
INTCON 0
RBRACE }
INTTK int
IDENFR aa
COMMA ,
IDENFR bb
COMMA ,
IDENFR cc
ASSIGN =
INTCON 1
COMMA ,
IDENFR dd
VOIDTK void
IDENFR fun
LPARENT (
RPARENT )
LBRACE {
IDENFR a
IDENFR aa
ASSIGN =
IDENFR a
PLUS +
IDENFR b
IDENFR b
MULT *
IDENFR c
IDENFR aa
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
IDENFR c
IDENFR c
ASSIGN =
GETCHARTK getchar
LPARENT (
RPARENT )
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
IDENFR a
IDENFR b
IDENFR aa
IDENFR c
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
CONSTTK const
INTTK int
IDENFR a
ASSIGN =
INTCON 1
COMMA ,
IDENFR b
ASSIGN =
INTCON 2
CONSTTK const
CHARTK char
IDENFR c
ASSIGN =
INTCON 3
COMMA ,
IDENFR d
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
LBRACE {
INTCON 0
RBRACE }
INTTK int
IDENFR aa
COMMA ,
IDENFR bb
COMMA ,
IDENFR cc
ASSIGN =
INTCON 1
COMMA ,
IDENFR dd
INTTK int
IDENFR func
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
RPARENT )
LBRACE {
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
VOIDTK void
IDENFR fun
LPARENT (
RPARENT )
LBRACE {
IDENFR a
IDENFR aa
ASSIGN =
IDENFR a
PLUS +
IDENFR b
IDENFR func
LPARENT (
IDENFR a
COMMA ,
IDENFR b
RPARENT )
IDENFR aa
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
IDENFR c
IDENFR c
ASSIGN =
GETCHARTK getchar
LPARENT (
RPARENT )
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
IDENFR a
IDENFR b
IDENFR aa
IDENFR c
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
CONSTTK const
INTTK int
IDENFR a
ASSIGN =
INTCON 1
COMMA ,
IDENFR b
ASSIGN =
INTCON 2
CONSTTK const
CHARTK char
IDENFR c
ASSIGN =
INTCON 3
COMMA ,
IDENFR d
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
LBRACE {
INTCON 0
RBRACE }
INTTK int
IDENFR aa
COMMA ,
IDENFR bb
COMMA ,
IDENFR cc
ASSIGN =
INTCON 1
COMMA ,
IDENFR dd
INTTK int
IDENFR func
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
RPARENT )
LBRACE {
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
VOIDTK void
IDENFR fun
LPARENT (
RPARENT )
LBRACE {
IDENFR a
IDENFR aa
ASSIGN =
IDENFR a
PLUS +
IDENFR b
IDENFR func
LPARENT (
IDENFR a
COMMA ,
IDENFR d
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
IDENFR aa
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
IDENFR c
IDENFR c
ASSIGN =
GETCHARTK getchar
LPARENT (
RPARENT )
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
IDENFR a
IDENFR b
IDENFR aa
IDENFR c
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
CONSTTK const
INTTK int
IDENFR a
ASSIGN =
INTCON 1
COMMA ,
IDENFR b
ASSIGN =
INTCON 2
CONSTTK const
CHARTK char
IDENFR c
ASSIGN =
INTCON 3
COMMA ,
IDENFR d
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
LBRACE {
INTCON 0
RBRACE }
INTTK int
IDENFR aa
COMMA ,
IDENFR bb
COMMA ,
IDENFR cc
ASSIGN =
INTCON 1
COMMA ,
IDENFR dd
INTTK int
IDENFR func
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
RPARENT )
LBRACE {
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
VOIDTK void
IDENFR fun
LPARENT (
RPARENT )
LBRACE {
IDENFR a
IDENFR aa
ASSIGN =
IDENFR a
PLUS +
IDENFR b
IDENFR func
LPARENT (
IDENFR a
COMMA ,
IDENFR d
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
IDENFR aa
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
IDENFR c
IDENFR c
ASSIGN =
GETCHARTK getchar
LPARENT (
RPARENT )
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
IDENFR a
IDENFR b
IDENFR aa
IDENFR c
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
VOIDTK void
IDENFR f1
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
VOIDTK void
IDENFR f2
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
CHRCON 'a'
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
VOIDTK void
IDENFR f1
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
VOIDTK void
IDENFR f2
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
CHRCON 'a'
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
VOIDTK void
IDENFR f1
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
VOIDTK void
IDENFR f2
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
CHRCON 'a'
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
VOIDTK void
IDENFR f1
LPARENT (
INTTK int
IDENFR x
RPARENT )
LBRACE {
RETURNTK return
SEMICN ;
RBRACE }
IDENFR v
IDENFR oid
IDENFR f3
LPARENT (
CHARTK char
IDENFR c
RPARENT )
LBRACE {
RETURNTK return
SEMICN ;
RBRACE }
IDENFR i
IDENFR nt
MAINTK main
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR x
ASSIGN =
INTCON 10
SEMICN ;
INTTK int
IDENFR t
LBRACK [
INTCON 5
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
COMMA ,
INTCON 4
COMMA ,
INTCON 5
RBRACE }
SEMICN ;
CHARTK char
IDENFR c
ASSIGN =
CHRCON 'a'
SEMICN ;
CHARTK char
IDENFR s
LBRACK [
INTCON 5
RBRACK ]
ASSIGN =
STRCON "abcd"
SEMICN ;
IDENFR f1
LPARENT (
IDENFR c
RPARENT )
SEMICN ;
IDENFR f1
LPARENT (
IDENFR s
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR f3
LPARENT (
IDENFR x
RPARENT )
SEMICN ;
IDENFR f3
LPARENT (
IDENFR t
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
RBRACE }
VOIDTK void
IDENFR f1
LPARENT (
INTTK int
IDENFR x
RPARENT )
LBRACE {
RETURNTK return
SEMICN ;
RBRACE }
IDENFR v
IDENFR oid
IDENFR f3
LPARENT (
CHARTK char
IDENFR c
RPARENT )
LBRACE {
RETURNTK return
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR x
ASSIGN =
INTCON 10
SEMICN ;
INTTK int
IDENFR t
LBRACK [
INTCON 5
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
COMMA ,
INTCON 4
COMMA ,
INTCON 5
RBRACE }
SEMICN ;
CHARTK char
IDENFR c
ASSIGN =
CHRCON 'a'
SEMICN ;
CHARTK char
IDENFR s
LBRACK [
INTCON 5
RBRACK ]
ASSIGN =
STRCON "abcd"
SEMICN ;
IDENFR f1
LPARENT (
IDENFR c
RPARENT )
SEMICN ;
IDENFR f1
LPARENT (
IDENFR s
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR f3
LPARENT (
IDENFR x
RPARENT )
SEMICN ;
IDENFR f3
LPARENT (
IDENFR t
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
RBRACE }
VOIDTK void
IDENFR f1
LPARENT (
INTTK int
IDENFR x
RPARENT )
LBRACE {
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR f3
LPARENT (
CHARTK char
IDENFR c
RPARENT )
LBRACE {
RETURNTK return
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR x
ASSIGN =
INTCON 10
SEMICN ;
INTTK int
IDENFR t
LBRACK [
INTCON 5
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
COMMA ,
INTCON 4
COMMA ,
INTCON 5
RBRACE }
SEMICN ;
CHARTK char
IDENFR c
ASSIGN =
CHRCON 'a'
SEMICN ;
CHARTK char
IDENFR s
LBRACK [
INTCON 5
RBRACK ]
ASSIGN =
STRCON "abcd"
SEMICN ;
IDENFR f1
LPARENT (
IDENFR c
RPARENT )
SEMICN ;
IDENFR f1
LPARENT (
IDENFR s
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR f3
LPARENT (
IDENFR x
RPARENT )
SEMICN ;
IDENFR f3
LPARENT (
IDENFR t
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
RBRACE }
VOIDTK void
IDENFR f1
LPARENT (
INTTK int
IDENFR x
RPARENT )
LBRACE {
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR f3
LPARENT (
CHARTK char
IDENFR c
RPARENT )
LBRACE {
RETURNTK return
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR x
ASSIGN =
INTCON 10
SEMICN ;
INTTK int
IDENFR t
LBRACK [
INTCON 5
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
COMMA ,
INTCON 4
COMMA ,
INTCON 5
RBRACE }
SEMICN ;
CHARTK char
IDENFR c
ASSIGN =
CHRCON 'a'
SEMICN ;
CHARTK char
IDENFR s
LBRACK [
INTCON 5
RBRACK ]
ASSIGN =
STRCON "abcd"
SEMICN ;
IDENFR f1
LPARENT (
IDENFR c
RPARENT )
SEMICN ;
IDENFR f1
LPARENT (
IDENFR s
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR f3
LPARENT (
IDENFR x
RPARENT )
SEMICN ;
IDENFR f3
LPARENT (
IDENFR t
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
IDENFR a
ASSIGN =
IDENFR a
PLUS +
INTCON 1
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR n
INTCON 2
PLUS +
IDENFR n
IDENFR n
ASSIGN =
IDENFR getInt
LPARENT (
RPARENT )
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR n
INTCON 2
PLUS +
IDENFR n
IDENFR n
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
IDENFR a
ASSIGN =
IDENFR a
PLUS +
INTCON 1
SEMICN ;
RBRACE }
INTTK int
IDENFR f
LPARENT (
INTTK int
IDENFR a
LBRACK [
RBRACK ]
COMMA ,
CHARTK char
IDENFR c
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
RETURNTK return
IDENFR a
LBRACK [
INTCON 0
RBRACK ]
MINU -
IDENFR c
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR a
LBRACK [
INTCON 100
RBRACK ]
SEMICN ;
INTTK int
IDENFR b
SEMICN ;
CHARTK char
IDENFR c
LBRACK [
INTCON 100
RBRACK ]
SEMICN ;
CHARTK char
IDENFR d
SEMICN ;
IDENFR f
LPARENT (
IDENFR a
COMMA ,
IDENFR b
RPARENT )
SEMICN ;
IDENFR f
LPARENT (
IDENFR a
COMMA ,
IDENFR c
RPARENT )
SEMICN ;
IDENFR f
LPARENT (
IDENFR a
COMMA ,
IDENFR d
RPARENT )
SEMICN ;
IDENFR f
LPARENT (
IDENFR b
COMMA ,
IDENFR c
RPARENT )
SEMICN ;
IDENFR f
LPARENT (
IDENFR b
COMMA ,
IDENFR d
RPARENT )
SEMICN ;
IDENFR f
LPARENT (
IDENFR c
COMMA ,
IDENFR d
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR f
LPARENT (
INTTK int
IDENFR a
LBRACK [
RBRACK ]
COMMA ,
CHARTK char
IDENFR c
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
RETURNTK return
IDENFR a
LBRACK [
INTCON 0
RBRACK ]
MINU -
IDENFR c
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR a
LBRACK [
INTCON 100
RBRACK ]
SEMICN ;
INTTK int
IDENFR b
SEMICN ;
CHARTK char
IDENFR c
LBRACK [
INTCON 100
RBRACK ]
SEMICN ;
CHARTK char
IDENFR d
SEMICN ;
IDENFR f
LPARENT (
IDENFR a
COMMA ,
IDENFR b
RPARENT )
SEMICN ;
IDENFR f
LPARENT (
IDENFR a
COMMA ,
IDENFR c
RPARENT )
SEMICN ;
IDENFR f
LPARENT (
IDENFR a
COMMA ,
IDENFR d
RPARENT )
SEMICN ;
IDENFR f
LPARENT (
IDENFR b
COMMA ,
IDENFR c
RPARENT )
SEMICN ;
IDENFR f
LPARENT (
IDENFR b
COMMA ,
IDENFR d
RPARENT )
SEMICN ;
IDENFR f
LPARENT (
IDENFR c
COMMA ,
IDENFR d
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
IDENFR a
ASSIGN =
IDENFR a
PLUS +
INTCON 1
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
IDENFR a
ASSIGN =
IDENFR a
PLUS +
INTCON 1
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
IDENFR a
ASSIGN =
IDENFR a
PLUS +
INTCON 1
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
IDENFR a
PLUS +
INTCON 1
SEMICN ;
RBRACE }
INTTK int
IDENFR f1
LPARENT (
LBRACE {
RETURNTK return
INTCON 1
RBRACE }
VOIDTK void
IDENFR f2
LPARENT (
INTTK int
IDENFR a
LBRACE {
RBRACE }
VOIDTK void
IDENFR f3
LPARENT (
CHARTK char
IDENFR a
LBRACK [
RBRACK ]
LBRACE {
RBRACE }
VOIDTK void
IDENFR f4
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
LBRACK [
RBRACK ]
LBRACE {
RBRACE }
VOIDTK void
IDENFR f5
LPARENT (
INTTK int
IDENFR b
LBRACK [
RBRACK ]
COMMA ,
INTTK int
IDENFR a
LBRACE {
RBRACE }
VOIDTK void
IDENFR f6
LPARENT (
INTTK int
IDENFR a
LBRACK [
RPARENT )
LBRACE {
RBRACE }
VOIDTK void
IDENFR f7
LPARENT (
INTTK int
IDENFR a
LBRACK [
COMMA ,
CHARTK char
IDENFR b
RPARENT )
LBRACE {
INTTK int
IDENFR c
SEMICN ;
RETURNTK return
INTTK int
IDENFR d
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
LBRACE {
INTTK int
IDENFR a
LBRACK [
INTCON 2
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
RBRACE }
SEMICN ;
INTTK int
IDENFR b
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
IDENFR a
LBRACK [
INTCON 0
COMMA ,
INTCON 2
RBRACE }
SEMICN ;
CHARTK char
IDENFR str
LBRACK [
INTCON 6
RBRACK ]
ASSIGN =
STRCON "hell0"
SEMICN ;
IDENFR a
LBRACK [
INTCON 0
ASSIGN =
INTCON 2
SEMICN ;
IDENFR f1
LPARENT (
SEMICN ;
IDENFR f2
LPARENT (
INTCON 1
SEMICN ;
IDENFR f3
LPARENT (
IDENFR str
SEMICN ;
IDENFR f4
LPARENT (
INTCON 1
COMMA ,
IDENFR b
SEMICN ;
IDENFR f5
LPARENT (
IDENFR b
COMMA ,
INTCON 1
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR f1
LPARENT (
LBRACE {
RETURNTK return
INTCON 1
RBRACE }
VOIDTK void
IDENFR f2
LPARENT (
INTTK int
IDENFR a
LBRACE {
RBRACE }
VOIDTK void
IDENFR f3
LPARENT (
CHARTK char
IDENFR a
LBRACK [
RBRACK ]
LBRACE {
RBRACE }
VOIDTK void
IDENFR f4
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
LBRACK [
RBRACK ]
LBRACE {
RBRACE }
VOIDTK void
IDENFR f5
LPARENT (
INTTK int
IDENFR b
LBRACK [
RBRACK ]
COMMA ,
INTTK int
IDENFR a
LBRACE {
RBRACE }
VOIDTK void
IDENFR f6
LPARENT (
INTTK int
IDENFR a
LBRACK [
RPARENT )
LBRACE {
RBRACE }
VOIDTK void
IDENFR f7
LPARENT (
INTTK int
IDENFR a
LBRACK [
COMMA ,
CHARTK char
IDENFR b
RPARENT )
LBRACE {
INTTK int
IDENFR c
SEMICN ;
RETURNTK return
INTTK int
IDENFR d
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
LBRACE {
INTTK int
IDENFR a
LBRACK [
INTCON 2
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
RBRACE }
SEMICN ;
INTTK int
IDENFR b
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
IDENFR a
LBRACK [
INTCON 0
COMMA ,
INTCON 2
RBRACE }
SEMICN ;
CHARTK char
IDENFR str
LBRACK [
INTCON 6
RBRACK ]
ASSIGN =
STRCON "hell0"
SEMICN ;
IDENFR a
LBRACK [
INTCON 0
ASSIGN =
INTCON 2
SEMICN ;
IDENFR f1
LPARENT (
SEMICN ;
IDENFR f2
LPARENT (
INTCON 1
SEMICN ;
IDENFR f3
LPARENT (
IDENFR str
SEMICN ;
IDENFR f4
LPARENT (
INTCON 1
COMMA ,
IDENFR b
SEMICN ;
IDENFR f5
LPARENT (
IDENFR b
COMMA ,
INTCON 1
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR f1
LPARENT (
LBRACE {
RETURNTK return
INTCON 1
RBRACE }
VOIDTK void
IDENFR f2
LPARENT (
INTTK int
IDENFR a
LBRACE {
RBRACE }
VOIDTK void
IDENFR f3
LPARENT (
CHARTK char
IDENFR a
LBRACK [
RBRACK ]
LBRACE {
RBRACE }
VOIDTK void
IDENFR f4
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
LBRACK [
RBRACK ]
LBRACE {
RBRACE }
VOIDTK void
IDENFR f5
LPARENT (
INTTK int
IDENFR b
LBRACK [
RBRACK ]
COMMA ,
INTTK int
IDENFR a
LBRACE {
RBRACE }
VOIDTK void
IDENFR f6
LPARENT (
INTTK int
IDENFR a
LBRACK [
RPARENT )
LBRACE {
RBRACE }
VOIDTK void
IDENFR f7
LPARENT (
INTTK int
IDENFR a
LBRACK [
COMMA ,
CHARTK char
IDENFR b
RPARENT )
LBRACE {
INTTK int
IDENFR c
SEMICN ;
RETURNTK return
INTTK int
IDENFR d
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
LBRACE {
INTTK int
IDENFR a
LBRACK [
INTCON 2
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
RBRACE }
SEMICN ;
INTTK int
IDENFR b
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
IDENFR a
LBRACK [
INTCON 0
COMMA ,
INTCON 2
RBRACE }
SEMICN ;
CHARTK char
IDENFR str
LBRACK [
INTCON 6
RBRACK ]
ASSIGN =
STRCON "hell0"
SEMICN ;
IDENFR a
LBRACK [
INTCON 0
ASSIGN =
INTCON 2
SEMICN ;
IDENFR f1
LPARENT (
SEMICN ;
IDENFR f2
LPARENT (
INTCON 1
SEMICN ;
IDENFR f3
LPARENT (
IDENFR str
SEMICN ;
IDENFR f4
LPARENT (
INTCON 1
COMMA ,
IDENFR b
SEMICN ;
IDENFR f5
LPARENT (
IDENFR b
COMMA ,
INTCON 1
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR f1
LPARENT (
LBRACE {
RETURNTK return
INTCON 1
RBRACE }
VOIDTK void
IDENFR f2
LPARENT (
INTTK int
IDENFR a
LBRACE {
RBRACE }
VOIDTK void
IDENFR f3
LPARENT (
CHARTK char
IDENFR a
LBRACK [
RBRACK ]
LBRACE {
RBRACE }
VOIDTK void
IDENFR f4
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
LBRACK [
RBRACK ]
LBRACE {
RBRACE }
VOIDTK void
IDENFR f5
LPARENT (
INTTK int
IDENFR b
LBRACK [
RBRACK ]
COMMA ,
INTTK int
IDENFR a
LBRACE {
RBRACE }
VOIDTK void
IDENFR f6
LPARENT (
INTTK int
IDENFR a
LBRACK [
RPARENT )
LBRACE {
RBRACE }
VOIDTK void
IDENFR f7
LPARENT (
INTTK int
IDENFR a
LBRACK [
COMMA ,
CHARTK char
IDENFR b
RPARENT )
LBRACE {
INTTK int
IDENFR c
SEMICN ;
RETURNTK return
INTTK int
IDENFR d
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
LBRACE {
INTTK int
IDENFR a
LBRACK [
INTCON 2
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
RBRACE }
SEMICN ;
INTTK int
IDENFR b
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
IDENFR a
LBRACK [
INTCON 0
COMMA ,
INTCON 2
RBRACE }
SEMICN ;
CHARTK char
IDENFR str
LBRACK [
INTCON 6
RBRACK ]
ASSIGN =
STRCON "hell0"
SEMICN ;
IDENFR a
LBRACK [
INTCON 0
ASSIGN =
INTCON 2
SEMICN ;
IDENFR f1
LPARENT (
SEMICN ;
IDENFR f2
LPARENT (
INTCON 1
SEMICN ;
IDENFR f3
LPARENT (
IDENFR str
SEMICN ;
IDENFR f4
LPARENT (
INTCON 1
COMMA ,
IDENFR b
SEMICN ;
IDENFR f5
LPARENT (
IDENFR b
COMMA ,
INTCON 1
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
IDENFR a
ASSIGN =
IDENFR a
PLUS +
INTCON 1
RBRACE }
INTTK int
IDENFR b
SEMICN ;
VOIDTK void
IDENFR f
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
IDENFR b
ASSIGN =
IDENFR b
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
IDENFR a
ASSIGN =
IDENFR a
PLUS +
INTCON 1
RBRACE }
INTTK int
IDENFR b
SEMICN ;
VOIDTK void
IDENFR f
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
IDENFR b
ASSIGN =
IDENFR b
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
IDENFR a
ASSIGN =
IDENFR a
PLUS +
INTCON 1
RBRACE }
CONSTTK const
INTTK int
IDENFR const_var1
ASSIGN =
INTCON 17
COMMA ,
IDENFR const_var2
ASSIGN =
LPARENT (
INTCON 7
PLUS +
INTCON 17
RPARENT )
DIV /
INTCON 8
SEMICN ;
CONSTTK const
INTTK int
IDENFR arr
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
RBRACE }
SEMICN ;
CONSTTK const
CHARTK char
IDENFR const_var3
ASSIGN =
CHRCON 'c'
SEMICN ;
CONSTTK const
CHARTK char
IDENFR s
LBRACK [
INTCON 5
RBRACK ]
ASSIGN =
STRCON "abcd"
SEMICN ;
CHARTK char
IDENFR str
LBRACK [
INTCON 5
RBRACK ]
ASSIGN =
STRCON "abcd"
SEMICN ;
CONSTTK const
INTTK int
IDENFR cot_var1
ASSIGN =
IDENFR const_var1
PLUS +
IDENFR const_var2
SEMICN ;
INTTK int
IDENFR var1
ASSIGN =
INTCON 5
SEMICN ;
INTTK int
IDENFR var2
ASSIGN =
INTCON 2
COMMA ,
IDENFR var3
ASSIGN =
INTCON 10
SEMICN ;
CHARTK char
IDENFR var4
ASSIGN =
INTCON 6
PLUS +
INTCON 1
COMMA ,
IDENFR var5
ASSIGN =
INTCON 8
SEMICN ;
INTTK int
IDENFR f3
LPARENT (
INTTK int
IDENFR arr1
LBRACK [
RBRACK ]
COMMA ,
INTTK int
IDENFR arr2
LBRACK [
RBRACK ]
COMMA ,
INTTK int
IDENFR para1
COMMA ,
INTTK int
IDENFR para2
RPARENT )
LBRACE {
INTTK int
IDENFR i
SEMICN ;
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
INTCON 1
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
IDENFR i
EQL ==
INTCON 0
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IDENFR para1
ASSIGN =
IDENFR para1
PLUS +
IDENFR para2
SEMICN ;
RBRACE }
RETURNTK return
IDENFR arr1
LBRACK [
IDENFR i
RBRACK ]
MULT *
LPARENT (
IDENFR arr2
LBRACK [
IDENFR i
RBRACK ]
PLUS +
IDENFR para1
RPARENT )
MINU -
IDENFR para2
SEMICN ;
RBRACE }
INTTK int
IDENFR f4
LPARENT (
INTTK int
IDENFR para1
COMMA ,
INTTK int
IDENFR para2
RPARENT )
LBRACE {
RETURNTK return
IDENFR para1
PLUS +
IDENFR para2
SEMICN ;
RBRACE }
CHARTK char
IDENFR f5
LPARENT (
CHARTK char
IDENFR para1
COMMA ,
CHARTK char
IDENFR para2
RPARENT )
LBRACE {
RETURNTK return
IDENFR para1
PLUS +
IDENFR para2
SEMICN ;
RBRACE }
INTTK int
IDENFR f7
LPARENT (
INTTK int
IDENFR para
RPARENT )
LBRACE {
RETURNTK return
IDENFR para
SEMICN ;
RBRACE }
CHARTK char
IDENFR f8
LPARENT (
CHARTK char
IDENFR para
RPARENT )
LBRACE {
RETURNTK return
IDENFR para
SEMICN ;
RBRACE }
INTTK int
IDENFR f6
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
VOIDTK void
IDENFR f2
LPARENT (
INTTK int
IDENFR para
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR para
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR f9
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "22371491\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR a
ASSIGN =
INTCON 0
SEMICN ;
IDENFR f9
LPARENT (
RPARENT )
SEMICN ;
INTTK int
IDENFR ff
ASSIGN =
INTCON 1
SEMICN ;
INTTK int
IDENFR arr
LBRACK [
INTCON 3
RBRACK ]
SEMICN ;
INTTK int
IDENFR arr1
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
RBRACE }
SEMICN ;
INTTK int
IDENFR arr2
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
INTCON 4
COMMA ,
INTCON 5
COMMA ,
INTCON 6
RBRACE }
SEMICN ;
INTTK int
IDENFR o
ASSIGN =
IDENFR f3
LPARENT (
IDENFR arr1
COMMA ,
IDENFR arr2
COMMA ,
IDENFR a
COMMA ,
IDENFR ff
RPARENT )
SEMICN ;
CONSTTK const
INTTK int
IDENFR b
ASSIGN =
INTCON 1
SEMICN ;
CHARTK char
IDENFR e
ASSIGN =
CHRCON 'c'
SEMICN ;
IDENFR e
ASSIGN =
IDENFR f8
LPARENT (
CHRCON 'c'
RPARENT )
SEMICN ;
IDENFR a
ASSIGN =
LPARENT (
IDENFR a
PLUS +
IDENFR b
RPARENT )
PLUS +
IDENFR b
PLUS +
INTCON 10
SEMICN ;
IDENFR a
ASSIGN =
MINU -
IDENFR a
SEMICN ;
MINU -
IDENFR a
SEMICN ;
IDENFR a
SEMICN ;
IDENFR a
ASSIGN =
IDENFR a
DIV /
INTCON 2
SEMICN ;
IDENFR a
ASSIGN =
IDENFR a
MOD %
INTCON 2
SEMICN ;
IFTK if
LPARENT (
NOT !
IDENFR a
RPARENT )
LBRACE {
RBRACE }
IDENFR e
ASSIGN =
IDENFR f5
LPARENT (
CHRCON 'g'
COMMA ,
CHRCON 'f'
RPARENT )
SEMICN ;
INTTK int
IDENFR h
ASSIGN =
IDENFR a
PLUS +
INTCON 1
SEMICN ;
IDENFR h
ASSIGN =
IDENFR a
SEMICN ;
IDENFR e
ASSIGN =
GETCHARTK getchar
LPARENT (
RPARENT )
SEMICN ;
INTTK int
IDENFR d
ASSIGN =
INTCON 4
COMMA ,
IDENFR c
ASSIGN =
INTCON 1
SEMICN ;
INTTK int
IDENFR i
SEMICN ;
IDENFR i
ASSIGN =
IDENFR f7
LPARENT (
INTCON 0
RPARENT )
SEMICN ;
IDENFR c
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR c
ASSIGN =
IDENFR f4
LPARENT (
IDENFR a
COMMA ,
IDENFR d
RPARENT )
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
IDENFR d
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IDENFR c
ASSIGN =
IDENFR a
MULT *
MINU -
INTCON 1
PLUS +
LPARENT (
IDENFR d
DIV /
LPARENT (
IDENFR i
PLUS +
INTCON 1
RPARENT )
RPARENT )
MOD %
INTCON 2
PLUS +
LPARENT (
IDENFR b
DIV /
MINU -
PLUS +
MINU -
INTCON 3
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR c
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR c
GRE >
INTCON 0
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "pass\n"
RPARENT )
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "failed\n"
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR i
GEQ >=
INTCON 0
RPARENT )
LBRACE {
CONTINUETK continue
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
RBRACE }
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
IDENFR i
LSS <
IDENFR d
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
IDENFR d
SEMICN ;
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
IDENFR i
LSS <
IDENFR d
SEMICN ;
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
SEMICN ;
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
SEMICN ;
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
IFTK if
LPARENT (
NOT !
INTCON 0
RPARENT )
LBRACE {
RBRACE }
ELSETK else
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR d
GEQ >=
IDENFR a
RPARENT )
LBRACE {
RBRACE }
SEMICN ;
IFTK if
LPARENT (
IDENFR d
LEQ <=
IDENFR a
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR d
EQL ==
IDENFR a
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR d
GRE >
IDENFR a
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR d
LSS <
IDENFR a
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR d
NEQ !=
IDENFR a
RPARENT )
SEMICN ;
LBRACE {
RBRACE }
SEMICN ;
INTCON 123
SEMICN ;
CHRCON 'c'
SEMICN ;
IDENFR f6
LPARENT (
RPARENT )
SEMICN ;
IFTK if
LPARENT (
NOT !
INTCON 0
RPARENT )
LBRACE {
IDENFR f2
LPARENT (
INTCON 1
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
INTCON 0
AND &&
IDENFR d
NEQ !=
IDENFR a
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
INTCON 1
OR ||
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
NOT !
IDENFR d
EQL ==
IDENFR a
OR ||
IDENFR a
GRE >
INTCON 0
AND &&
INTCON 1
EQL ==
INTCON 1
AND &&
LPARENT (
IDENFR d
PLUS +
INTCON 1
RPARENT )
MOD %
INTCON 2
DIV /
INTCON 2
RPARENT )
LBRACE {
RBRACE }
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
CONSTTK const
INTTK int
IDENFR const_var1
ASSIGN =
INTCON 17
COMMA ,
IDENFR const_var2
ASSIGN =
LPARENT (
INTCON 7
PLUS +
INTCON 17
RPARENT )
DIV /
INTCON 8
SEMICN ;
CONSTTK const
INTTK int
IDENFR arr
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
RBRACE }
SEMICN ;
CONSTTK const
CHARTK char
IDENFR const_var3
ASSIGN =
CHRCON 'c'
SEMICN ;
CONSTTK const
CHARTK char
IDENFR s
LBRACK [
INTCON 5
RBRACK ]
ASSIGN =
STRCON "abcd"
SEMICN ;
CHARTK char
IDENFR str
LBRACK [
INTCON 5
RBRACK ]
ASSIGN =
STRCON "abcd"
SEMICN ;
CONSTTK const
INTTK int
IDENFR cot_var1
ASSIGN =
IDENFR const_var1
PLUS +
IDENFR const_var2
SEMICN ;
INTTK int
IDENFR var1
ASSIGN =
INTCON 5
SEMICN ;
INTTK int
IDENFR var2
ASSIGN =
INTCON 2
COMMA ,
IDENFR var3
ASSIGN =
INTCON 10
SEMICN ;
CHARTK char
IDENFR var4
ASSIGN =
INTCON 6
PLUS +
INTCON 1
COMMA ,
IDENFR var5
ASSIGN =
INTCON 8
SEMICN ;
INTTK int
IDENFR f3
LPARENT (
INTTK int
IDENFR arr1
LBRACK [
RBRACK ]
COMMA ,
INTTK int
IDENFR arr2
LBRACK [
RBRACK ]
COMMA ,
INTTK int
IDENFR para1
COMMA ,
INTTK int
IDENFR para2
RPARENT )
LBRACE {
INTTK int
IDENFR i
SEMICN ;
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
INTCON 1
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
IDENFR i
EQL ==
INTCON 0
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IDENFR para1
ASSIGN =
IDENFR para1
PLUS +
IDENFR para2
SEMICN ;
RBRACE }
RETURNTK return
IDENFR arr1
LBRACK [
IDENFR i
RBRACK ]
MULT *
LPARENT (
IDENFR arr2
LBRACK [
IDENFR i
RBRACK ]
PLUS +
IDENFR para1
RPARENT )
MINU -
IDENFR para2
SEMICN ;
RBRACE }
INTTK int
IDENFR f4
LPARENT (
INTTK int
IDENFR para1
COMMA ,
INTTK int
IDENFR para2
RPARENT )
LBRACE {
RETURNTK return
IDENFR para1
PLUS +
IDENFR para2
SEMICN ;
RBRACE }
CHARTK char
IDENFR f5
LPARENT (
CHARTK char
IDENFR para1
COMMA ,
CHARTK char
IDENFR para2
RPARENT )
LBRACE {
RETURNTK return
IDENFR para1
PLUS +
IDENFR para2
SEMICN ;
RBRACE }
INTTK int
IDENFR f7
LPARENT (
INTTK int
IDENFR para
RPARENT )
LBRACE {
RETURNTK return
IDENFR para
SEMICN ;
RBRACE }
CHARTK char
IDENFR f8
LPARENT (
CHARTK char
IDENFR para
RPARENT )
LBRACE {
RETURNTK return
IDENFR para
SEMICN ;
RBRACE }
INTTK int
IDENFR f6
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
VOIDTK void
IDENFR f2
LPARENT (
INTTK int
IDENFR para
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR para
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR f9
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "22371491\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR a
ASSIGN =
INTCON 0
SEMICN ;
IDENFR f9
LPARENT (
RPARENT )
SEMICN ;
INTTK int
IDENFR ff
ASSIGN =
INTCON 1
SEMICN ;
INTTK int
IDENFR arr
LBRACK [
INTCON 3
RBRACK ]
SEMICN ;
INTTK int
IDENFR arr1
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
RBRACE }
SEMICN ;
INTTK int
IDENFR arr2
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
INTCON 4
COMMA ,
INTCON 5
COMMA ,
INTCON 6
RBRACE }
SEMICN ;
INTTK int
IDENFR o
ASSIGN =
IDENFR f3
LPARENT (
IDENFR arr1
COMMA ,
IDENFR arr2
COMMA ,
IDENFR a
COMMA ,
IDENFR ff
RPARENT )
SEMICN ;
CONSTTK const
INTTK int
IDENFR b
ASSIGN =
INTCON 1
SEMICN ;
CHARTK char
IDENFR e
ASSIGN =
CHRCON 'c'
SEMICN ;
IDENFR e
ASSIGN =
IDENFR f8
LPARENT (
CHRCON 'c'
RPARENT )
SEMICN ;
IDENFR a
ASSIGN =
LPARENT (
IDENFR a
PLUS +
IDENFR b
RPARENT )
PLUS +
IDENFR b
PLUS +
INTCON 10
SEMICN ;
IDENFR a
ASSIGN =
MINU -
IDENFR a
SEMICN ;
MINU -
IDENFR a
SEMICN ;
IDENFR a
SEMICN ;
IDENFR a
ASSIGN =
IDENFR a
DIV /
INTCON 2
SEMICN ;
IDENFR a
ASSIGN =
IDENFR a
MOD %
INTCON 2
SEMICN ;
IFTK if
LPARENT (
NOT !
IDENFR a
RPARENT )
LBRACE {
RBRACE }
IDENFR e
ASSIGN =
IDENFR f5
LPARENT (
CHRCON 'g'
COMMA ,
CHRCON 'f'
RPARENT )
SEMICN ;
INTTK int
IDENFR h
ASSIGN =
IDENFR a
PLUS +
INTCON 1
SEMICN ;
IDENFR h
ASSIGN =
IDENFR a
SEMICN ;
IDENFR e
ASSIGN =
GETCHARTK getchar
LPARENT (
RPARENT )
SEMICN ;
INTTK int
IDENFR d
ASSIGN =
INTCON 4
COMMA ,
IDENFR c
ASSIGN =
INTCON 1
SEMICN ;
INTTK int
IDENFR i
SEMICN ;
IDENFR i
ASSIGN =
IDENFR f7
LPARENT (
INTCON 0
RPARENT )
SEMICN ;
IDENFR c
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR c
ASSIGN =
IDENFR f4
LPARENT (
IDENFR a
COMMA ,
IDENFR d
RPARENT )
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
IDENFR d
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IDENFR c
ASSIGN =
IDENFR a
MULT *
MINU -
INTCON 1
PLUS +
LPARENT (
IDENFR d
DIV /
LPARENT (
IDENFR i
PLUS +
INTCON 1
RPARENT )
RPARENT )
MOD %
INTCON 2
PLUS +
LPARENT (
IDENFR b
DIV /
MINU -
PLUS +
MINU -
INTCON 3
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR c
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR c
GRE >
INTCON 0
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "pass\n"
RPARENT )
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "failed\n"
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR i
GEQ >=
INTCON 0
RPARENT )
LBRACE {
CONTINUETK continue
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
RBRACE }
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
IDENFR i
LSS <
IDENFR d
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
IDENFR d
SEMICN ;
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
IDENFR i
LSS <
IDENFR d
SEMICN ;
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
SEMICN ;
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
SEMICN ;
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
IFTK if
LPARENT (
NOT !
INTCON 0
RPARENT )
LBRACE {
RBRACE }
ELSETK else
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR d
GEQ >=
IDENFR a
RPARENT )
LBRACE {
RBRACE }
SEMICN ;
IFTK if
LPARENT (
IDENFR d
LEQ <=
IDENFR a
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR d
EQL ==
IDENFR a
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR d
GRE >
IDENFR a
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR d
LSS <
IDENFR a
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR d
NEQ !=
IDENFR a
RPARENT )
SEMICN ;
LBRACE {
RBRACE }
SEMICN ;
INTCON 123
SEMICN ;
CHRCON 'c'
SEMICN ;
IDENFR f6
LPARENT (
RPARENT )
SEMICN ;
IFTK if
LPARENT (
NOT !
INTCON 0
RPARENT )
LBRACE {
IDENFR f2
LPARENT (
INTCON 1
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
INTCON 0
AND &&
IDENFR d
NEQ !=
IDENFR a
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
INTCON 1
OR ||
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
NOT !
IDENFR d
EQL ==
IDENFR a
OR ||
IDENFR a
GRE >
INTCON 0
AND &&
INTCON 1
EQL ==
INTCON 1
AND &&
LPARENT (
IDENFR d
PLUS +
INTCON 1
RPARENT )
MOD %
INTCON 2
DIV /
INTCON 2
RPARENT )
LBRACE {
RBRACE }
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
CONSTTK const
INTTK int
IDENFR const_var1
ASSIGN =
INTCON 17
COMMA ,
IDENFR const_var2
ASSIGN =
LPARENT (
INTCON 7
PLUS +
INTCON 17
RPARENT )
DIV /
INTCON 8
SEMICN ;
CONSTTK const
INTTK int
IDENFR arr
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
RBRACE }
SEMICN ;
CONSTTK const
CHARTK char
IDENFR const_var3
ASSIGN =
CHRCON 'c'
SEMICN ;
CONSTTK const
CHARTK char
IDENFR s
LBRACK [
INTCON 5
RBRACK ]
ASSIGN =
STRCON "abcd"
SEMICN ;
CHARTK char
IDENFR str
LBRACK [
INTCON 5
RBRACK ]
ASSIGN =
STRCON "abcd"
SEMICN ;
CONSTTK const
INTTK int
IDENFR cot_var1
ASSIGN =
IDENFR const_var1
PLUS +
IDENFR const_var2
SEMICN ;
INTTK int
IDENFR var1
ASSIGN =
INTCON 5
SEMICN ;
INTTK int
IDENFR var2
ASSIGN =
INTCON 2
COMMA ,
IDENFR var3
ASSIGN =
INTCON 10
SEMICN ;
CHARTK char
IDENFR var4
ASSIGN =
INTCON 6
PLUS +
INTCON 1
COMMA ,
IDENFR var5
ASSIGN =
INTCON 8
SEMICN ;
INTTK int
IDENFR f3
LPARENT (
INTTK int
IDENFR arr1
LBRACK [
RBRACK ]
COMMA ,
INTTK int
IDENFR arr2
LBRACK [
RBRACK ]
COMMA ,
INTTK int
IDENFR para1
COMMA ,
INTTK int
IDENFR para2
RPARENT )
LBRACE {
INTTK int
IDENFR i
SEMICN ;
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
INTCON 1
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
IDENFR i
EQL ==
INTCON 0
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IDENFR para1
ASSIGN =
IDENFR para1
PLUS +
IDENFR para2
SEMICN ;
RBRACE }
RETURNTK return
IDENFR arr1
LBRACK [
IDENFR i
RBRACK ]
MULT *
LPARENT (
IDENFR arr2
LBRACK [
IDENFR i
RBRACK ]
PLUS +
IDENFR para1
RPARENT )
MINU -
IDENFR para2
SEMICN ;
RBRACE }
INTTK int
IDENFR f4
LPARENT (
INTTK int
IDENFR para1
COMMA ,
INTTK int
IDENFR para2
RPARENT )
LBRACE {
RETURNTK return
IDENFR para1
PLUS +
IDENFR para2
SEMICN ;
RBRACE }
CHARTK char
IDENFR f5
LPARENT (
CHARTK char
IDENFR para1
COMMA ,
CHARTK char
IDENFR para2
RPARENT )
LBRACE {
RETURNTK return
IDENFR para1
PLUS +
IDENFR para2
SEMICN ;
RBRACE }
INTTK int
IDENFR f7
LPARENT (
INTTK int
IDENFR para
RPARENT )
LBRACE {
RETURNTK return
IDENFR para
SEMICN ;
RBRACE }
CHARTK char
IDENFR f8
LPARENT (
CHARTK char
IDENFR para
RPARENT )
LBRACE {
RETURNTK return
IDENFR para
SEMICN ;
RBRACE }
INTTK int
IDENFR f6
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
VOIDTK void
IDENFR f2
LPARENT (
INTTK int
IDENFR para
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR para
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR f9
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "22371491\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR a
ASSIGN =
INTCON 0
SEMICN ;
IDENFR f9
LPARENT (
RPARENT )
SEMICN ;
INTTK int
IDENFR ff
ASSIGN =
INTCON 1
SEMICN ;
INTTK int
IDENFR arr
LBRACK [
INTCON 3
RBRACK ]
SEMICN ;
INTTK int
IDENFR arr1
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
RBRACE }
SEMICN ;
INTTK int
IDENFR arr2
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
INTCON 4
COMMA ,
INTCON 5
COMMA ,
INTCON 6
RBRACE }
SEMICN ;
INTTK int
IDENFR o
ASSIGN =
IDENFR f3
LPARENT (
IDENFR arr1
COMMA ,
IDENFR arr2
COMMA ,
IDENFR a
COMMA ,
IDENFR ff
RPARENT )
SEMICN ;
CONSTTK const
INTTK int
IDENFR b
ASSIGN =
INTCON 1
SEMICN ;
CHARTK char
IDENFR e
ASSIGN =
CHRCON 'c'
SEMICN ;
IDENFR e
ASSIGN =
IDENFR f8
LPARENT (
CHRCON 'c'
RPARENT )
SEMICN ;
IDENFR a
ASSIGN =
LPARENT (
IDENFR a
PLUS +
IDENFR b
RPARENT )
PLUS +
IDENFR b
PLUS +
INTCON 10
SEMICN ;
IDENFR a
ASSIGN =
MINU -
IDENFR a
SEMICN ;
MINU -
IDENFR a
SEMICN ;
IDENFR a
SEMICN ;
IDENFR a
ASSIGN =
IDENFR a
DIV /
INTCON 2
SEMICN ;
IDENFR a
ASSIGN =
IDENFR a
MOD %
INTCON 2
SEMICN ;
IFTK if
LPARENT (
NOT !
IDENFR a
RPARENT )
LBRACE {
RBRACE }
IDENFR e
ASSIGN =
IDENFR f5
LPARENT (
CHRCON 'g'
COMMA ,
CHRCON 'f'
RPARENT )
SEMICN ;
INTTK int
IDENFR h
ASSIGN =
IDENFR a
PLUS +
INTCON 1
SEMICN ;
IDENFR h
ASSIGN =
IDENFR a
SEMICN ;
IDENFR e
ASSIGN =
GETCHARTK getchar
LPARENT (
RPARENT )
SEMICN ;
INTTK int
IDENFR d
ASSIGN =
INTCON 4
COMMA ,
IDENFR c
ASSIGN =
INTCON 1
SEMICN ;
INTTK int
IDENFR i
SEMICN ;
IDENFR i
ASSIGN =
IDENFR f7
LPARENT (
INTCON 0
RPARENT )
SEMICN ;
IDENFR c
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR c
ASSIGN =
IDENFR f4
LPARENT (
IDENFR a
COMMA ,
IDENFR d
RPARENT )
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
IDENFR d
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IDENFR c
ASSIGN =
IDENFR a
MULT *
MINU -
INTCON 1
PLUS +
LPARENT (
IDENFR d
DIV /
LPARENT (
IDENFR i
PLUS +
INTCON 1
RPARENT )
RPARENT )
MOD %
INTCON 2
PLUS +
LPARENT (
IDENFR b
DIV /
MINU -
PLUS +
MINU -
INTCON 3
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR c
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR c
GRE >
INTCON 0
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "pass\n"
RPARENT )
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "failed\n"
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR i
GEQ >=
INTCON 0
RPARENT )
LBRACE {
CONTINUETK continue
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
RBRACE }
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
IDENFR i
LSS <
IDENFR d
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
IDENFR d
SEMICN ;
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
IDENFR i
LSS <
IDENFR d
SEMICN ;
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
SEMICN ;
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
SEMICN ;
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
IFTK if
LPARENT (
NOT !
INTCON 0
RPARENT )
LBRACE {
RBRACE }
ELSETK else
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR d
GEQ >=
IDENFR a
RPARENT )
LBRACE {
RBRACE }
SEMICN ;
IFTK if
LPARENT (
IDENFR d
LEQ <=
IDENFR a
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR d
EQL ==
IDENFR a
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR d
GRE >
IDENFR a
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR d
LSS <
IDENFR a
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR d
NEQ !=
IDENFR a
RPARENT )
SEMICN ;
LBRACE {
RBRACE }
SEMICN ;
INTCON 123
SEMICN ;
CHRCON 'c'
SEMICN ;
IDENFR f6
LPARENT (
RPARENT )
SEMICN ;
IFTK if
LPARENT (
NOT !
INTCON 0
RPARENT )
LBRACE {
IDENFR f2
LPARENT (
INTCON 1
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
INTCON 0
AND &&
IDENFR d
NEQ !=
IDENFR a
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
INTCON 1
OR ||
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
NOT !
IDENFR d
EQL ==
IDENFR a
OR ||
IDENFR a
GRE >
INTCON 0
AND &&
INTCON 1
EQL ==
INTCON 1
AND &&
LPARENT (
IDENFR d
PLUS +
INTCON 1
RPARENT )
MOD %
INTCON 2
DIV /
INTCON 2
RPARENT )
LBRACE {
RBRACE }
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
CONSTTK const
INTTK int
IDENFR const_var1
ASSIGN =
INTCON 17
COMMA ,
IDENFR const_var2
ASSIGN =
LPARENT (
INTCON 7
PLUS +
INTCON 17
RPARENT )
DIV /
INTCON 8
SEMICN ;
CONSTTK const
INTTK int
IDENFR arr
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
RBRACE }
SEMICN ;
CONSTTK const
CHARTK char
IDENFR const_var3
ASSIGN =
CHRCON 'c'
SEMICN ;
CONSTTK const
CHARTK char
IDENFR s
LBRACK [
INTCON 5
RBRACK ]
ASSIGN =
STRCON "abcd"
SEMICN ;
CHARTK char
IDENFR str
LBRACK [
INTCON 5
RBRACK ]
ASSIGN =
STRCON "abcd"
SEMICN ;
CONSTTK const
INTTK int
IDENFR cot_var1
ASSIGN =
IDENFR const_var1
PLUS +
IDENFR const_var2
SEMICN ;
INTTK int
IDENFR var1
ASSIGN =
INTCON 5
SEMICN ;
INTTK int
IDENFR var2
ASSIGN =
INTCON 2
COMMA ,
IDENFR var3
ASSIGN =
INTCON 10
SEMICN ;
CHARTK char
IDENFR var4
ASSIGN =
INTCON 6
PLUS +
INTCON 1
COMMA ,
IDENFR var5
ASSIGN =
INTCON 8
SEMICN ;
INTTK int
IDENFR f3
LPARENT (
INTTK int
IDENFR arr1
LBRACK [
RBRACK ]
COMMA ,
INTTK int
IDENFR arr2
LBRACK [
RBRACK ]
COMMA ,
INTTK int
IDENFR para1
COMMA ,
INTTK int
IDENFR para2
RPARENT )
LBRACE {
INTTK int
IDENFR i
SEMICN ;
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
INTCON 1
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
IDENFR i
EQL ==
INTCON 0
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IDENFR para1
ASSIGN =
IDENFR para1
PLUS +
IDENFR para2
SEMICN ;
RBRACE }
RETURNTK return
IDENFR arr1
LBRACK [
IDENFR i
RBRACK ]
MULT *
LPARENT (
IDENFR arr2
LBRACK [
IDENFR i
RBRACK ]
PLUS +
IDENFR para1
RPARENT )
MINU -
IDENFR para2
SEMICN ;
RBRACE }
INTTK int
IDENFR f4
LPARENT (
INTTK int
IDENFR para1
COMMA ,
INTTK int
IDENFR para2
RPARENT )
LBRACE {
RETURNTK return
IDENFR para1
PLUS +
IDENFR para2
SEMICN ;
RBRACE }
CHARTK char
IDENFR f5
LPARENT (
CHARTK char
IDENFR para1
COMMA ,
CHARTK char
IDENFR para2
RPARENT )
LBRACE {
RETURNTK return
IDENFR para1
PLUS +
IDENFR para2
SEMICN ;
RBRACE }
INTTK int
IDENFR f7
LPARENT (
INTTK int
IDENFR para
RPARENT )
LBRACE {
RETURNTK return
IDENFR para
SEMICN ;
RBRACE }
CHARTK char
IDENFR f8
LPARENT (
CHARTK char
IDENFR para
RPARENT )
LBRACE {
RETURNTK return
IDENFR para
SEMICN ;
RBRACE }
INTTK int
IDENFR f6
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
VOIDTK void
IDENFR f2
LPARENT (
INTTK int
IDENFR para
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR para
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR f9
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "22371491\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR a
ASSIGN =
INTCON 0
SEMICN ;
IDENFR f9
LPARENT (
RPARENT )
SEMICN ;
INTTK int
IDENFR ff
ASSIGN =
INTCON 1
SEMICN ;
INTTK int
IDENFR arr
LBRACK [
INTCON 3
RBRACK ]
SEMICN ;
INTTK int
IDENFR arr1
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
RBRACE }
SEMICN ;
INTTK int
IDENFR arr2
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
INTCON 4
COMMA ,
INTCON 5
COMMA ,
INTCON 6
RBRACE }
SEMICN ;
INTTK int
IDENFR o
ASSIGN =
IDENFR f3
LPARENT (
IDENFR arr1
COMMA ,
IDENFR arr2
COMMA ,
IDENFR a
COMMA ,
IDENFR ff
RPARENT )
SEMICN ;
CONSTTK const
INTTK int
IDENFR b
ASSIGN =
INTCON 1
SEMICN ;
CHARTK char
IDENFR e
ASSIGN =
CHRCON 'c'
SEMICN ;
IDENFR e
ASSIGN =
IDENFR f8
LPARENT (
CHRCON 'c'
RPARENT )
SEMICN ;
IDENFR a
ASSIGN =
LPARENT (
IDENFR a
PLUS +
IDENFR b
RPARENT )
PLUS +
IDENFR b
PLUS +
INTCON 10
SEMICN ;
IDENFR a
ASSIGN =
MINU -
IDENFR a
SEMICN ;
MINU -
IDENFR a
SEMICN ;
IDENFR a
SEMICN ;
IDENFR a
ASSIGN =
IDENFR a
DIV /
INTCON 2
SEMICN ;
IDENFR a
ASSIGN =
IDENFR a
MOD %
INTCON 2
SEMICN ;
IFTK if
LPARENT (
NOT !
IDENFR a
RPARENT )
LBRACE {
RBRACE }
IDENFR e
ASSIGN =
IDENFR f5
LPARENT (
CHRCON 'g'
COMMA ,
CHRCON 'f'
RPARENT )
SEMICN ;
INTTK int
IDENFR h
ASSIGN =
IDENFR a
PLUS +
INTCON 1
SEMICN ;
IDENFR h
ASSIGN =
IDENFR a
SEMICN ;
IDENFR e
ASSIGN =
GETCHARTK getchar
LPARENT (
RPARENT )
SEMICN ;
INTTK int
IDENFR d
ASSIGN =
INTCON 4
COMMA ,
IDENFR c
ASSIGN =
INTCON 1
SEMICN ;
INTTK int
IDENFR i
SEMICN ;
IDENFR i
ASSIGN =
IDENFR f7
LPARENT (
INTCON 0
RPARENT )
SEMICN ;
IDENFR c
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR c
ASSIGN =
IDENFR f4
LPARENT (
IDENFR a
COMMA ,
IDENFR d
RPARENT )
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
IDENFR d
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IDENFR c
ASSIGN =
IDENFR a
MULT *
MINU -
INTCON 1
PLUS +
LPARENT (
IDENFR d
DIV /
LPARENT (
IDENFR i
PLUS +
INTCON 1
RPARENT )
RPARENT )
MOD %
INTCON 2
PLUS +
LPARENT (
IDENFR b
DIV /
MINU -
PLUS +
MINU -
INTCON 3
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR c
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR c
GRE >
INTCON 0
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "pass\n"
RPARENT )
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "failed\n"
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR i
GEQ >=
INTCON 0
RPARENT )
LBRACE {
CONTINUETK continue
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
RBRACE }
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
IDENFR i
LSS <
IDENFR d
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
IDENFR d
SEMICN ;
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
IDENFR i
LSS <
IDENFR d
SEMICN ;
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
SEMICN ;
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
SEMICN ;
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
IFTK if
LPARENT (
NOT !
INTCON 0
RPARENT )
LBRACE {
RBRACE }
ELSETK else
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR d
GEQ >=
IDENFR a
RPARENT )
LBRACE {
RBRACE }
SEMICN ;
IFTK if
LPARENT (
IDENFR d
LEQ <=
IDENFR a
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR d
EQL ==
IDENFR a
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR d
GRE >
IDENFR a
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR d
LSS <
IDENFR a
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR d
NEQ !=
IDENFR a
RPARENT )
SEMICN ;
LBRACE {
RBRACE }
SEMICN ;
INTCON 123
SEMICN ;
CHRCON 'c'
SEMICN ;
IDENFR f6
LPARENT (
RPARENT )
SEMICN ;
IFTK if
LPARENT (
NOT !
INTCON 0
RPARENT )
LBRACE {
IDENFR f2
LPARENT (
INTCON 1
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
INTCON 0
AND &&
IDENFR d
NEQ !=
IDENFR a
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
INTCON 1
OR ||
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
NOT !
IDENFR d
EQL ==
IDENFR a
OR ||
IDENFR a
GRE >
INTCON 0
AND &&
INTCON 1
EQL ==
INTCON 1
AND &&
LPARENT (
IDENFR d
PLUS +
INTCON 1
RPARENT )
MOD %
INTCON 2
DIV /
INTCON 2
RPARENT )
LBRACE {
RBRACE }
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
CONSTTK const
INTTK int
IDENFR const_var1
ASSIGN =
INTCON 17
COMMA ,
IDENFR const_var2
ASSIGN =
LPARENT (
INTCON 7
PLUS +
INTCON 17
RPARENT )
DIV /
INTCON 8
SEMICN ;
CONSTTK const
INTTK int
IDENFR arr
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
RBRACE }
SEMICN ;
CONSTTK const
CHARTK char
IDENFR const_var3
ASSIGN =
CHRCON 'c'
SEMICN ;
CONSTTK const
CHARTK char
IDENFR s
LBRACK [
INTCON 5
RBRACK ]
ASSIGN =
STRCON "abcd"
SEMICN ;
CHARTK char
IDENFR str
LBRACK [
INTCON 5
RBRACK ]
ASSIGN =
STRCON "abcd"
SEMICN ;
CONSTTK const
INTTK int
IDENFR cot_var1
ASSIGN =
IDENFR const_var1
PLUS +
IDENFR const_var2
SEMICN ;
INTTK int
IDENFR var1
ASSIGN =
INTCON 5
SEMICN ;
INTTK int
IDENFR var2
ASSIGN =
INTCON 2
COMMA ,
IDENFR var3
ASSIGN =
INTCON 10
SEMICN ;
CHARTK char
IDENFR var4
ASSIGN =
INTCON 6
PLUS +
INTCON 1
COMMA ,
IDENFR var5
ASSIGN =
INTCON 8
SEMICN ;
INTTK int
IDENFR f3
LPARENT (
INTTK int
IDENFR arr1
LBRACK [
RBRACK ]
COMMA ,
INTTK int
IDENFR arr2
LBRACK [
RBRACK ]
COMMA ,
INTTK int
IDENFR para1
COMMA ,
INTTK int
IDENFR para2
RPARENT )
LBRACE {
INTTK int
IDENFR i
SEMICN ;
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
INTCON 1
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
IDENFR i
EQL ==
INTCON 0
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IDENFR para1
ASSIGN =
IDENFR para1
PLUS +
IDENFR para2
SEMICN ;
RBRACE }
RETURNTK return
IDENFR arr1
LBRACK [
IDENFR i
RBRACK ]
MULT *
LPARENT (
IDENFR arr2
LBRACK [
IDENFR i
RBRACK ]
PLUS +
IDENFR para1
RPARENT )
MINU -
IDENFR para2
SEMICN ;
RBRACE }
INTTK int
IDENFR f4
LPARENT (
INTTK int
IDENFR para1
COMMA ,
INTTK int
IDENFR para2
RPARENT )
LBRACE {
RETURNTK return
IDENFR para1
PLUS +
IDENFR para2
SEMICN ;
RBRACE }
CHARTK char
IDENFR f5
LPARENT (
CHARTK char
IDENFR para1
COMMA ,
CHARTK char
IDENFR para2
RPARENT )
LBRACE {
RETURNTK return
IDENFR para1
PLUS +
IDENFR para2
SEMICN ;
RBRACE }
INTTK int
IDENFR f7
LPARENT (
INTTK int
IDENFR para
RPARENT )
LBRACE {
RETURNTK return
IDENFR para
SEMICN ;
RBRACE }
CHARTK char
IDENFR f8
LPARENT (
CHARTK char
IDENFR para
RPARENT )
LBRACE {
RETURNTK return
IDENFR para
SEMICN ;
RBRACE }
INTTK int
IDENFR f6
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
VOIDTK void
IDENFR f2
LPARENT (
INTTK int
IDENFR para
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR para
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR f9
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "22371491\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR a
ASSIGN =
INTCON 0
SEMICN ;
IDENFR f9
LPARENT (
RPARENT )
SEMICN ;
INTTK int
IDENFR ff
ASSIGN =
INTCON 1
SEMICN ;
INTTK int
IDENFR arr
LBRACK [
INTCON 3
RBRACK ]
SEMICN ;
INTTK int
IDENFR arr1
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
RBRACE }
SEMICN ;
INTTK int
IDENFR arr2
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
INTCON 4
COMMA ,
INTCON 5
COMMA ,
INTCON 6
RBRACE }
SEMICN ;
INTTK int
IDENFR o
ASSIGN =
IDENFR f3
LPARENT (
IDENFR arr1
COMMA ,
IDENFR arr2
COMMA ,
IDENFR a
COMMA ,
IDENFR ff
RPARENT )
SEMICN ;
CONSTTK const
INTTK int
IDENFR b
ASSIGN =
INTCON 1
SEMICN ;
CHARTK char
IDENFR e
ASSIGN =
CHRCON 'c'
SEMICN ;
IDENFR e
ASSIGN =
IDENFR f8
LPARENT (
CHRCON 'c'
RPARENT )
SEMICN ;
IDENFR a
ASSIGN =
LPARENT (
IDENFR a
PLUS +
IDENFR b
RPARENT )
PLUS +
IDENFR b
PLUS +
INTCON 10
SEMICN ;
IDENFR a
ASSIGN =
MINU -
IDENFR a
SEMICN ;
MINU -
IDENFR a
SEMICN ;
IDENFR a
SEMICN ;
IDENFR a
ASSIGN =
IDENFR a
DIV /
INTCON 2
SEMICN ;
IDENFR a
ASSIGN =
IDENFR a
MOD %
INTCON 2
SEMICN ;
IFTK if
LPARENT (
NOT !
IDENFR a
RPARENT )
LBRACE {
RBRACE }
IDENFR e
ASSIGN =
IDENFR f5
LPARENT (
CHRCON 'g'
COMMA ,
CHRCON 'f'
RPARENT )
SEMICN ;
INTTK int
IDENFR h
ASSIGN =
IDENFR a
PLUS +
INTCON 1
SEMICN ;
IDENFR h
ASSIGN =
IDENFR a
SEMICN ;
IDENFR e
ASSIGN =
GETCHARTK getchar
LPARENT (
RPARENT )
SEMICN ;
INTTK int
IDENFR d
ASSIGN =
INTCON 4
COMMA ,
IDENFR c
ASSIGN =
INTCON 1
SEMICN ;
INTTK int
IDENFR i
SEMICN ;
IDENFR i
ASSIGN =
IDENFR f7
LPARENT (
INTCON 0
RPARENT )
SEMICN ;
IDENFR c
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR c
ASSIGN =
IDENFR f4
LPARENT (
IDENFR a
COMMA ,
IDENFR d
RPARENT )
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
IDENFR d
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IDENFR c
ASSIGN =
IDENFR a
MULT *
MINU -
INTCON 1
PLUS +
LPARENT (
IDENFR d
DIV /
LPARENT (
IDENFR i
PLUS +
INTCON 1
RPARENT )
RPARENT )
MOD %
INTCON 2
PLUS +
LPARENT (
IDENFR b
DIV /
MINU -
PLUS +
MINU -
INTCON 3
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR c
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR c
GRE >
INTCON 0
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "pass\n"
RPARENT )
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "failed\n"
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR i
GEQ >=
INTCON 0
RPARENT )
LBRACE {
CONTINUETK continue
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
RBRACE }
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
IDENFR i
LSS <
IDENFR d
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
IDENFR d
SEMICN ;
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
IDENFR i
LSS <
IDENFR d
SEMICN ;
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
SEMICN ;
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
SEMICN ;
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
IFTK if
LPARENT (
NOT !
INTCON 0
RPARENT )
LBRACE {
RBRACE }
ELSETK else
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR d
GEQ >=
IDENFR a
RPARENT )
LBRACE {
RBRACE }
SEMICN ;
IFTK if
LPARENT (
IDENFR d
LEQ <=
IDENFR a
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR d
EQL ==
IDENFR a
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR d
GRE >
IDENFR a
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR d
LSS <
IDENFR a
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR d
NEQ !=
IDENFR a
RPARENT )
SEMICN ;
LBRACE {
RBRACE }
SEMICN ;
INTCON 123
SEMICN ;
CHRCON 'c'
SEMICN ;
IDENFR f6
LPARENT (
RPARENT )
SEMICN ;
IFTK if
LPARENT (
NOT !
INTCON 0
RPARENT )
LBRACE {
IDENFR f2
LPARENT (
INTCON 1
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
INTCON 0
AND &&
IDENFR d
NEQ !=
IDENFR a
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
INTCON 1
OR ||
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
NOT !
IDENFR d
EQL ==
IDENFR a
OR ||
IDENFR a
GRE >
INTCON 0
AND &&
INTCON 1
EQL ==
INTCON 1
AND &&
LPARENT (
IDENFR d
PLUS +
INTCON 1
RPARENT )
MOD %
INTCON 2
DIV /
INTCON 2
RPARENT )
LBRACE {
RBRACE }
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
CONSTTK const
INTTK int
IDENFR const_var1
ASSIGN =
INTCON 17
COMMA ,
IDENFR const_var2
ASSIGN =
LPARENT (
INTCON 7
PLUS +
INTCON 17
RPARENT )
DIV /
INTCON 8
SEMICN ;
CONSTTK const
INTTK int
IDENFR arr
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
RBRACE }
SEMICN ;
CONSTTK const
CHARTK char
IDENFR const_var3
ASSIGN =
CHRCON 'c'
SEMICN ;
CONSTTK const
CHARTK char
IDENFR s
LBRACK [
INTCON 5
RBRACK ]
ASSIGN =
STRCON "abcd"
SEMICN ;
CHARTK char
IDENFR str
LBRACK [
INTCON 5
RBRACK ]
ASSIGN =
STRCON "abcd"
SEMICN ;
CONSTTK const
INTTK int
IDENFR cot_var1
ASSIGN =
IDENFR const_var1
PLUS +
IDENFR const_var2
SEMICN ;
INTTK int
IDENFR var1
ASSIGN =
INTCON 5
SEMICN ;
INTTK int
IDENFR var2
ASSIGN =
INTCON 2
COMMA ,
IDENFR var3
ASSIGN =
INTCON 10
SEMICN ;
CHARTK char
IDENFR var4
ASSIGN =
INTCON 6
PLUS +
INTCON 1
COMMA ,
IDENFR var5
ASSIGN =
INTCON 8
SEMICN ;
INTTK int
IDENFR f3
LPARENT (
INTTK int
IDENFR arr1
LBRACK [
RBRACK ]
COMMA ,
INTTK int
IDENFR arr2
LBRACK [
RBRACK ]
COMMA ,
INTTK int
IDENFR para1
COMMA ,
INTTK int
IDENFR para2
RPARENT )
LBRACE {
INTTK int
IDENFR i
SEMICN ;
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
INTCON 1
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
IDENFR i
EQL ==
INTCON 0
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IDENFR para1
ASSIGN =
IDENFR para1
PLUS +
IDENFR para2
SEMICN ;
RBRACE }
RETURNTK return
IDENFR arr1
LBRACK [
IDENFR i
RBRACK ]
MULT *
LPARENT (
IDENFR arr2
LBRACK [
IDENFR i
RBRACK ]
PLUS +
IDENFR para1
RPARENT )
MINU -
IDENFR para2
SEMICN ;
RBRACE }
INTTK int
IDENFR f4
LPARENT (
INTTK int
IDENFR para1
COMMA ,
INTTK int
IDENFR para2
RPARENT )
LBRACE {
RETURNTK return
IDENFR para1
PLUS +
IDENFR para2
SEMICN ;
RBRACE }
CHARTK char
IDENFR f5
LPARENT (
CHARTK char
IDENFR para1
COMMA ,
CHARTK char
IDENFR para2
RPARENT )
LBRACE {
RETURNTK return
IDENFR para1
PLUS +
IDENFR para2
SEMICN ;
RBRACE }
INTTK int
IDENFR f7
LPARENT (
INTTK int
IDENFR para
RPARENT )
LBRACE {
RETURNTK return
IDENFR para
SEMICN ;
RBRACE }
CHARTK char
IDENFR f8
LPARENT (
CHARTK char
IDENFR para
RPARENT )
LBRACE {
RETURNTK return
IDENFR para
SEMICN ;
RBRACE }
INTTK int
IDENFR f6
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
VOIDTK void
IDENFR f2
LPARENT (
INTTK int
IDENFR para
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR para
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR f9
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "22371491\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR a
ASSIGN =
INTCON 0
SEMICN ;
IDENFR f9
LPARENT (
RPARENT )
SEMICN ;
INTTK int
IDENFR ff
ASSIGN =
INTCON 1
SEMICN ;
INTTK int
IDENFR arr
LBRACK [
INTCON 3
RBRACK ]
SEMICN ;
INTTK int
IDENFR arr1
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
RBRACE }
SEMICN ;
INTTK int
IDENFR arr2
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
INTCON 4
COMMA ,
INTCON 5
COMMA ,
INTCON 6
RBRACE }
SEMICN ;
INTTK int
IDENFR o
ASSIGN =
IDENFR f3
LPARENT (
IDENFR arr1
COMMA ,
IDENFR arr2
COMMA ,
IDENFR a
COMMA ,
IDENFR ff
RPARENT )
SEMICN ;
CONSTTK const
INTTK int
IDENFR b
ASSIGN =
INTCON 1
SEMICN ;
CHARTK char
IDENFR e
ASSIGN =
CHRCON 'c'
SEMICN ;
IDENFR e
ASSIGN =
IDENFR f8
LPARENT (
CHRCON 'c'
RPARENT )
SEMICN ;
IDENFR a
ASSIGN =
LPARENT (
IDENFR a
PLUS +
IDENFR b
RPARENT )
PLUS +
IDENFR b
PLUS +
INTCON 10
SEMICN ;
IDENFR a
ASSIGN =
MINU -
IDENFR a
SEMICN ;
MINU -
IDENFR a
SEMICN ;
IDENFR a
SEMICN ;
IDENFR a
ASSIGN =
IDENFR a
DIV /
INTCON 2
SEMICN ;
IDENFR a
ASSIGN =
IDENFR a
MOD %
INTCON 2
SEMICN ;
IFTK if
LPARENT (
NOT !
IDENFR a
RPARENT )
LBRACE {
RBRACE }
IDENFR e
ASSIGN =
IDENFR f5
LPARENT (
CHRCON 'g'
COMMA ,
CHRCON 'f'
RPARENT )
SEMICN ;
INTTK int
IDENFR h
ASSIGN =
IDENFR a
PLUS +
INTCON 1
SEMICN ;
IDENFR h
ASSIGN =
IDENFR a
SEMICN ;
IDENFR e
ASSIGN =
GETCHARTK getchar
LPARENT (
RPARENT )
SEMICN ;
INTTK int
IDENFR d
ASSIGN =
INTCON 4
COMMA ,
IDENFR c
ASSIGN =
INTCON 1
SEMICN ;
INTTK int
IDENFR i
SEMICN ;
IDENFR i
ASSIGN =
IDENFR f7
LPARENT (
INTCON 0
RPARENT )
SEMICN ;
IDENFR c
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR c
ASSIGN =
IDENFR f4
LPARENT (
IDENFR a
COMMA ,
IDENFR d
RPARENT )
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
IDENFR d
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IDENFR c
ASSIGN =
IDENFR a
MULT *
MINU -
INTCON 1
PLUS +
LPARENT (
IDENFR d
DIV /
LPARENT (
IDENFR i
PLUS +
INTCON 1
RPARENT )
RPARENT )
MOD %
INTCON 2
PLUS +
LPARENT (
IDENFR b
DIV /
MINU -
PLUS +
MINU -
INTCON 3
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR c
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR c
GRE >
INTCON 0
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "pass\n"
RPARENT )
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "failed\n"
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR i
GEQ >=
INTCON 0
RPARENT )
LBRACE {
CONTINUETK continue
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
RBRACE }
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
IDENFR i
LSS <
IDENFR d
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
IDENFR d
SEMICN ;
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
IDENFR i
LSS <
IDENFR d
SEMICN ;
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
SEMICN ;
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
SEMICN ;
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
IFTK if
LPARENT (
NOT !
INTCON 0
RPARENT )
LBRACE {
RBRACE }
ELSETK else
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR d
GEQ >=
IDENFR a
RPARENT )
LBRACE {
RBRACE }
SEMICN ;
IFTK if
LPARENT (
IDENFR d
LEQ <=
IDENFR a
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR d
EQL ==
IDENFR a
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR d
GRE >
IDENFR a
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR d
LSS <
IDENFR a
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR d
NEQ !=
IDENFR a
RPARENT )
SEMICN ;
LBRACE {
RBRACE }
SEMICN ;
INTCON 123
SEMICN ;
CHRCON 'c'
SEMICN ;
IDENFR f6
LPARENT (
RPARENT )
SEMICN ;
IFTK if
LPARENT (
NOT !
INTCON 0
RPARENT )
LBRACE {
IDENFR f2
LPARENT (
INTCON 1
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
INTCON 0
AND &&
IDENFR d
NEQ !=
IDENFR a
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
INTCON 1
OR ||
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
NOT !
IDENFR d
EQL ==
IDENFR a
OR ||
IDENFR a
GRE >
INTCON 0
AND &&
INTCON 1
EQL ==
INTCON 1
AND &&
LPARENT (
IDENFR d
PLUS +
INTCON 1
RPARENT )
MOD %
INTCON 2
DIV /
INTCON 2
RPARENT )
LBRACE {
RBRACE }
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
CONSTTK const
INTTK int
IDENFR const_var1
ASSIGN =
INTCON 17
COMMA ,
IDENFR const_var2
ASSIGN =
LPARENT (
INTCON 7
PLUS +
INTCON 17
RPARENT )
DIV /
INTCON 8
SEMICN ;
CONSTTK const
INTTK int
IDENFR arr
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
RBRACE }
SEMICN ;
CONSTTK const
CHARTK char
IDENFR const_var3
ASSIGN =
CHRCON 'c'
SEMICN ;
CONSTTK const
CHARTK char
IDENFR s
LBRACK [
INTCON 5
RBRACK ]
ASSIGN =
STRCON "abcd"
SEMICN ;
CHARTK char
IDENFR str
LBRACK [
INTCON 5
RBRACK ]
ASSIGN =
STRCON "abcd"
SEMICN ;
CONSTTK const
INTTK int
IDENFR cot_var1
ASSIGN =
IDENFR const_var1
PLUS +
IDENFR const_var2
SEMICN ;
INTTK int
IDENFR var1
ASSIGN =
INTCON 5
SEMICN ;
INTTK int
IDENFR var2
ASSIGN =
INTCON 2
COMMA ,
IDENFR var3
ASSIGN =
INTCON 10
SEMICN ;
CHARTK char
IDENFR var4
ASSIGN =
INTCON 6
PLUS +
INTCON 1
COMMA ,
IDENFR var5
ASSIGN =
INTCON 8
SEMICN ;
INTTK int
IDENFR f3
LPARENT (
INTTK int
IDENFR arr1
LBRACK [
RBRACK ]
COMMA ,
INTTK int
IDENFR arr2
LBRACK [
RBRACK ]
COMMA ,
INTTK int
IDENFR para1
COMMA ,
INTTK int
IDENFR para2
RPARENT )
LBRACE {
INTTK int
IDENFR i
SEMICN ;
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
INTCON 1
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
IDENFR i
EQL ==
INTCON 0
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IDENFR para1
ASSIGN =
IDENFR para1
PLUS +
IDENFR para2
SEMICN ;
RBRACE }
RETURNTK return
IDENFR arr1
LBRACK [
IDENFR i
RBRACK ]
MULT *
LPARENT (
IDENFR arr2
LBRACK [
IDENFR i
RBRACK ]
PLUS +
IDENFR para1
RPARENT )
MINU -
IDENFR para2
SEMICN ;
RBRACE }
INTTK int
IDENFR f4
LPARENT (
INTTK int
IDENFR para1
COMMA ,
INTTK int
IDENFR para2
RPARENT )
LBRACE {
RETURNTK return
IDENFR para1
PLUS +
IDENFR para2
SEMICN ;
RBRACE }
CHARTK char
IDENFR f5
LPARENT (
CHARTK char
IDENFR para1
COMMA ,
CHARTK char
IDENFR para2
RPARENT )
LBRACE {
RETURNTK return
IDENFR para1
PLUS +
IDENFR para2
SEMICN ;
RBRACE }
INTTK int
IDENFR f7
LPARENT (
INTTK int
IDENFR para
RPARENT )
LBRACE {
RETURNTK return
IDENFR para
SEMICN ;
RBRACE }
CHARTK char
IDENFR f8
LPARENT (
CHARTK char
IDENFR para
RPARENT )
LBRACE {
RETURNTK return
IDENFR para
SEMICN ;
RBRACE }
INTTK int
IDENFR f6
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
VOIDTK void
IDENFR f2
LPARENT (
INTTK int
IDENFR para
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR para
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR f9
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "22371491\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR a
ASSIGN =
INTCON 0
SEMICN ;
IDENFR f9
LPARENT (
RPARENT )
SEMICN ;
INTTK int
IDENFR ff
ASSIGN =
INTCON 1
SEMICN ;
INTTK int
IDENFR arr
LBRACK [
INTCON 3
RBRACK ]
SEMICN ;
INTTK int
IDENFR arr1
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
RBRACE }
SEMICN ;
INTTK int
IDENFR arr2
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
INTCON 4
COMMA ,
INTCON 5
COMMA ,
INTCON 6
RBRACE }
SEMICN ;
INTTK int
IDENFR o
ASSIGN =
IDENFR f3
LPARENT (
IDENFR arr1
COMMA ,
IDENFR arr2
COMMA ,
IDENFR a
COMMA ,
IDENFR ff
RPARENT )
SEMICN ;
CONSTTK const
INTTK int
IDENFR b
ASSIGN =
INTCON 1
SEMICN ;
CHARTK char
IDENFR e
ASSIGN =
CHRCON 'c'
SEMICN ;
IDENFR e
ASSIGN =
IDENFR f8
LPARENT (
CHRCON 'c'
RPARENT )
SEMICN ;
IDENFR a
ASSIGN =
LPARENT (
IDENFR a
PLUS +
IDENFR b
RPARENT )
PLUS +
IDENFR b
PLUS +
INTCON 10
SEMICN ;
IDENFR a
ASSIGN =
MINU -
IDENFR a
SEMICN ;
MINU -
IDENFR a
SEMICN ;
IDENFR a
SEMICN ;
IDENFR a
ASSIGN =
IDENFR a
DIV /
INTCON 2
SEMICN ;
IDENFR a
ASSIGN =
IDENFR a
MOD %
INTCON 2
SEMICN ;
IFTK if
LPARENT (
NOT !
IDENFR a
RPARENT )
LBRACE {
RBRACE }
IDENFR e
ASSIGN =
IDENFR f5
LPARENT (
CHRCON 'g'
COMMA ,
CHRCON 'f'
RPARENT )
SEMICN ;
INTTK int
IDENFR h
ASSIGN =
IDENFR a
PLUS +
INTCON 1
SEMICN ;
IDENFR h
ASSIGN =
IDENFR a
SEMICN ;
IDENFR e
ASSIGN =
GETCHARTK getchar
LPARENT (
RPARENT )
SEMICN ;
INTTK int
IDENFR d
ASSIGN =
INTCON 4
COMMA ,
IDENFR c
ASSIGN =
INTCON 1
SEMICN ;
INTTK int
IDENFR i
SEMICN ;
IDENFR i
ASSIGN =
IDENFR f7
LPARENT (
INTCON 0
RPARENT )
SEMICN ;
IDENFR c
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR c
ASSIGN =
IDENFR f4
LPARENT (
IDENFR a
COMMA ,
IDENFR d
RPARENT )
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
IDENFR d
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IDENFR c
ASSIGN =
IDENFR a
MULT *
MINU -
INTCON 1
PLUS +
LPARENT (
IDENFR d
DIV /
LPARENT (
IDENFR i
PLUS +
INTCON 1
RPARENT )
RPARENT )
MOD %
INTCON 2
PLUS +
LPARENT (
IDENFR b
DIV /
MINU -
PLUS +
MINU -
INTCON 3
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR c
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR c
GRE >
INTCON 0
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "pass\n"
RPARENT )
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "failed\n"
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR i
GEQ >=
INTCON 0
RPARENT )
LBRACE {
CONTINUETK continue
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
RBRACE }
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
IDENFR i
LSS <
IDENFR d
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
IDENFR d
SEMICN ;
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
IDENFR i
LSS <
IDENFR d
SEMICN ;
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
SEMICN ;
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
SEMICN ;
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
IFTK if
LPARENT (
NOT !
INTCON 0
RPARENT )
LBRACE {
RBRACE }
ELSETK else
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR d
GEQ >=
IDENFR a
RPARENT )
LBRACE {
RBRACE }
SEMICN ;
IFTK if
LPARENT (
IDENFR d
LEQ <=
IDENFR a
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR d
EQL ==
IDENFR a
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR d
GRE >
IDENFR a
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR d
LSS <
IDENFR a
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR d
NEQ !=
IDENFR a
RPARENT )
SEMICN ;
LBRACE {
RBRACE }
SEMICN ;
INTCON 123
SEMICN ;
CHRCON 'c'
SEMICN ;
IDENFR f6
LPARENT (
RPARENT )
SEMICN ;
IFTK if
LPARENT (
NOT !
INTCON 0
RPARENT )
LBRACE {
IDENFR f2
LPARENT (
INTCON 1
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
INTCON 0
AND &&
IDENFR d
NEQ !=
IDENFR a
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
INTCON 1
OR ||
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
NOT !
IDENFR d
EQL ==
IDENFR a
OR ||
IDENFR a
GRE >
INTCON 0
AND &&
INTCON 1
EQL ==
INTCON 1
AND &&
LPARENT (
IDENFR d
PLUS +
INTCON 1
RPARENT )
MOD %
INTCON 2
DIV /
INTCON 2
RPARENT )
LBRACE {
RBRACE }
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
CONSTTK const
INTTK int
IDENFR const_var1
ASSIGN =
INTCON 17
COMMA ,
IDENFR const_var2
ASSIGN =
LPARENT (
INTCON 7
PLUS +
INTCON 17
RPARENT )
DIV /
INTCON 8
SEMICN ;
CONSTTK const
INTTK int
IDENFR arr
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
RBRACE }
SEMICN ;
CONSTTK const
CHARTK char
IDENFR const_var3
ASSIGN =
CHRCON 'c'
SEMICN ;
CONSTTK const
CHARTK char
IDENFR s
LBRACK [
INTCON 5
RBRACK ]
ASSIGN =
STRCON "abcd"
SEMICN ;
CHARTK char
IDENFR str
LBRACK [
INTCON 5
RBRACK ]
ASSIGN =
STRCON "abcd"
SEMICN ;
CONSTTK const
INTTK int
IDENFR cot_var1
ASSIGN =
IDENFR const_var1
PLUS +
IDENFR const_var2
SEMICN ;
INTTK int
IDENFR var1
ASSIGN =
INTCON 5
SEMICN ;
INTTK int
IDENFR var2
ASSIGN =
INTCON 2
COMMA ,
IDENFR var3
ASSIGN =
INTCON 10
SEMICN ;
CHARTK char
IDENFR var4
ASSIGN =
INTCON 6
PLUS +
INTCON 1
COMMA ,
IDENFR var5
ASSIGN =
INTCON 8
SEMICN ;
INTTK int
IDENFR f3
LPARENT (
INTTK int
IDENFR arr1
LBRACK [
RBRACK ]
COMMA ,
INTTK int
IDENFR arr2
LBRACK [
RBRACK ]
COMMA ,
INTTK int
IDENFR para1
COMMA ,
INTTK int
IDENFR para2
RPARENT )
LBRACE {
INTTK int
IDENFR i
SEMICN ;
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
INTCON 1
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
IDENFR i
EQL ==
INTCON 0
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IDENFR para1
ASSIGN =
IDENFR para1
PLUS +
IDENFR para2
SEMICN ;
RBRACE }
RETURNTK return
IDENFR arr1
LBRACK [
IDENFR i
RBRACK ]
MULT *
LPARENT (
IDENFR arr2
LBRACK [
IDENFR i
RBRACK ]
PLUS +
IDENFR para1
RPARENT )
MINU -
IDENFR para2
SEMICN ;
RBRACE }
INTTK int
IDENFR f4
LPARENT (
INTTK int
IDENFR para1
COMMA ,
INTTK int
IDENFR para2
RPARENT )
LBRACE {
RETURNTK return
IDENFR para1
PLUS +
IDENFR para2
SEMICN ;
RBRACE }
CHARTK char
IDENFR f5
LPARENT (
CHARTK char
IDENFR para1
COMMA ,
CHARTK char
IDENFR para2
RPARENT )
LBRACE {
RETURNTK return
IDENFR para1
PLUS +
IDENFR para2
SEMICN ;
RBRACE }
INTTK int
IDENFR f7
LPARENT (
INTTK int
IDENFR para
RPARENT )
LBRACE {
RETURNTK return
IDENFR para
SEMICN ;
RBRACE }
CHARTK char
IDENFR f8
LPARENT (
CHARTK char
IDENFR para
RPARENT )
LBRACE {
RETURNTK return
IDENFR para
SEMICN ;
RBRACE }
INTTK int
IDENFR f6
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
VOIDTK void
IDENFR f2
LPARENT (
INTTK int
IDENFR para
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR para
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR f9
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "22371491\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR a
ASSIGN =
INTCON 0
SEMICN ;
IDENFR f9
LPARENT (
RPARENT )
SEMICN ;
INTTK int
IDENFR ff
ASSIGN =
INTCON 1
SEMICN ;
INTTK int
IDENFR arr
LBRACK [
INTCON 3
RBRACK ]
SEMICN ;
INTTK int
IDENFR arr1
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
RBRACE }
SEMICN ;
INTTK int
IDENFR arr2
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
INTCON 4
COMMA ,
INTCON 5
COMMA ,
INTCON 6
RBRACE }
SEMICN ;
INTTK int
IDENFR o
ASSIGN =
IDENFR f3
LPARENT (
IDENFR arr1
COMMA ,
IDENFR arr2
COMMA ,
IDENFR a
COMMA ,
IDENFR ff
RPARENT )
SEMICN ;
CONSTTK const
INTTK int
IDENFR b
ASSIGN =
INTCON 1
SEMICN ;
CHARTK char
IDENFR e
ASSIGN =
CHRCON 'c'
SEMICN ;
IDENFR e
ASSIGN =
IDENFR f8
LPARENT (
CHRCON 'c'
RPARENT )
SEMICN ;
IDENFR a
ASSIGN =
LPARENT (
IDENFR a
PLUS +
IDENFR b
RPARENT )
PLUS +
IDENFR b
PLUS +
INTCON 10
SEMICN ;
IDENFR a
ASSIGN =
MINU -
IDENFR a
SEMICN ;
MINU -
IDENFR a
SEMICN ;
IDENFR a
SEMICN ;
IDENFR a
ASSIGN =
IDENFR a
DIV /
INTCON 2
SEMICN ;
IDENFR a
ASSIGN =
IDENFR a
MOD %
INTCON 2
SEMICN ;
IFTK if
LPARENT (
NOT !
IDENFR a
RPARENT )
LBRACE {
RBRACE }
IDENFR e
ASSIGN =
IDENFR f5
LPARENT (
CHRCON 'g'
COMMA ,
CHRCON 'f'
RPARENT )
SEMICN ;
INTTK int
IDENFR h
ASSIGN =
IDENFR a
PLUS +
INTCON 1
SEMICN ;
IDENFR h
ASSIGN =
IDENFR a
SEMICN ;
IDENFR e
ASSIGN =
GETCHARTK getchar
LPARENT (
RPARENT )
SEMICN ;
INTTK int
IDENFR d
ASSIGN =
INTCON 4
COMMA ,
IDENFR c
ASSIGN =
INTCON 1
SEMICN ;
INTTK int
IDENFR i
SEMICN ;
IDENFR i
ASSIGN =
IDENFR f7
LPARENT (
INTCON 0
RPARENT )
SEMICN ;
IDENFR c
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR c
ASSIGN =
IDENFR f4
LPARENT (
IDENFR a
COMMA ,
IDENFR d
RPARENT )
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
IDENFR d
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IDENFR c
ASSIGN =
IDENFR a
MULT *
MINU -
INTCON 1
PLUS +
LPARENT (
IDENFR d
DIV /
LPARENT (
IDENFR i
PLUS +
INTCON 1
RPARENT )
RPARENT )
MOD %
INTCON 2
PLUS +
LPARENT (
IDENFR b
DIV /
MINU -
PLUS +
MINU -
INTCON 3
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR c
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR c
GRE >
INTCON 0
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "pass\n"
RPARENT )
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "failed\n"
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR i
GEQ >=
INTCON 0
RPARENT )
LBRACE {
CONTINUETK continue
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
RBRACE }
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
IDENFR i
LSS <
IDENFR d
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
IDENFR d
SEMICN ;
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
IDENFR i
LSS <
IDENFR d
SEMICN ;
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
SEMICN ;
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
SEMICN ;
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
IFTK if
LPARENT (
NOT !
INTCON 0
RPARENT )
LBRACE {
RBRACE }
ELSETK else
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR d
GEQ >=
IDENFR a
RPARENT )
LBRACE {
RBRACE }
SEMICN ;
IFTK if
LPARENT (
IDENFR d
LEQ <=
IDENFR a
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR d
EQL ==
IDENFR a
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR d
GRE >
IDENFR a
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR d
LSS <
IDENFR a
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR d
NEQ !=
IDENFR a
RPARENT )
SEMICN ;
LBRACE {
RBRACE }
SEMICN ;
INTCON 123
SEMICN ;
CHRCON 'c'
SEMICN ;
IDENFR f6
LPARENT (
RPARENT )
SEMICN ;
IFTK if
LPARENT (
NOT !
INTCON 0
RPARENT )
LBRACE {
IDENFR f2
LPARENT (
INTCON 1
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
INTCON 0
AND &&
IDENFR d
NEQ !=
IDENFR a
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
INTCON 1
OR ||
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
NOT !
IDENFR d
EQL ==
IDENFR a
OR ||
IDENFR a
GRE >
INTCON 0
AND &&
INTCON 1
EQL ==
INTCON 1
AND &&
LPARENT (
IDENFR d
PLUS +
INTCON 1
RPARENT )
MOD %
INTCON 2
DIV /
INTCON 2
RPARENT )
LBRACE {
RBRACE }
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
IDENFR d
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IDENFR c
ASSIGN =
IDENFR a
MULT *
MINU -
INTCON 1
PLUS +
LPARENT (
IDENFR d
DIV /
LPARENT (
IDENFR i
PLUS +
INTCON 1
RPARENT )
RPARENT )
MOD %
INTCON 2
PLUS +
LPARENT (
IDENFR b
DIV /
MINU -
PLUS +
MINU -
INTCON 3
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR c
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR c
GRE >
INTCON 0
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "pass\n"
RPARENT )
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "failed\n"
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR i
GEQ >=
INTCON 0
RPARENT )
LBRACE {
CONTINUETK continue
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
RBRACE }
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
IDENFR i
LSS <
IDENFR d
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
IDENFR d
SEMICN ;
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
IDENFR i
LSS <
IDENFR d
SEMICN ;
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
SEMICN ;
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
SEMICN ;
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
IFTK if
LPARENT (
NOT !
INTCON 0
RPARENT )
LBRACE {
RBRACE }
ELSETK else
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR d
GEQ >=
IDENFR a
RPARENT )
LBRACE {
RBRACE }
SEMICN ;
IFTK if
LPARENT (
IDENFR d
LEQ <=
IDENFR a
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR d
EQL ==
IDENFR a
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR d
GRE >
IDENFR a
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR d
LSS <
IDENFR a
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR d
NEQ !=
IDENFR a
RPARENT )
SEMICN ;
LBRACE {
RBRACE }
SEMICN ;
INTCON 123
SEMICN ;
CHRCON 'c'
SEMICN ;
IDENFR f6
LPARENT (
RPARENT )
SEMICN ;
IFTK if
LPARENT (
NOT !
INTCON 0
RPARENT )
LBRACE {
IDENFR f2
LPARENT (
INTCON 1
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
INTCON 0
AND &&
IDENFR d
NEQ !=
IDENFR a
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
INTCON 1
OR ||
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
NOT !
IDENFR d
EQL ==
IDENFR a
OR ||
IDENFR a
GRE >
INTCON 0
AND &&
INTCON 1
EQL ==
INTCON 1
AND &&
LPARENT (
IDENFR d
PLUS +
INTCON 1
RPARENT )
MOD %
INTCON 2
DIV /
INTCON 2
RPARENT )
LBRACE {
RBRACE }
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
IDENFR d
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
GEQ >=
INTCON 0
RPARENT )
LBRACE {
CONTINUETK continue
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
RBRACE }
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
IDENFR d
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
GEQ >=
INTCON 0
RPARENT )
LBRACE {
CONTINUETK continue
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
RBRACE }
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
IDENFR d
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
GEQ >=
INTCON 0
RPARENT )
LBRACE {
CONTINUETK continue
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
RBRACE }
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
IDENFR d
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
GEQ >=
INTCON 0
RPARENT )
LBRACE {
CONTINUETK continue
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
RBRACE }
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
IDENFR d
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
GEQ >=
INTCON 0
RPARENT )
LBRACE {
CONTINUETK continue
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
RBRACE }
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
IDENFR d
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
GEQ >=
INTCON 0
RPARENT )
LBRACE {
CONTINUETK continue
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
RBRACE }
RETURNTK return
INTCON 0
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
IDENFR d
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
GEQ >=
INTCON 0
RPARENT )
LBRACE {
CONTINUETK continue
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
RBRACE }
RETURNTK return
INTCON 0
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
IDENFR d
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
GEQ >=
INTCON 0
RPARENT )
LBRACE {
CONTINUETK continue
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
RBRACE }
RETURNTK return
INTCON 0
RBRACE }
INTTK int
IDENFR a
SEMICN ;
VOIDTK void
IDENFR func
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
RBRACE }
VOIDTK void
IDENFR func1
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
IDENFR a
SEMICN ;
RBRACE }
VOIDTK void
IDENFR func2
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
IDENFR a
ASSIGN =
IDENFR a
PLUS +
INTCON 1
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
IDENFR d
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
GEQ >=
INTCON 0
RPARENT )
LBRACE {
CONTINUETK continue
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
RBRACE }
RETURNTK return
INTCON 0
RBRACE }
INTTK int
IDENFR a
SEMICN ;
VOIDTK void
IDENFR func
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
RBRACE }
VOIDTK void
IDENFR func1
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
IDENFR a
SEMICN ;
RBRACE }
VOIDTK void
IDENFR func2
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
IDENFR a
ASSIGN =
IDENFR a
PLUS +
INTCON 1
SEMICN ;
RBRACE }
INTTK int
IDENFR func4
LPARENT (
RPARENT )
LBRACE {
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
IDENFR d
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
GEQ >=
INTCON 0
RPARENT )
LBRACE {
CONTINUETK continue
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
RBRACE }
RETURNTK return
INTCON 0
RBRACE }
INTTK int
IDENFR a
SEMICN ;
VOIDTK void
IDENFR func
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR func1
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
IDENFR a
SEMICN ;
RBRACE }
VOIDTK void
IDENFR func2
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
IDENFR a
ASSIGN =
IDENFR a
PLUS +
INTCON 1
SEMICN ;
RBRACE }
INTTK int
IDENFR func4
LPARENT (
RPARENT )
LBRACE {
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
IDENFR d
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
GEQ >=
INTCON 0
RPARENT )
LBRACE {
CONTINUETK continue
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
RBRACE }
RETURNTK return
INTCON 0
RBRACE }
INTTK int
IDENFR a
SEMICN ;
VOIDTK void
IDENFR func
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
SEMICN ;
RBRACE }
INTTK int
IDENFR func1
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
IDENFR a
SEMICN ;
RBRACE }
VOIDTK void
IDENFR func2
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
IDENFR a
ASSIGN =
IDENFR a
PLUS +
INTCON 1
SEMICN ;
RBRACE }
INTTK int
IDENFR func4
LPARENT (
RPARENT )
LBRACE {
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
IDENFR d
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
GEQ >=
INTCON 0
RPARENT )
LBRACE {
CONTINUETK continue
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
RBRACE }
RETURNTK return
INTCON 0
RBRACE }
INTTK int
IDENFR func1
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
RPARENT )
LBRACE {
INTTK int
IDENFR a
SEMICN ;
IFTK if
LPARENT (
INTCON 1
RPARENT )
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
VOIDTK void
IDENFR func2
LPARENT (
INTTK int
IDENFR a
COMMA ,
CHARTK char
IDENFR c
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "%c\n"
COMMA ,
IDENFR c
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
CHARTK char
IDENFR func3
LPARENT (
CHARTK char
IDENFR c
RPARENT )
LBRACE {
RETURNTK return
IDENFR c
RBRACE }
CHARTK char
IDENFR func4
LPARENT (
CHARTK char
IDENFR c
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
RETURNTK return
IDENFR c
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
RBRACE }
VOIDTK void
IDENFR f1
LPARENT (
INTTK int
IDENFR x
RPARENT )
LBRACE {
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR f3
LPARENT (
CHARTK char
IDENFR c
RPARENT )
LBRACE {
RETURNTK return
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR e
ASSIGN =
INTCON 5
COMMA ,
IDENFR f
SEMICN ;
CHARTK char
IDENFR s
LBRACK [
INTCON 5
RBRACK ]
ASSIGN =
STRCON "abcd"
SEMICN ;
INTTK int
IDENFR h
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
RBRACE }
SEMICN ;
IDENFR func2
LPARENT (
IDENFR func1
LPARENT (
INTCON 2
COMMA ,
IDENFR e
RPARENT )
COMMA ,
IDENFR func3
LPARENT (
CHRCON 'a'
RPARENT )
RPARENT )
SEMICN ;
IDENFR func2
LPARENT (
IDENFR func1
LPARENT (
IDENFR e
COMMA ,
IDENFR f
RPARENT )
COMMA ,
IDENFR func3
LPARENT (
IDENFR s
LBRACK [
INTCON 0
RPARENT )
RPARENT )
SEMICN ;
IDENFR func2
LPARENT (
IDENFR func1
LPARENT (
IDENFR func1
LPARENT (
INTCON 2
COMMA ,
IDENFR e
RPARENT )
COMMA ,
IDENFR func1
LPARENT (
INTCON 3
COMMA ,
IDENFR f
RPARENT )
RPARENT )
COMMA ,
IDENFR func3
LPARENT (
IDENFR func3
LPARENT (
CHRCON 'a'
RPARENT )
RPARENT )
RPARENT )
SEMICN ;
IDENFR func2
LPARENT (
IDENFR func1
LPARENT (
IDENFR func1
LPARENT (
INTCON 2
COMMA ,
IDENFR e
PLUS +
INTCON 5
RPARENT )
COMMA ,
IDENFR func1
LPARENT (
INTCON 3
COMMA ,
IDENFR f
PLUS +
INTCON 6
PLUS +
CHRCON 'y'
RPARENT )
RPARENT )
COMMA ,
IDENFR func3
LPARENT (
IDENFR func3
LPARENT (
CHRCON 'a'
RPARENT )
RPARENT )
RPARENT )
SEMICN ;
IDENFR func2
LPARENT (
IDENFR func1
LPARENT (
INTCON 2
COMMA ,
IDENFR e
RPARENT )
RPARENT )
SEMICN ;
IDENFR func2
LPARENT (
IDENFR func1
LPARENT (
INTCON 2
COMMA ,
IDENFR e
RPARENT )
COMMA ,
IDENFR func3
LPARENT (
CHRCON 'a'
COMMA ,
INTCON 2
RPARENT )
RPARENT )
SEMICN ;
IDENFR func2
LPARENT (
IDENFR func1
LPARENT (
IDENFR e
RPARENT )
COMMA ,
IDENFR func3
LPARENT (
CHRCON 'a'
RPARENT )
RPARENT )
SEMICN ;
IDENFR func2
LPARENT (
IDENFR func1
LPARENT (
INTCON 2
COMMA ,
IDENFR e
RPARENT )
COMMA ,
IDENFR func3
LPARENT (
IDENFR s
RPARENT )
RPARENT )
SEMICN ;
IDENFR func2
LPARENT (
IDENFR s
COMMA ,
IDENFR h
RPARENT )
SEMICN ;
IDENFR func2
LPARENT (
IDENFR func1
LPARENT (
IDENFR func1
LPARENT (
INTCON 2
COMMA ,
IDENFR e
RPARENT )
COMMA ,
IDENFR func1
LPARENT (
INTCON 3
COMMA ,
CHRCON 'x'
RPARENT )
RPARENT )
COMMA ,
IDENFR func3
LPARENT (
IDENFR func4
LPARENT (
CHRCON 'a'
RPARENT )
RPARENT )
RPARENT )
SEMICN ;
INTTK int
IDENFR x
ASSIGN =
INTCON 10
SEMICN ;
INTTK int
IDENFR t
LBRACK [
INTCON 5
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
COMMA ,
INTCON 4
COMMA ,
INTCON 5
RBRACE }
SEMICN ;
CHARTK char
IDENFR c
ASSIGN =
CHRCON 'a'
SEMICN ;
IDENFR f1
LPARENT (
IDENFR c
RPARENT )
SEMICN ;
IDENFR f1
LPARENT (
IDENFR s
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR f3
LPARENT (
IDENFR x
RPARENT )
SEMICN ;
IDENFR f3
LPARENT (
IDENFR t
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR func1
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
RPARENT )
LBRACE {
INTTK int
IDENFR a
SEMICN ;
IFTK if
LPARENT (
INTCON 1
RPARENT )
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
VOIDTK void
IDENFR func2
LPARENT (
INTTK int
IDENFR a
COMMA ,
CHARTK char
IDENFR c
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "%c\n"
COMMA ,
IDENFR c
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
CHARTK char
IDENFR func3
LPARENT (
CHARTK char
IDENFR c
RPARENT )
LBRACE {
RETURNTK return
IDENFR c
RBRACE }
CHARTK char
IDENFR func4
LPARENT (
CHARTK char
IDENFR c
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
RETURNTK return
IDENFR c
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
RBRACE }
VOIDTK void
IDENFR f1
LPARENT (
INTTK int
IDENFR x
RPARENT )
LBRACE {
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR f3
LPARENT (
CHARTK char
IDENFR c
RPARENT )
LBRACE {
RETURNTK return
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR e
ASSIGN =
INTCON 5
COMMA ,
IDENFR f
SEMICN ;
CHARTK char
IDENFR s
LBRACK [
INTCON 5
RBRACK ]
ASSIGN =
STRCON "abcd"
SEMICN ;
INTTK int
IDENFR h
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
RBRACE }
SEMICN ;
IDENFR func2
LPARENT (
IDENFR func1
LPARENT (
INTCON 2
COMMA ,
IDENFR e
RPARENT )
COMMA ,
IDENFR func3
LPARENT (
CHRCON 'a'
RPARENT )
RPARENT )
SEMICN ;
IDENFR func2
LPARENT (
IDENFR func1
LPARENT (
IDENFR e
COMMA ,
IDENFR f
RPARENT )
COMMA ,
IDENFR func3
LPARENT (
IDENFR s
LBRACK [
INTCON 0
RPARENT )
RPARENT )
SEMICN ;
IDENFR func2
LPARENT (
IDENFR func1
LPARENT (
IDENFR func1
LPARENT (
INTCON 2
COMMA ,
IDENFR e
RPARENT )
COMMA ,
IDENFR func1
LPARENT (
INTCON 3
COMMA ,
IDENFR f
RPARENT )
RPARENT )
COMMA ,
IDENFR func3
LPARENT (
IDENFR func3
LPARENT (
CHRCON 'a'
RPARENT )
RPARENT )
RPARENT )
SEMICN ;
IDENFR func2
LPARENT (
IDENFR func1
LPARENT (
IDENFR func1
LPARENT (
INTCON 2
COMMA ,
IDENFR e
PLUS +
INTCON 5
RPARENT )
COMMA ,
IDENFR func1
LPARENT (
INTCON 3
COMMA ,
IDENFR f
PLUS +
INTCON 6
PLUS +
CHRCON 'y'
RPARENT )
RPARENT )
COMMA ,
IDENFR func3
LPARENT (
IDENFR func3
LPARENT (
CHRCON 'a'
RPARENT )
RPARENT )
RPARENT )
SEMICN ;
IDENFR func2
LPARENT (
IDENFR func1
LPARENT (
INTCON 2
COMMA ,
IDENFR e
RPARENT )
RPARENT )
SEMICN ;
IDENFR func2
LPARENT (
IDENFR func1
LPARENT (
INTCON 2
COMMA ,
IDENFR e
RPARENT )
COMMA ,
IDENFR func3
LPARENT (
CHRCON 'a'
COMMA ,
INTCON 2
RPARENT )
RPARENT )
SEMICN ;
IDENFR func2
LPARENT (
IDENFR func1
LPARENT (
IDENFR e
RPARENT )
COMMA ,
IDENFR func3
LPARENT (
CHRCON 'a'
RPARENT )
RPARENT )
SEMICN ;
IDENFR func2
LPARENT (
IDENFR func1
LPARENT (
INTCON 2
COMMA ,
IDENFR e
RPARENT )
COMMA ,
IDENFR func3
LPARENT (
IDENFR s
RPARENT )
RPARENT )
SEMICN ;
IDENFR func2
LPARENT (
IDENFR s
COMMA ,
IDENFR h
RPARENT )
SEMICN ;
IDENFR func2
LPARENT (
IDENFR func1
LPARENT (
IDENFR func1
LPARENT (
INTCON 2
COMMA ,
IDENFR e
RPARENT )
COMMA ,
IDENFR func1
LPARENT (
INTCON 3
COMMA ,
CHRCON 'x'
RPARENT )
RPARENT )
COMMA ,
IDENFR func3
LPARENT (
IDENFR func4
LPARENT (
CHRCON 'a'
RPARENT )
RPARENT )
RPARENT )
SEMICN ;
INTTK int
IDENFR x
ASSIGN =
INTCON 10
SEMICN ;
INTTK int
IDENFR t
LBRACK [
INTCON 5
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
COMMA ,
INTCON 4
COMMA ,
INTCON 5
RBRACE }
SEMICN ;
CHARTK char
IDENFR c
ASSIGN =
CHRCON 'a'
SEMICN ;
IDENFR f1
LPARENT (
IDENFR c
RPARENT )
SEMICN ;
IDENFR f1
LPARENT (
IDENFR s
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR f3
LPARENT (
IDENFR x
RPARENT )
SEMICN ;
IDENFR f3
LPARENT (
IDENFR t
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
CONSTTK const
INTTK int
IDENFR a
ASSIGN =
INTCON 0
SEMICN ;
FORTK for
LPARENT (
IDENFR a
ASSIGN =
INTCON 0
SEMICN ;
IDENFR a
LSS <
INTCON 1
SEMICN ;
IDENFR a
ASSIGN =
IDENFR a
PLUS +
INTCON 1
RPARENT )
LBRACE {
RBRACE }
RBRACE }
